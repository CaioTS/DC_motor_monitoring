
DC_monitoring_BLE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072c8  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  08007408  08007408  00017408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800759c  0800759c  0001759c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080075a4  080075a4  000175a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080075a8  080075a8  000175a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000008  080075ac  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000270  20000078  0800761c  00020078  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200002e8  0800761c  000202e8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001aaa8  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003114  00000000  00000000  0003ab50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000019e8  00000000  00000000  0003dc68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000018c0  00000000  00000000  0003f650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000202bd  00000000  00000000  00040f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001a592  00000000  00000000  000611cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000cb607  00000000  00000000  0007b75f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00146d66  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007748  00000000  00000000  00146db8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000078 	.word	0x20000078
 800015c:	00000000 	.word	0x00000000
 8000160:	080073f0 	.word	0x080073f0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000007c 	.word	0x2000007c
 800017c:	080073f0 	.word	0x080073f0

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000234:	f000 b974 	b.w	8000520 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	468e      	mov	lr, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	d14d      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025e:	428a      	cmp	r2, r1
 8000260:	4694      	mov	ip, r2
 8000262:	d969      	bls.n	8000338 <__udivmoddi4+0xe8>
 8000264:	fab2 f282 	clz	r2, r2
 8000268:	b152      	cbz	r2, 8000280 <__udivmoddi4+0x30>
 800026a:	fa01 f302 	lsl.w	r3, r1, r2
 800026e:	f1c2 0120 	rsb	r1, r2, #32
 8000272:	fa20 f101 	lsr.w	r1, r0, r1
 8000276:	fa0c fc02 	lsl.w	ip, ip, r2
 800027a:	ea41 0e03 	orr.w	lr, r1, r3
 800027e:	4094      	lsls	r4, r2
 8000280:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000284:	0c21      	lsrs	r1, r4, #16
 8000286:	fbbe f6f8 	udiv	r6, lr, r8
 800028a:	fa1f f78c 	uxth.w	r7, ip
 800028e:	fb08 e316 	mls	r3, r8, r6, lr
 8000292:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000296:	fb06 f107 	mul.w	r1, r6, r7
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002a6:	f080 811f 	bcs.w	80004e8 <__udivmoddi4+0x298>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 811c 	bls.w	80004e8 <__udivmoddi4+0x298>
 80002b0:	3e02      	subs	r6, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a5b      	subs	r3, r3, r1
 80002b6:	b2a4      	uxth	r4, r4
 80002b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002bc:	fb08 3310 	mls	r3, r8, r0, r3
 80002c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c4:	fb00 f707 	mul.w	r7, r0, r7
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	d90a      	bls.n	80002e2 <__udivmoddi4+0x92>
 80002cc:	eb1c 0404 	adds.w	r4, ip, r4
 80002d0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002d4:	f080 810a 	bcs.w	80004ec <__udivmoddi4+0x29c>
 80002d8:	42a7      	cmp	r7, r4
 80002da:	f240 8107 	bls.w	80004ec <__udivmoddi4+0x29c>
 80002de:	4464      	add	r4, ip
 80002e0:	3802      	subs	r0, #2
 80002e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002e6:	1be4      	subs	r4, r4, r7
 80002e8:	2600      	movs	r6, #0
 80002ea:	b11d      	cbz	r5, 80002f4 <__udivmoddi4+0xa4>
 80002ec:	40d4      	lsrs	r4, r2
 80002ee:	2300      	movs	r3, #0
 80002f0:	e9c5 4300 	strd	r4, r3, [r5]
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0xc2>
 80002fe:	2d00      	cmp	r5, #0
 8000300:	f000 80ef 	beq.w	80004e2 <__udivmoddi4+0x292>
 8000304:	2600      	movs	r6, #0
 8000306:	e9c5 0100 	strd	r0, r1, [r5]
 800030a:	4630      	mov	r0, r6
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f683 	clz	r6, r3
 8000316:	2e00      	cmp	r6, #0
 8000318:	d14a      	bne.n	80003b0 <__udivmoddi4+0x160>
 800031a:	428b      	cmp	r3, r1
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd4>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80f9 	bhi.w	8000516 <__udivmoddi4+0x2c6>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb61 0303 	sbc.w	r3, r1, r3
 800032a:	2001      	movs	r0, #1
 800032c:	469e      	mov	lr, r3
 800032e:	2d00      	cmp	r5, #0
 8000330:	d0e0      	beq.n	80002f4 <__udivmoddi4+0xa4>
 8000332:	e9c5 4e00 	strd	r4, lr, [r5]
 8000336:	e7dd      	b.n	80002f4 <__udivmoddi4+0xa4>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xec>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 8092 	bne.w	800046a <__udivmoddi4+0x21a>
 8000346:	eba1 010c 	sub.w	r1, r1, ip
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f fe8c 	uxth.w	lr, ip
 8000352:	2601      	movs	r6, #1
 8000354:	0c20      	lsrs	r0, r4, #16
 8000356:	fbb1 f3f7 	udiv	r3, r1, r7
 800035a:	fb07 1113 	mls	r1, r7, r3, r1
 800035e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000362:	fb0e f003 	mul.w	r0, lr, r3
 8000366:	4288      	cmp	r0, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x12c>
 800036a:	eb1c 0101 	adds.w	r1, ip, r1
 800036e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x12a>
 8000374:	4288      	cmp	r0, r1
 8000376:	f200 80cb 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800037a:	4643      	mov	r3, r8
 800037c:	1a09      	subs	r1, r1, r0
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb1 f0f7 	udiv	r0, r1, r7
 8000384:	fb07 1110 	mls	r1, r7, r0, r1
 8000388:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800038c:	fb0e fe00 	mul.w	lr, lr, r0
 8000390:	45a6      	cmp	lr, r4
 8000392:	d908      	bls.n	80003a6 <__udivmoddi4+0x156>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800039c:	d202      	bcs.n	80003a4 <__udivmoddi4+0x154>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f200 80bb 	bhi.w	800051a <__udivmoddi4+0x2ca>
 80003a4:	4608      	mov	r0, r1
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ae:	e79c      	b.n	80002ea <__udivmoddi4+0x9a>
 80003b0:	f1c6 0720 	rsb	r7, r6, #32
 80003b4:	40b3      	lsls	r3, r6
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa20 f407 	lsr.w	r4, r0, r7
 80003c2:	fa01 f306 	lsl.w	r3, r1, r6
 80003c6:	431c      	orrs	r4, r3
 80003c8:	40f9      	lsrs	r1, r7
 80003ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ce:	fa00 f306 	lsl.w	r3, r0, r6
 80003d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003d6:	0c20      	lsrs	r0, r4, #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fb09 1118 	mls	r1, r9, r8, r1
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	fb08 f00e 	mul.w	r0, r8, lr
 80003e8:	4288      	cmp	r0, r1
 80003ea:	fa02 f206 	lsl.w	r2, r2, r6
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b8>
 80003f0:	eb1c 0101 	adds.w	r1, ip, r1
 80003f4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003f8:	f080 8088 	bcs.w	800050c <__udivmoddi4+0x2bc>
 80003fc:	4288      	cmp	r0, r1
 80003fe:	f240 8085 	bls.w	800050c <__udivmoddi4+0x2bc>
 8000402:	f1a8 0802 	sub.w	r8, r8, #2
 8000406:	4461      	add	r1, ip
 8000408:	1a09      	subs	r1, r1, r0
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000410:	fb09 1110 	mls	r1, r9, r0, r1
 8000414:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000418:	fb00 fe0e 	mul.w	lr, r0, lr
 800041c:	458e      	cmp	lr, r1
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1e2>
 8000420:	eb1c 0101 	adds.w	r1, ip, r1
 8000424:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000428:	d26c      	bcs.n	8000504 <__udivmoddi4+0x2b4>
 800042a:	458e      	cmp	lr, r1
 800042c:	d96a      	bls.n	8000504 <__udivmoddi4+0x2b4>
 800042e:	3802      	subs	r0, #2
 8000430:	4461      	add	r1, ip
 8000432:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000436:	fba0 9402 	umull	r9, r4, r0, r2
 800043a:	eba1 010e 	sub.w	r1, r1, lr
 800043e:	42a1      	cmp	r1, r4
 8000440:	46c8      	mov	r8, r9
 8000442:	46a6      	mov	lr, r4
 8000444:	d356      	bcc.n	80004f4 <__udivmoddi4+0x2a4>
 8000446:	d053      	beq.n	80004f0 <__udivmoddi4+0x2a0>
 8000448:	b15d      	cbz	r5, 8000462 <__udivmoddi4+0x212>
 800044a:	ebb3 0208 	subs.w	r2, r3, r8
 800044e:	eb61 010e 	sbc.w	r1, r1, lr
 8000452:	fa01 f707 	lsl.w	r7, r1, r7
 8000456:	fa22 f306 	lsr.w	r3, r2, r6
 800045a:	40f1      	lsrs	r1, r6
 800045c:	431f      	orrs	r7, r3
 800045e:	e9c5 7100 	strd	r7, r1, [r5]
 8000462:	2600      	movs	r6, #0
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	f1c2 0320 	rsb	r3, r2, #32
 800046e:	40d8      	lsrs	r0, r3
 8000470:	fa0c fc02 	lsl.w	ip, ip, r2
 8000474:	fa21 f303 	lsr.w	r3, r1, r3
 8000478:	4091      	lsls	r1, r2
 800047a:	4301      	orrs	r1, r0
 800047c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000480:	fa1f fe8c 	uxth.w	lr, ip
 8000484:	fbb3 f0f7 	udiv	r0, r3, r7
 8000488:	fb07 3610 	mls	r6, r7, r0, r3
 800048c:	0c0b      	lsrs	r3, r1, #16
 800048e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000492:	fb00 f60e 	mul.w	r6, r0, lr
 8000496:	429e      	cmp	r6, r3
 8000498:	fa04 f402 	lsl.w	r4, r4, r2
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x260>
 800049e:	eb1c 0303 	adds.w	r3, ip, r3
 80004a2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004a6:	d22f      	bcs.n	8000508 <__udivmoddi4+0x2b8>
 80004a8:	429e      	cmp	r6, r3
 80004aa:	d92d      	bls.n	8000508 <__udivmoddi4+0x2b8>
 80004ac:	3802      	subs	r0, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	1b9b      	subs	r3, r3, r6
 80004b2:	b289      	uxth	r1, r1
 80004b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b8:	fb07 3316 	mls	r3, r7, r6, r3
 80004bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c0:	fb06 f30e 	mul.w	r3, r6, lr
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x28a>
 80004c8:	eb1c 0101 	adds.w	r1, ip, r1
 80004cc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004d0:	d216      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d914      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004d6:	3e02      	subs	r6, #2
 80004d8:	4461      	add	r1, ip
 80004da:	1ac9      	subs	r1, r1, r3
 80004dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004e0:	e738      	b.n	8000354 <__udivmoddi4+0x104>
 80004e2:	462e      	mov	r6, r5
 80004e4:	4628      	mov	r0, r5
 80004e6:	e705      	b.n	80002f4 <__udivmoddi4+0xa4>
 80004e8:	4606      	mov	r6, r0
 80004ea:	e6e3      	b.n	80002b4 <__udivmoddi4+0x64>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6f8      	b.n	80002e2 <__udivmoddi4+0x92>
 80004f0:	454b      	cmp	r3, r9
 80004f2:	d2a9      	bcs.n	8000448 <__udivmoddi4+0x1f8>
 80004f4:	ebb9 0802 	subs.w	r8, r9, r2
 80004f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004fc:	3801      	subs	r0, #1
 80004fe:	e7a3      	b.n	8000448 <__udivmoddi4+0x1f8>
 8000500:	4646      	mov	r6, r8
 8000502:	e7ea      	b.n	80004da <__udivmoddi4+0x28a>
 8000504:	4620      	mov	r0, r4
 8000506:	e794      	b.n	8000432 <__udivmoddi4+0x1e2>
 8000508:	4640      	mov	r0, r8
 800050a:	e7d1      	b.n	80004b0 <__udivmoddi4+0x260>
 800050c:	46d0      	mov	r8, sl
 800050e:	e77b      	b.n	8000408 <__udivmoddi4+0x1b8>
 8000510:	3b02      	subs	r3, #2
 8000512:	4461      	add	r1, ip
 8000514:	e732      	b.n	800037c <__udivmoddi4+0x12c>
 8000516:	4630      	mov	r0, r6
 8000518:	e709      	b.n	800032e <__udivmoddi4+0xde>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e742      	b.n	80003a6 <__udivmoddi4+0x156>

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000524:	b480      	push	{r7}
 8000526:	b085      	sub	sp, #20
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800052c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000530:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000532:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	4313      	orrs	r3, r2
 800053a:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800053c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000540:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	4013      	ands	r3, r2
 8000546:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000548:	68fb      	ldr	r3, [r7, #12]
}
 800054a:	bf00      	nop
 800054c:	3714      	adds	r7, #20
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr

08000556 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000556:	b480      	push	{r7}
 8000558:	b085      	sub	sp, #20
 800055a:	af00      	add	r7, sp, #0
 800055c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800055e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000562:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000564:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	4313      	orrs	r3, r2
 800056c:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800056e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000572:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	4013      	ands	r3, r2
 8000578:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800057a:	68fb      	ldr	r3, [r7, #12]
}
 800057c:	bf00      	nop
 800057e:	3714      	adds	r7, #20
 8000580:	46bd      	mov	sp, r7
 8000582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000586:	4770      	bx	lr

08000588 <HAL_GPIO_EXTI_Callback>:
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
   if (GPIO_Pin == PIN_Veloci_Pin ){
 8000592:	88fb      	ldrh	r3, [r7, #6]
 8000594:	2b10      	cmp	r3, #16
 8000596:	d104      	bne.n	80005a2 <HAL_GPIO_EXTI_Callback+0x1a>
	   angle_cnt = __HAL_TIM_GetCounter(&htim2);
 8000598:	4b05      	ldr	r3, [pc, #20]	; (80005b0 <HAL_GPIO_EXTI_Callback+0x28>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800059e:	4a05      	ldr	r2, [pc, #20]	; (80005b4 <HAL_GPIO_EXTI_Callback+0x2c>)
 80005a0:	6013      	str	r3, [r2, #0]
   }

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80005a2:	bf00      	nop
 80005a4:	370c      	adds	r7, #12
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	200001e8 	.word	0x200001e8
 80005b4:	200002cc 	.word	0x200002cc

080005b8 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80005c0:	1d39      	adds	r1, r7, #4
 80005c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005c6:	2201      	movs	r2, #1
 80005c8:	4803      	ldr	r0, [pc, #12]	; (80005d8 <__io_putchar+0x20>)
 80005ca:	f005 f909 	bl	80057e0 <HAL_UART_Transmit>
  return ch;
 80005ce:	687b      	ldr	r3, [r7, #4]
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	3708      	adds	r7, #8
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	20000234 	.word	0x20000234

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e0:	f000 fde2 	bl	80011a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e4:	f000 f83a 	bl	800065c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005e8:	f000 f880 	bl	80006ec <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ec:	f000 fa94 	bl	8000b18 <MX_GPIO_Init>
  MX_DMA_Init();
 80005f0:	f000 fa80 	bl	8000af4 <MX_DMA_Init>
  MX_ADC1_Init();
 80005f4:	f000 f898 	bl	8000728 <MX_ADC1_Init>
  MX_I2C1_Init();
 80005f8:	f000 f8f4 	bl	80007e4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80005fc:	f000 fa2e 	bl	8000a5c <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000600:	f000 f92e 	bl	8000860 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000604:	f000 f9dc 	bl	80009c0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000608:	2100      	movs	r1, #0
 800060a:	480e      	ldr	r0, [pc, #56]	; (8000644 <main+0x68>)
 800060c:	f001 fd08 	bl	8002020 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1,(uint32_t*)&value_adc,1);
 8000610:	2201      	movs	r2, #1
 8000612:	490d      	ldr	r1, [pc, #52]	; (8000648 <main+0x6c>)
 8000614:	480b      	ldr	r0, [pc, #44]	; (8000644 <main+0x68>)
 8000616:	f001 f925 	bl	8001864 <HAL_ADC_Start_DMA>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800061a:	2100      	movs	r1, #0
 800061c:	480b      	ldr	r0, [pc, #44]	; (800064c <main+0x70>)
 800061e:	f004 f82b 	bl	8004678 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 99);
 8000622:	4b0a      	ldr	r3, [pc, #40]	; (800064c <main+0x70>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	2263      	movs	r2, #99	; 0x63
 8000628:	635a      	str	r2, [r3, #52]	; 0x34


  HAL_TIM_Base_Start(&htim2);
 800062a:	4809      	ldr	r0, [pc, #36]	; (8000650 <main+0x74>)
 800062c:	f003 ff7c 	bl	8004528 <HAL_TIM_Base_Start>

  printf("Ola mundo\n");
 8000630:	4808      	ldr	r0, [pc, #32]	; (8000654 <main+0x78>)
 8000632:	f005 ff5f 	bl	80064f4 <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  printf("%d\n\r",value_adc);
 8000636:	4b04      	ldr	r3, [pc, #16]	; (8000648 <main+0x6c>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4619      	mov	r1, r3
 800063c:	4806      	ldr	r0, [pc, #24]	; (8000658 <main+0x7c>)
 800063e:	f005 fed3 	bl	80063e8 <iprintf>
 8000642:	e7f8      	b.n	8000636 <main+0x5a>
 8000644:	20000094 	.word	0x20000094
 8000648:	200002c8 	.word	0x200002c8
 800064c:	2000019c 	.word	0x2000019c
 8000650:	200001e8 	.word	0x200001e8
 8000654:	08007408 	.word	0x08007408
 8000658:	08007414 	.word	0x08007414

0800065c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b098      	sub	sp, #96	; 0x60
 8000660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000662:	f107 031c 	add.w	r3, r7, #28
 8000666:	2244      	movs	r2, #68	; 0x44
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f005 feb4 	bl	80063d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000670:	463b      	mov	r3, r7
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	605a      	str	r2, [r3, #4]
 8000678:	609a      	str	r2, [r3, #8]
 800067a:	60da      	str	r2, [r3, #12]
 800067c:	611a      	str	r2, [r3, #16]
 800067e:	615a      	str	r2, [r3, #20]
 8000680:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 8000682:	2322      	movs	r3, #34	; 0x22
 8000684:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000686:	f44f 7380 	mov.w	r3, #256	; 0x100
 800068a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800068c:	2301      	movs	r3, #1
 800068e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000690:	2340      	movs	r3, #64	; 0x40
 8000692:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000694:	2300      	movs	r3, #0
 8000696:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000698:	2360      	movs	r3, #96	; 0x60
 800069a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800069c:	2300      	movs	r3, #0
 800069e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a0:	f107 031c 	add.w	r3, r7, #28
 80006a4:	4618      	mov	r0, r3
 80006a6:	f002 fef7 	bl	8003498 <HAL_RCC_OscConfig>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80006b0:	f000 fa60 	bl	8000b74 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80006b4:	236f      	movs	r3, #111	; 0x6f
 80006b6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80006b8:	2300      	movs	r3, #0
 80006ba:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80006c8:	2300      	movs	r3, #0
 80006ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006d0:	463b      	mov	r3, r7
 80006d2:	2100      	movs	r1, #0
 80006d4:	4618      	mov	r0, r3
 80006d6:	f003 fa15 	bl	8003b04 <HAL_RCC_ClockConfig>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80006e0:	f000 fa48 	bl	8000b74 <Error_Handler>
  }
}
 80006e4:	bf00      	nop
 80006e6:	3760      	adds	r7, #96	; 0x60
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}

080006ec <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b08c      	sub	sp, #48	; 0x30
 80006f0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006f2:	463b      	mov	r3, r7
 80006f4:	2230      	movs	r2, #48	; 0x30
 80006f6:	2100      	movs	r1, #0
 80006f8:	4618      	mov	r0, r3
 80006fa:	f005 fe6d 	bl	80063d8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 80006fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000702:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000704:	2300      	movs	r3, #0
 8000706:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8000708:	2310      	movs	r3, #16
 800070a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800070c:	463b      	mov	r3, r7
 800070e:	4618      	mov	r0, r3
 8000710:	f003 fdbc 	bl	800428c <HAL_RCCEx_PeriphCLKConfig>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 800071a:	f000 fa2b 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800071e:	bf00      	nop
 8000720:	3730      	adds	r7, #48	; 0x30
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
	...

08000728 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000738:	4b27      	ldr	r3, [pc, #156]	; (80007d8 <MX_ADC1_Init+0xb0>)
 800073a:	4a28      	ldr	r2, [pc, #160]	; (80007dc <MX_ADC1_Init+0xb4>)
 800073c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 800073e:	4b26      	ldr	r3, [pc, #152]	; (80007d8 <MX_ADC1_Init+0xb0>)
 8000740:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8000744:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000746:	4b24      	ldr	r3, [pc, #144]	; (80007d8 <MX_ADC1_Init+0xb0>)
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800074c:	4b22      	ldr	r3, [pc, #136]	; (80007d8 <MX_ADC1_Init+0xb0>)
 800074e:	2200      	movs	r2, #0
 8000750:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000752:	4b21      	ldr	r3, [pc, #132]	; (80007d8 <MX_ADC1_Init+0xb0>)
 8000754:	2200      	movs	r2, #0
 8000756:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000758:	4b1f      	ldr	r3, [pc, #124]	; (80007d8 <MX_ADC1_Init+0xb0>)
 800075a:	2204      	movs	r2, #4
 800075c:	615a      	str	r2, [r3, #20]
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 800075e:	4b1e      	ldr	r3, [pc, #120]	; (80007d8 <MX_ADC1_Init+0xb0>)
 8000760:	2200      	movs	r2, #0
 8000762:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000764:	4b1c      	ldr	r3, [pc, #112]	; (80007d8 <MX_ADC1_Init+0xb0>)
 8000766:	2200      	movs	r2, #0
 8000768:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800076a:	4b1b      	ldr	r3, [pc, #108]	; (80007d8 <MX_ADC1_Init+0xb0>)
 800076c:	2200      	movs	r2, #0
 800076e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000770:	4b19      	ldr	r3, [pc, #100]	; (80007d8 <MX_ADC1_Init+0xb0>)
 8000772:	2201      	movs	r2, #1
 8000774:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000776:	4b18      	ldr	r3, [pc, #96]	; (80007d8 <MX_ADC1_Init+0xb0>)
 8000778:	2201      	movs	r2, #1
 800077a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800077c:	4b16      	ldr	r3, [pc, #88]	; (80007d8 <MX_ADC1_Init+0xb0>)
 800077e:	2200      	movs	r2, #0
 8000780:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000784:	4b14      	ldr	r3, [pc, #80]	; (80007d8 <MX_ADC1_Init+0xb0>)
 8000786:	2200      	movs	r2, #0
 8000788:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800078a:	4b13      	ldr	r3, [pc, #76]	; (80007d8 <MX_ADC1_Init+0xb0>)
 800078c:	2200      	movs	r2, #0
 800078e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000790:	4b11      	ldr	r3, [pc, #68]	; (80007d8 <MX_ADC1_Init+0xb0>)
 8000792:	2201      	movs	r2, #1
 8000794:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000798:	4b0f      	ldr	r3, [pc, #60]	; (80007d8 <MX_ADC1_Init+0xb0>)
 800079a:	2200      	movs	r2, #0
 800079c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800079e:	480e      	ldr	r0, [pc, #56]	; (80007d8 <MX_ADC1_Init+0xb0>)
 80007a0:	f000 fede 	bl	8001560 <HAL_ADC_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80007aa:	f000 f9e3 	bl	8000b74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80007ae:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <MX_ADC1_Init+0xb8>)
 80007b0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007b2:	2300      	movs	r3, #0
 80007b4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80007b6:	2300      	movs	r3, #0
 80007b8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	4619      	mov	r1, r3
 80007be:	4806      	ldr	r0, [pc, #24]	; (80007d8 <MX_ADC1_Init+0xb0>)
 80007c0:	f001 f8e4 	bl	800198c <HAL_ADC_ConfigChannel>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80007ca:	f000 f9d3 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007ce:	bf00      	nop
 80007d0:	3710      	adds	r7, #16
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	20000094 	.word	0x20000094
 80007dc:	40012400 	.word	0x40012400
 80007e0:	14000020 	.word	0x14000020

080007e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007e8:	4b1b      	ldr	r3, [pc, #108]	; (8000858 <MX_I2C1_Init+0x74>)
 80007ea:	4a1c      	ldr	r2, [pc, #112]	; (800085c <MX_I2C1_Init+0x78>)
 80007ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 80007ee:	4b1a      	ldr	r3, [pc, #104]	; (8000858 <MX_I2C1_Init+0x74>)
 80007f0:	f640 6214 	movw	r2, #3604	; 0xe14
 80007f4:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007f6:	4b18      	ldr	r3, [pc, #96]	; (8000858 <MX_I2C1_Init+0x74>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007fc:	4b16      	ldr	r3, [pc, #88]	; (8000858 <MX_I2C1_Init+0x74>)
 80007fe:	2201      	movs	r2, #1
 8000800:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000802:	4b15      	ldr	r3, [pc, #84]	; (8000858 <MX_I2C1_Init+0x74>)
 8000804:	2200      	movs	r2, #0
 8000806:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000808:	4b13      	ldr	r3, [pc, #76]	; (8000858 <MX_I2C1_Init+0x74>)
 800080a:	2200      	movs	r2, #0
 800080c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800080e:	4b12      	ldr	r3, [pc, #72]	; (8000858 <MX_I2C1_Init+0x74>)
 8000810:	2200      	movs	r2, #0
 8000812:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000814:	4b10      	ldr	r3, [pc, #64]	; (8000858 <MX_I2C1_Init+0x74>)
 8000816:	2200      	movs	r2, #0
 8000818:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800081a:	4b0f      	ldr	r3, [pc, #60]	; (8000858 <MX_I2C1_Init+0x74>)
 800081c:	2200      	movs	r2, #0
 800081e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000820:	480d      	ldr	r0, [pc, #52]	; (8000858 <MX_I2C1_Init+0x74>)
 8000822:	f002 f9c1 	bl	8002ba8 <HAL_I2C_Init>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800082c:	f000 f9a2 	bl	8000b74 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000830:	2100      	movs	r1, #0
 8000832:	4809      	ldr	r0, [pc, #36]	; (8000858 <MX_I2C1_Init+0x74>)
 8000834:	f002 fa47 	bl	8002cc6 <HAL_I2CEx_ConfigAnalogFilter>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800083e:	f000 f999 	bl	8000b74 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000842:	2100      	movs	r1, #0
 8000844:	4804      	ldr	r0, [pc, #16]	; (8000858 <MX_I2C1_Init+0x74>)
 8000846:	f002 fa89 	bl	8002d5c <HAL_I2CEx_ConfigDigitalFilter>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000850:	f000 f990 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}
 8000858:	20000148 	.word	0x20000148
 800085c:	40005400 	.word	0x40005400

08000860 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b09c      	sub	sp, #112	; 0x70
 8000864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000866:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000874:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000880:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000884:	2200      	movs	r2, #0
 8000886:	601a      	str	r2, [r3, #0]
 8000888:	605a      	str	r2, [r3, #4]
 800088a:	609a      	str	r2, [r3, #8]
 800088c:	60da      	str	r2, [r3, #12]
 800088e:	611a      	str	r2, [r3, #16]
 8000890:	615a      	str	r2, [r3, #20]
 8000892:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000894:	1d3b      	adds	r3, r7, #4
 8000896:	2234      	movs	r2, #52	; 0x34
 8000898:	2100      	movs	r1, #0
 800089a:	4618      	mov	r0, r3
 800089c:	f005 fd9c 	bl	80063d8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008a0:	4b45      	ldr	r3, [pc, #276]	; (80009b8 <MX_TIM1_Init+0x158>)
 80008a2:	4a46      	ldr	r2, [pc, #280]	; (80009bc <MX_TIM1_Init+0x15c>)
 80008a4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80008a6:	4b44      	ldr	r3, [pc, #272]	; (80009b8 <MX_TIM1_Init+0x158>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ac:	4b42      	ldr	r3, [pc, #264]	; (80009b8 <MX_TIM1_Init+0x158>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 80008b2:	4b41      	ldr	r3, [pc, #260]	; (80009b8 <MX_TIM1_Init+0x158>)
 80008b4:	2263      	movs	r2, #99	; 0x63
 80008b6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008b8:	4b3f      	ldr	r3, [pc, #252]	; (80009b8 <MX_TIM1_Init+0x158>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008be:	4b3e      	ldr	r3, [pc, #248]	; (80009b8 <MX_TIM1_Init+0x158>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008c4:	4b3c      	ldr	r3, [pc, #240]	; (80009b8 <MX_TIM1_Init+0x158>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008ca:	483b      	ldr	r0, [pc, #236]	; (80009b8 <MX_TIM1_Init+0x158>)
 80008cc:	f003 fdd4 	bl	8004478 <HAL_TIM_Base_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80008d6:	f000 f94d 	bl	8000b74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008de:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008e0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80008e4:	4619      	mov	r1, r3
 80008e6:	4834      	ldr	r0, [pc, #208]	; (80009b8 <MX_TIM1_Init+0x158>)
 80008e8:	f004 f9c0 	bl	8004c6c <HAL_TIM_ConfigClockSource>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80008f2:	f000 f93f 	bl	8000b74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80008f6:	4830      	ldr	r0, [pc, #192]	; (80009b8 <MX_TIM1_Init+0x158>)
 80008f8:	f003 fe5c 	bl	80045b4 <HAL_TIM_PWM_Init>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000902:	f000 f937 	bl	8000b74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000906:	2300      	movs	r3, #0
 8000908:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800090a:	2300      	movs	r3, #0
 800090c:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800090e:	2300      	movs	r3, #0
 8000910:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000912:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000916:	4619      	mov	r1, r3
 8000918:	4827      	ldr	r0, [pc, #156]	; (80009b8 <MX_TIM1_Init+0x158>)
 800091a:	f004 fde3 	bl	80054e4 <HAL_TIMEx_MasterConfigSynchronization>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000924:	f000 f926 	bl	8000b74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000928:	2360      	movs	r3, #96	; 0x60
 800092a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800092c:	2300      	movs	r3, #0
 800092e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000930:	2300      	movs	r3, #0
 8000932:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000934:	2300      	movs	r3, #0
 8000936:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000938:	2300      	movs	r3, #0
 800093a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800093c:	2300      	movs	r3, #0
 800093e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000940:	2300      	movs	r3, #0
 8000942:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000944:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000948:	2200      	movs	r2, #0
 800094a:	4619      	mov	r1, r3
 800094c:	481a      	ldr	r0, [pc, #104]	; (80009b8 <MX_TIM1_Init+0x158>)
 800094e:	f004 f879 	bl	8004a44 <HAL_TIM_PWM_ConfigChannel>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000958:	f000 f90c 	bl	8000b74 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800095c:	2300      	movs	r3, #0
 800095e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000960:	2300      	movs	r3, #0
 8000962:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000964:	2300      	movs	r3, #0
 8000966:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000968:	2300      	movs	r3, #0
 800096a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800096c:	2300      	movs	r3, #0
 800096e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000970:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000974:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000976:	2300      	movs	r3, #0
 8000978:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800097a:	2300      	movs	r3, #0
 800097c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800097e:	2300      	movs	r3, #0
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000982:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000986:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000988:	2300      	movs	r3, #0
 800098a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800098c:	2300      	movs	r3, #0
 800098e:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000990:	2300      	movs	r3, #0
 8000992:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000994:	1d3b      	adds	r3, r7, #4
 8000996:	4619      	mov	r1, r3
 8000998:	4807      	ldr	r0, [pc, #28]	; (80009b8 <MX_TIM1_Init+0x158>)
 800099a:	f004 fe03 	bl	80055a4 <HAL_TIMEx_ConfigBreakDeadTime>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 80009a4:	f000 f8e6 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80009a8:	4803      	ldr	r0, [pc, #12]	; (80009b8 <MX_TIM1_Init+0x158>)
 80009aa:	f000 fa19 	bl	8000de0 <HAL_TIM_MspPostInit>

}
 80009ae:	bf00      	nop
 80009b0:	3770      	adds	r7, #112	; 0x70
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	2000019c 	.word	0x2000019c
 80009bc:	40012c00 	.word	0x40012c00

080009c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b088      	sub	sp, #32
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009c6:	f107 0310 	add.w	r3, r7, #16
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	605a      	str	r2, [r3, #4]
 80009d0:	609a      	str	r2, [r3, #8]
 80009d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009d4:	1d3b      	adds	r3, r7, #4
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	605a      	str	r2, [r3, #4]
 80009dc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009de:	4b1e      	ldr	r3, [pc, #120]	; (8000a58 <MX_TIM2_Init+0x98>)
 80009e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009e4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80009e6:	4b1c      	ldr	r3, [pc, #112]	; (8000a58 <MX_TIM2_Init+0x98>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ec:	4b1a      	ldr	r3, [pc, #104]	; (8000a58 <MX_TIM2_Init+0x98>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80009f2:	4b19      	ldr	r3, [pc, #100]	; (8000a58 <MX_TIM2_Init+0x98>)
 80009f4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009f8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009fa:	4b17      	ldr	r3, [pc, #92]	; (8000a58 <MX_TIM2_Init+0x98>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a00:	4b15      	ldr	r3, [pc, #84]	; (8000a58 <MX_TIM2_Init+0x98>)
 8000a02:	2280      	movs	r2, #128	; 0x80
 8000a04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a06:	4814      	ldr	r0, [pc, #80]	; (8000a58 <MX_TIM2_Init+0x98>)
 8000a08:	f003 fd36 	bl	8004478 <HAL_TIM_Base_Init>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000a12:	f000 f8af 	bl	8000b74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a1a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a1c:	f107 0310 	add.w	r3, r7, #16
 8000a20:	4619      	mov	r1, r3
 8000a22:	480d      	ldr	r0, [pc, #52]	; (8000a58 <MX_TIM2_Init+0x98>)
 8000a24:	f004 f922 	bl	8004c6c <HAL_TIM_ConfigClockSource>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000a2e:	f000 f8a1 	bl	8000b74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a32:	2300      	movs	r3, #0
 8000a34:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a36:	2300      	movs	r3, #0
 8000a38:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a3a:	1d3b      	adds	r3, r7, #4
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4806      	ldr	r0, [pc, #24]	; (8000a58 <MX_TIM2_Init+0x98>)
 8000a40:	f004 fd50 	bl	80054e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000a4a:	f000 f893 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a4e:	bf00      	nop
 8000a50:	3720      	adds	r7, #32
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	200001e8 	.word	0x200001e8

08000a5c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a60:	4b22      	ldr	r3, [pc, #136]	; (8000aec <MX_USART1_UART_Init+0x90>)
 8000a62:	4a23      	ldr	r2, [pc, #140]	; (8000af0 <MX_USART1_UART_Init+0x94>)
 8000a64:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a66:	4b21      	ldr	r3, [pc, #132]	; (8000aec <MX_USART1_UART_Init+0x90>)
 8000a68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a6c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a6e:	4b1f      	ldr	r3, [pc, #124]	; (8000aec <MX_USART1_UART_Init+0x90>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a74:	4b1d      	ldr	r3, [pc, #116]	; (8000aec <MX_USART1_UART_Init+0x90>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a7a:	4b1c      	ldr	r3, [pc, #112]	; (8000aec <MX_USART1_UART_Init+0x90>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a80:	4b1a      	ldr	r3, [pc, #104]	; (8000aec <MX_USART1_UART_Init+0x90>)
 8000a82:	220c      	movs	r2, #12
 8000a84:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a86:	4b19      	ldr	r3, [pc, #100]	; (8000aec <MX_USART1_UART_Init+0x90>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a8c:	4b17      	ldr	r3, [pc, #92]	; (8000aec <MX_USART1_UART_Init+0x90>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a92:	4b16      	ldr	r3, [pc, #88]	; (8000aec <MX_USART1_UART_Init+0x90>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a98:	4b14      	ldr	r3, [pc, #80]	; (8000aec <MX_USART1_UART_Init+0x90>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a9e:	4b13      	ldr	r3, [pc, #76]	; (8000aec <MX_USART1_UART_Init+0x90>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000aa4:	4811      	ldr	r0, [pc, #68]	; (8000aec <MX_USART1_UART_Init+0x90>)
 8000aa6:	f004 fe4b 	bl	8005740 <HAL_UART_Init>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000ab0:	f000 f860 	bl	8000b74 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	480d      	ldr	r0, [pc, #52]	; (8000aec <MX_USART1_UART_Init+0x90>)
 8000ab8:	f005 fb9a 	bl	80061f0 <HAL_UARTEx_SetTxFifoThreshold>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000ac2:	f000 f857 	bl	8000b74 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	4808      	ldr	r0, [pc, #32]	; (8000aec <MX_USART1_UART_Init+0x90>)
 8000aca:	f005 fbcf 	bl	800626c <HAL_UARTEx_SetRxFifoThreshold>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000ad4:	f000 f84e 	bl	8000b74 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000ad8:	4804      	ldr	r0, [pc, #16]	; (8000aec <MX_USART1_UART_Init+0x90>)
 8000ada:	f005 fb50 	bl	800617e <HAL_UARTEx_DisableFifoMode>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000ae4:	f000 f846 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ae8:	bf00      	nop
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	20000234 	.word	0x20000234
 8000af0:	40013800 	.word	0x40013800

08000af4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000af8:	2004      	movs	r0, #4
 8000afa:	f7ff fd13 	bl	8000524 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000afe:	2001      	movs	r0, #1
 8000b00:	f7ff fd10 	bl	8000524 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000b04:	2200      	movs	r2, #0
 8000b06:	2100      	movs	r1, #0
 8000b08:	200b      	movs	r0, #11
 8000b0a:	f001 fc52 	bl	80023b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000b0e:	200b      	movs	r0, #11
 8000b10:	f001 fc69 	bl	80023e6 <HAL_NVIC_EnableIRQ>

}
 8000b14:	bf00      	nop
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b086      	sub	sp, #24
 8000b1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1e:	1d3b      	adds	r3, r7, #4
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
 8000b26:	609a      	str	r2, [r3, #8]
 8000b28:	60da      	str	r2, [r3, #12]
 8000b2a:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2c:	2002      	movs	r0, #2
 8000b2e:	f7ff fd12 	bl	8000556 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b32:	2001      	movs	r0, #1
 8000b34:	f7ff fd0f 	bl	8000556 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b38:	2010      	movs	r0, #16
 8000b3a:	f7ff fd0c 	bl	8000556 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin : PIN_Veloci_Pin */
  GPIO_InitStruct.Pin = PIN_Veloci_Pin;
 8000b3e:	2310      	movs	r3, #16
 8000b40:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b42:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b46:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(PIN_Veloci_GPIO_Port, &GPIO_InitStruct);
 8000b4c:	1d3b      	adds	r3, r7, #4
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4807      	ldr	r0, [pc, #28]	; (8000b70 <MX_GPIO_Init+0x58>)
 8000b52:	f001 fea9 	bl	80028a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000b56:	2200      	movs	r2, #0
 8000b58:	2100      	movs	r1, #0
 8000b5a:	200a      	movs	r0, #10
 8000b5c:	f001 fc29 	bl	80023b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000b60:	200a      	movs	r0, #10
 8000b62:	f001 fc40 	bl	80023e6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b66:	bf00      	nop
 8000b68:	3718      	adds	r7, #24
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	48001000 	.word	0x48001000

08000b74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b78:	b672      	cpsid	i
}
 8000b7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <Error_Handler+0x8>

08000b7e <LL_AHB2_GRP1_EnableClock>:
{
 8000b7e:	b480      	push	{r7}
 8000b80:	b085      	sub	sp, #20
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000b86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	4313      	orrs	r3, r2
 8000b94:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ba2:	68fb      	ldr	r3, [r7, #12]
}
 8000ba4:	bf00      	nop
 8000ba6:	3714      	adds	r7, #20
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000bb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bbc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000bbe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000bc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bcc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bd4:	68fb      	ldr	r3, [r7, #12]
}
 8000bd6:	bf00      	nop
 8000bd8:	3714      	adds	r7, #20
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr

08000be2 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000be2:	b480      	push	{r7}
 8000be4:	b085      	sub	sp, #20
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000bea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bee:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000bf0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000bfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bfe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	4013      	ands	r3, r2
 8000c04:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c06:	68fb      	ldr	r3, [r7, #12]
}
 8000c08:	bf00      	nop
 8000c0a:	3714      	adds	r7, #20
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr

08000c14 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
	...

08000c24 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b094      	sub	sp, #80	; 0x50
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c3c:	f107 030c 	add.w	r3, r7, #12
 8000c40:	2230      	movs	r2, #48	; 0x30
 8000c42:	2100      	movs	r1, #0
 8000c44:	4618      	mov	r0, r3
 8000c46:	f005 fbc7 	bl	80063d8 <memset>
  if(hadc->Instance==ADC1)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4a2b      	ldr	r2, [pc, #172]	; (8000cfc <HAL_ADC_MspInit+0xd8>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d14e      	bne.n	8000cf2 <HAL_ADC_MspInit+0xce>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c58:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_HSI;
 8000c5a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000c5e:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c60:	f107 030c 	add.w	r3, r7, #12
 8000c64:	4618      	mov	r0, r3
 8000c66:	f003 fb11 	bl	800428c <HAL_RCCEx_PeriphCLKConfig>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000c70:	f7ff ff80 	bl	8000b74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000c74:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c78:	f7ff ffb3 	bl	8000be2 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7c:	2001      	movs	r0, #1
 8000c7e:	f7ff ff7e 	bl	8000b7e <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c82:	2301      	movs	r3, #1
 8000c84:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c86:	2303      	movs	r3, #3
 8000c88:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c8e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000c92:	4619      	mov	r1, r3
 8000c94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c98:	f001 fe06 	bl	80028a8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000c9c:	4b18      	ldr	r3, [pc, #96]	; (8000d00 <HAL_ADC_MspInit+0xdc>)
 8000c9e:	4a19      	ldr	r2, [pc, #100]	; (8000d04 <HAL_ADC_MspInit+0xe0>)
 8000ca0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000ca2:	4b17      	ldr	r3, [pc, #92]	; (8000d00 <HAL_ADC_MspInit+0xdc>)
 8000ca4:	2205      	movs	r2, #5
 8000ca6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ca8:	4b15      	ldr	r3, [pc, #84]	; (8000d00 <HAL_ADC_MspInit+0xdc>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cae:	4b14      	ldr	r3, [pc, #80]	; (8000d00 <HAL_ADC_MspInit+0xdc>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000cb4:	4b12      	ldr	r3, [pc, #72]	; (8000d00 <HAL_ADC_MspInit+0xdc>)
 8000cb6:	2280      	movs	r2, #128	; 0x80
 8000cb8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000cba:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <HAL_ADC_MspInit+0xdc>)
 8000cbc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cc0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000cc2:	4b0f      	ldr	r3, [pc, #60]	; (8000d00 <HAL_ADC_MspInit+0xdc>)
 8000cc4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cc8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000cca:	4b0d      	ldr	r3, [pc, #52]	; (8000d00 <HAL_ADC_MspInit+0xdc>)
 8000ccc:	2220      	movs	r2, #32
 8000cce:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000cd0:	4b0b      	ldr	r3, [pc, #44]	; (8000d00 <HAL_ADC_MspInit+0xdc>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000cd6:	480a      	ldr	r0, [pc, #40]	; (8000d00 <HAL_ADC_MspInit+0xdc>)
 8000cd8:	f001 fba0 	bl	800241c <HAL_DMA_Init>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 8000ce2:	f7ff ff47 	bl	8000b74 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4a05      	ldr	r2, [pc, #20]	; (8000d00 <HAL_ADC_MspInit+0xdc>)
 8000cea:	641a      	str	r2, [r3, #64]	; 0x40
 8000cec:	4a04      	ldr	r2, [pc, #16]	; (8000d00 <HAL_ADC_MspInit+0xdc>)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000cf2:	bf00      	nop
 8000cf4:	3750      	adds	r7, #80	; 0x50
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40012400 	.word	0x40012400
 8000d00:	200000e8 	.word	0x200000e8
 8000d04:	40020008 	.word	0x40020008

08000d08 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b094      	sub	sp, #80	; 0x50
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d10:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
 8000d1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d20:	f107 030c 	add.w	r3, r7, #12
 8000d24:	2230      	movs	r2, #48	; 0x30
 8000d26:	2100      	movs	r1, #0
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f005 fb55 	bl	80063d8 <memset>
  if(hi2c->Instance==I2C1)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a17      	ldr	r2, [pc, #92]	; (8000d90 <HAL_I2C_MspInit+0x88>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d126      	bne.n	8000d86 <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000d38:	2304      	movs	r3, #4
 8000d3a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000d3c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000d40:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d42:	f107 030c 	add.w	r3, r7, #12
 8000d46:	4618      	mov	r0, r3
 8000d48:	f003 faa0 	bl	800428c <HAL_RCCEx_PeriphCLKConfig>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000d52:	f7ff ff0f 	bl	8000b74 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d56:	2002      	movs	r0, #2
 8000d58:	f7ff ff11 	bl	8000b7e <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d5c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d60:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d62:	2312      	movs	r3, #18
 8000d64:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d6e:	2304      	movs	r3, #4
 8000d70:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d72:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d76:	4619      	mov	r1, r3
 8000d78:	4806      	ldr	r0, [pc, #24]	; (8000d94 <HAL_I2C_MspInit+0x8c>)
 8000d7a:	f001 fd95 	bl	80028a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d7e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000d82:	f7ff ff15 	bl	8000bb0 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d86:	bf00      	nop
 8000d88:	3750      	adds	r7, #80	; 0x50
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40005400 	.word	0x40005400
 8000d94:	48000400 	.word	0x48000400

08000d98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a0d      	ldr	r2, [pc, #52]	; (8000ddc <HAL_TIM_Base_MspInit+0x44>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d104      	bne.n	8000db4 <HAL_TIM_Base_MspInit+0x1c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000daa:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000dae:	f7ff ff18 	bl	8000be2 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000db2:	e00f      	b.n	8000dd4 <HAL_TIM_Base_MspInit+0x3c>
  else if(htim_base->Instance==TIM2)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000dbc:	d10a      	bne.n	8000dd4 <HAL_TIM_Base_MspInit+0x3c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	f7ff fef6 	bl	8000bb0 <LL_APB1_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	201c      	movs	r0, #28
 8000dca:	f001 faf2 	bl	80023b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000dce:	201c      	movs	r0, #28
 8000dd0:	f001 fb09 	bl	80023e6 <HAL_NVIC_EnableIRQ>
}
 8000dd4:	bf00      	nop
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40012c00 	.word	0x40012c00

08000de0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b088      	sub	sp, #32
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de8:	f107 030c 	add.w	r3, r7, #12
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a0d      	ldr	r2, [pc, #52]	; (8000e34 <HAL_TIM_MspPostInit+0x54>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d114      	bne.n	8000e2c <HAL_TIM_MspPostInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e02:	2001      	movs	r0, #1
 8000e04:	f7ff febb 	bl	8000b7e <LL_AHB2_GRP1_EnableClock>
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000e08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e0c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e16:	2300      	movs	r3, #0
 8000e18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1e:	f107 030c 	add.w	r3, r7, #12
 8000e22:	4619      	mov	r1, r3
 8000e24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e28:	f001 fd3e 	bl	80028a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000e2c:	bf00      	nop
 8000e2e:	3720      	adds	r7, #32
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	40012c00 	.word	0x40012c00

08000e38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b094      	sub	sp, #80	; 0x50
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e40:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
 8000e4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e50:	f107 030c 	add.w	r3, r7, #12
 8000e54:	2230      	movs	r2, #48	; 0x30
 8000e56:	2100      	movs	r1, #0
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f005 fabd 	bl	80063d8 <memset>
  if(huart->Instance==USART1)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a17      	ldr	r2, [pc, #92]	; (8000ec0 <HAL_UART_MspInit+0x88>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d126      	bne.n	8000eb6 <HAL_UART_MspInit+0x7e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e70:	f107 030c 	add.w	r3, r7, #12
 8000e74:	4618      	mov	r0, r3
 8000e76:	f003 fa09 	bl	800428c <HAL_RCCEx_PeriphCLKConfig>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e80:	f7ff fe78 	bl	8000b74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e84:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000e88:	f7ff feab 	bl	8000be2 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8c:	2001      	movs	r0, #1
 8000e8e:	f7ff fe76 	bl	8000b7e <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e92:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000e96:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ea4:	2307      	movs	r3, #7
 8000ea6:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000eac:	4619      	mov	r1, r3
 8000eae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eb2:	f001 fcf9 	bl	80028a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000eb6:	bf00      	nop
 8000eb8:	3750      	adds	r7, #80	; 0x50
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40013800 	.word	0x40013800

08000ec4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ec8:	e7fe      	b.n	8000ec8 <NMI_Handler+0x4>

08000eca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ece:	e7fe      	b.n	8000ece <HardFault_Handler+0x4>

08000ed0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed4:	e7fe      	b.n	8000ed4 <MemManage_Handler+0x4>

08000ed6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eda:	e7fe      	b.n	8000eda <BusFault_Handler+0x4>

08000edc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee0:	e7fe      	b.n	8000ee0 <UsageFault_Handler+0x4>

08000ee2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr

08000efe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f10:	f000 f9a4 	bl	800125c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f14:	bf00      	nop
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PIN_Veloci_Pin);
 8000f1c:	2010      	movs	r0, #16
 8000f1e:	f001 fe2b 	bl	8002b78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
	...

08000f28 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000f2c:	4802      	ldr	r0, [pc, #8]	; (8000f38 <DMA1_Channel1_IRQHandler+0x10>)
 8000f2e:	f001 fb7c 	bl	800262a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	200000e8 	.word	0x200000e8

08000f3c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f40:	4802      	ldr	r0, [pc, #8]	; (8000f4c <TIM2_IRQHandler+0x10>)
 8000f42:	f003 fc5f 	bl	8004804 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	200001e8 	.word	0x200001e8

08000f50 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b086      	sub	sp, #24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	60b9      	str	r1, [r7, #8]
 8000f5a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	617b      	str	r3, [r7, #20]
 8000f60:	e00a      	b.n	8000f78 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f62:	f3af 8000 	nop.w
 8000f66:	4601      	mov	r1, r0
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	1c5a      	adds	r2, r3, #1
 8000f6c:	60ba      	str	r2, [r7, #8]
 8000f6e:	b2ca      	uxtb	r2, r1
 8000f70:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	3301      	adds	r3, #1
 8000f76:	617b      	str	r3, [r7, #20]
 8000f78:	697a      	ldr	r2, [r7, #20]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	dbf0      	blt.n	8000f62 <_read+0x12>
  }

  return len;
 8000f80:	687b      	ldr	r3, [r7, #4]
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3718      	adds	r7, #24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b086      	sub	sp, #24
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	60f8      	str	r0, [r7, #12]
 8000f92:	60b9      	str	r1, [r7, #8]
 8000f94:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f96:	2300      	movs	r3, #0
 8000f98:	617b      	str	r3, [r7, #20]
 8000f9a:	e009      	b.n	8000fb0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	1c5a      	adds	r2, r3, #1
 8000fa0:	60ba      	str	r2, [r7, #8]
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff fb07 	bl	80005b8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	3301      	adds	r3, #1
 8000fae:	617b      	str	r3, [r7, #20]
 8000fb0:	697a      	ldr	r2, [r7, #20]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	dbf1      	blt.n	8000f9c <_write+0x12>
  }
  return len;
 8000fb8:	687b      	ldr	r3, [r7, #4]
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3718      	adds	r7, #24
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <_close>:

int _close(int file)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	b083      	sub	sp, #12
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	370c      	adds	r7, #12
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr

08000fda <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	b083      	sub	sp, #12
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
 8000fe2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fea:	605a      	str	r2, [r3, #4]
  return 0;
 8000fec:	2300      	movs	r3, #0
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <_isatty>:

int _isatty(int file)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	b083      	sub	sp, #12
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001002:	2301      	movs	r3, #1
}
 8001004:	4618      	mov	r0, r3
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001010:	b480      	push	{r7}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0
 8001016:	60f8      	str	r0, [r7, #12]
 8001018:	60b9      	str	r1, [r7, #8]
 800101a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800101c:	2300      	movs	r3, #0
}
 800101e:	4618      	mov	r0, r3
 8001020:	3714      	adds	r7, #20
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
	...

0800102c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b086      	sub	sp, #24
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001034:	4a14      	ldr	r2, [pc, #80]	; (8001088 <_sbrk+0x5c>)
 8001036:	4b15      	ldr	r3, [pc, #84]	; (800108c <_sbrk+0x60>)
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001040:	4b13      	ldr	r3, [pc, #76]	; (8001090 <_sbrk+0x64>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d102      	bne.n	800104e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001048:	4b11      	ldr	r3, [pc, #68]	; (8001090 <_sbrk+0x64>)
 800104a:	4a12      	ldr	r2, [pc, #72]	; (8001094 <_sbrk+0x68>)
 800104c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800104e:	4b10      	ldr	r3, [pc, #64]	; (8001090 <_sbrk+0x64>)
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4413      	add	r3, r2
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	429a      	cmp	r2, r3
 800105a:	d207      	bcs.n	800106c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800105c:	f005 f992 	bl	8006384 <__errno>
 8001060:	4603      	mov	r3, r0
 8001062:	220c      	movs	r2, #12
 8001064:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001066:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800106a:	e009      	b.n	8001080 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800106c:	4b08      	ldr	r3, [pc, #32]	; (8001090 <_sbrk+0x64>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001072:	4b07      	ldr	r3, [pc, #28]	; (8001090 <_sbrk+0x64>)
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4413      	add	r3, r2
 800107a:	4a05      	ldr	r2, [pc, #20]	; (8001090 <_sbrk+0x64>)
 800107c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800107e:	68fb      	ldr	r3, [r7, #12]
}
 8001080:	4618      	mov	r0, r3
 8001082:	3718      	adds	r7, #24
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	20003000 	.word	0x20003000
 800108c:	00000400 	.word	0x00000400
 8001090:	200002d0 	.word	0x200002d0
 8001094:	200002e8 	.word	0x200002e8

08001098 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 800109c:	4b22      	ldr	r3, [pc, #136]	; (8001128 <SystemInit+0x90>)
 800109e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010a2:	4a21      	ldr	r2, [pc, #132]	; (8001128 <SystemInit+0x90>)
 80010a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80010ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010b6:	f043 0301 	orr.w	r3, r3, #1
 80010ba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80010bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010c0:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80010c4:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80010c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010d0:	4b16      	ldr	r3, [pc, #88]	; (800112c <SystemInit+0x94>)
 80010d2:	4013      	ands	r3, r2
 80010d4:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80010d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010e2:	f023 0305 	bic.w	r3, r3, #5
 80010e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80010ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80010f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010f6:	f023 0301 	bic.w	r3, r3, #1
 80010fa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80010fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001102:	4a0b      	ldr	r2, [pc, #44]	; (8001130 <SystemInit+0x98>)
 8001104:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001106:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001110:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001114:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001116:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800111a:	2200      	movs	r2, #0
 800111c:	619a      	str	r2, [r3, #24]
}
 800111e:	bf00      	nop
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr
 8001128:	e000ed00 	.word	0xe000ed00
 800112c:	faf6fefb 	.word	0xfaf6fefb
 8001130:	22041000 	.word	0x22041000

08001134 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001134:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001136:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001138:	3304      	adds	r3, #4

0800113a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800113a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800113c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800113e:	d3f9      	bcc.n	8001134 <CopyDataInit>
  bx lr
 8001140:	4770      	bx	lr

08001142 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001142:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001144:	3004      	adds	r0, #4

08001146 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001146:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001148:	d3fb      	bcc.n	8001142 <FillZerobss>
  bx lr
 800114a:	4770      	bx	lr

0800114c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800114c:	480c      	ldr	r0, [pc, #48]	; (8001180 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800114e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001150:	f7ff ffa2 	bl	8001098 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001154:	480b      	ldr	r0, [pc, #44]	; (8001184 <LoopForever+0x6>)
 8001156:	490c      	ldr	r1, [pc, #48]	; (8001188 <LoopForever+0xa>)
 8001158:	4a0c      	ldr	r2, [pc, #48]	; (800118c <LoopForever+0xe>)
 800115a:	2300      	movs	r3, #0
 800115c:	f7ff ffed 	bl	800113a <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001160:	480b      	ldr	r0, [pc, #44]	; (8001190 <LoopForever+0x12>)
 8001162:	490c      	ldr	r1, [pc, #48]	; (8001194 <LoopForever+0x16>)
 8001164:	4a0c      	ldr	r2, [pc, #48]	; (8001198 <LoopForever+0x1a>)
 8001166:	2300      	movs	r3, #0
 8001168:	f7ff ffe7 	bl	800113a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 800116c:	480b      	ldr	r0, [pc, #44]	; (800119c <LoopForever+0x1e>)
 800116e:	490c      	ldr	r1, [pc, #48]	; (80011a0 <LoopForever+0x22>)
 8001170:	2300      	movs	r3, #0
 8001172:	f7ff ffe8 	bl	8001146 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001176:	f005 f90b 	bl	8006390 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800117a:	f7ff fa2f 	bl	80005dc <main>

0800117e <LoopForever>:

LoopForever:
  b LoopForever
 800117e:	e7fe      	b.n	800117e <LoopForever>
  ldr   r0, =_estack
 8001180:	20003000 	.word	0x20003000
  INIT_DATA _sdata, _edata, _sidata
 8001184:	20000008 	.word	0x20000008
 8001188:	20000078 	.word	0x20000078
 800118c:	080075ac 	.word	0x080075ac
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001190:	20030000 	.word	0x20030000
 8001194:	20030000 	.word	0x20030000
 8001198:	0800761c 	.word	0x0800761c
  INIT_BSS _sbss, _ebss
 800119c:	20000078 	.word	0x20000078
 80011a0:	200002e8 	.word	0x200002e8

080011a4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011a4:	e7fe      	b.n	80011a4 <ADC1_IRQHandler>
	...

080011a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011ae:	2300      	movs	r3, #0
 80011b0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011b2:	4b0c      	ldr	r3, [pc, #48]	; (80011e4 <HAL_Init+0x3c>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a0b      	ldr	r2, [pc, #44]	; (80011e4 <HAL_Init+0x3c>)
 80011b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011bc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011be:	2003      	movs	r0, #3
 80011c0:	f001 f8ec 	bl	800239c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011c4:	200f      	movs	r0, #15
 80011c6:	f000 f80f 	bl	80011e8 <HAL_InitTick>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d002      	beq.n	80011d6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80011d0:	2301      	movs	r3, #1
 80011d2:	71fb      	strb	r3, [r7, #7]
 80011d4:	e001      	b.n	80011da <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011d6:	f7ff fd1d 	bl	8000c14 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011da:	79fb      	ldrb	r3, [r7, #7]
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3708      	adds	r7, #8
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	58004000 	.word	0x58004000

080011e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011f0:	2300      	movs	r3, #0
 80011f2:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80011f4:	4b17      	ldr	r3, [pc, #92]	; (8001254 <HAL_InitTick+0x6c>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d024      	beq.n	8001246 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80011fc:	f002 fe30 	bl	8003e60 <HAL_RCC_GetHCLKFreq>
 8001200:	4602      	mov	r2, r0
 8001202:	4b14      	ldr	r3, [pc, #80]	; (8001254 <HAL_InitTick+0x6c>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	4619      	mov	r1, r3
 8001208:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800120c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001210:	fbb2 f3f3 	udiv	r3, r2, r3
 8001214:	4618      	mov	r0, r3
 8001216:	f001 f8f4 	bl	8002402 <HAL_SYSTICK_Config>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d10f      	bne.n	8001240 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2b0f      	cmp	r3, #15
 8001224:	d809      	bhi.n	800123a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001226:	2200      	movs	r2, #0
 8001228:	6879      	ldr	r1, [r7, #4]
 800122a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800122e:	f001 f8c0 	bl	80023b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001232:	4a09      	ldr	r2, [pc, #36]	; (8001258 <HAL_InitTick+0x70>)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6013      	str	r3, [r2, #0]
 8001238:	e007      	b.n	800124a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	73fb      	strb	r3, [r7, #15]
 800123e:	e004      	b.n	800124a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001240:	2301      	movs	r3, #1
 8001242:	73fb      	strb	r3, [r7, #15]
 8001244:	e001      	b.n	800124a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800124a:	7bfb      	ldrb	r3, [r7, #15]
}
 800124c:	4618      	mov	r0, r3
 800124e:	3710      	adds	r7, #16
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	20000010 	.word	0x20000010
 8001258:	2000000c 	.word	0x2000000c

0800125c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001260:	4b06      	ldr	r3, [pc, #24]	; (800127c <HAL_IncTick+0x20>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	461a      	mov	r2, r3
 8001266:	4b06      	ldr	r3, [pc, #24]	; (8001280 <HAL_IncTick+0x24>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4413      	add	r3, r2
 800126c:	4a04      	ldr	r2, [pc, #16]	; (8001280 <HAL_IncTick+0x24>)
 800126e:	6013      	str	r3, [r2, #0]
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	20000010 	.word	0x20000010
 8001280:	200002d4 	.word	0x200002d4

08001284 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  return uwTick;
 8001288:	4b03      	ldr	r3, [pc, #12]	; (8001298 <HAL_GetTick+0x14>)
 800128a:	681b      	ldr	r3, [r3, #0]
}
 800128c:	4618      	mov	r0, r3
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	200002d4 	.word	0x200002d4

0800129c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80012a0:	4b03      	ldr	r3, [pc, #12]	; (80012b0 <HAL_GetTickPrio+0x14>)
 80012a2:	681b      	ldr	r3, [r3, #0]
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	2000000c 	.word	0x2000000c

080012b4 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	431a      	orrs	r2, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	609a      	str	r2, [r3, #8]
}
 80012ce:	bf00      	nop
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr

080012da <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80012da:	b480      	push	{r7}
 80012dc:	b083      	sub	sp, #12
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr

080012f6 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY, uint32_t SamplingTime)
{
 80012f6:	b480      	push	{r7}
 80012f8:	b085      	sub	sp, #20
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	60f8      	str	r0, [r7, #12]
 80012fe:	60b9      	str	r1, [r7, #8]
 8001300:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	695a      	ldr	r2, [r3, #20]
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	f003 0304 	and.w	r3, r3, #4
 800130c:	2107      	movs	r1, #7
 800130e:	fa01 f303 	lsl.w	r3, r1, r3
 8001312:	43db      	mvns	r3, r3
 8001314:	401a      	ands	r2, r3
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	f003 0304 	and.w	r3, r3, #4
 800131c:	6879      	ldr	r1, [r7, #4]
 800131e:	fa01 f303 	lsl.w	r3, r1, r3
 8001322:	431a      	orrs	r2, r3
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001328:	bf00      	nop
 800132a:	3714      	adds	r7, #20
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001344:	2b00      	cmp	r3, #0
 8001346:	d101      	bne.n	800134c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001348:	2301      	movs	r3, #1
 800134a:	e000      	b.n	800134e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800134c:	2300      	movs	r3, #0
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800134e:	4618      	mov	r0, r3
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr

0800135a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800135a:	b480      	push	{r7}
 800135c:	b085      	sub	sp, #20
 800135e:	af00      	add	r7, sp, #0
 8001360:	60f8      	str	r0, [r7, #12]
 8001362:	60b9      	str	r1, [r7, #8]
 8001364:	607a      	str	r2, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	f003 031f 	and.w	r3, r3, #31
 8001370:	210f      	movs	r1, #15
 8001372:	fa01 f303 	lsl.w	r3, r1, r3
 8001376:	43db      	mvns	r3, r3
 8001378:	401a      	ands	r2, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	0e9b      	lsrs	r3, r3, #26
 800137e:	f003 010f 	and.w	r1, r3, #15
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	f003 031f 	and.w	r3, r3, #31
 8001388:	fa01 f303 	lsl.w	r3, r1, r3
 800138c:	431a      	orrs	r2, r3
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	629a      	str	r2, [r3, #40]	; 0x28

  MODIFY_REG(*preg,
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001392:	bf00      	nop
 8001394:	3714      	adds	r7, #20
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr

0800139e <LL_ADC_REG_SetSequencerChAdd>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800139e:	b480      	push	{r7}
 80013a0:	b083      	sub	sp, #12
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
 80013a6:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013b2:	431a      	orrs	r2, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013b8:	bf00      	nop
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr

080013c4 <LL_ADC_REG_SetSequencerChRem>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013d8:	43db      	mvns	r3, r3
 80013da:	401a      	ands	r2, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013e0:	bf00      	nop
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	60f8      	str	r0, [r7, #12]
 80013f4:	60b9      	str	r1, [r7, #8]
 80013f6:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	695a      	ldr	r2, [r3, #20]
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	021b      	lsls	r3, r3, #8
 8001400:	43db      	mvns	r3, r3
 8001402:	401a      	ands	r2, r3
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	0219      	lsls	r1, r3, #8
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	400b      	ands	r3, r1
 800140c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8001410:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001414:	431a      	orrs	r2, r3
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800141a:	bf00      	nop
 800141c:	3714      	adds	r7, #20
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr

08001426 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001426:	b480      	push	{r7}
 8001428:	b083      	sub	sp, #12
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001436:	f023 0317 	bic.w	r3, r3, #23
 800143a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001442:	bf00      	nop
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr

0800144e <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800144e:	b480      	push	{r7}
 8001450:	b083      	sub	sp, #12
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800145e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001462:	d101      	bne.n	8001468 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001464:	2301      	movs	r3, #1
 8001466:	e000      	b.n	800146a <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001468:	2300      	movs	r3, #0
}
 800146a:	4618      	mov	r0, r3
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr

08001476 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001476:	b480      	push	{r7}
 8001478:	b083      	sub	sp, #12
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001486:	f023 0317 	bic.w	r3, r3, #23
 800148a:	f043 0201 	orr.w	r2, r3, #1
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001492:	bf00      	nop
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr

0800149e <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800149e:	b480      	push	{r7}
 80014a0:	b083      	sub	sp, #12
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80014ae:	f023 0317 	bic.w	r3, r3, #23
 80014b2:	f043 0202 	orr.w	r2, r3, #2
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80014ba:	bf00      	nop
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr

080014c6 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80014c6:	b480      	push	{r7}
 80014c8:	b083      	sub	sp, #12
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d101      	bne.n	80014de <LL_ADC_IsEnabled+0x18>
 80014da:	2301      	movs	r3, #1
 80014dc:	e000      	b.n	80014e0 <LL_ADC_IsEnabled+0x1a>
 80014de:	2300      	movs	r3, #0
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	f003 0302 	and.w	r3, r3, #2
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d101      	bne.n	8001504 <LL_ADC_IsDisableOngoing+0x18>
 8001500:	2301      	movs	r3, #1
 8001502:	e000      	b.n	8001506 <LL_ADC_IsDisableOngoing+0x1a>
 8001504:	2300      	movs	r3, #0
}
 8001506:	4618      	mov	r0, r3
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr

08001512 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001512:	b480      	push	{r7}
 8001514:	b083      	sub	sp, #12
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001522:	f023 0317 	bic.w	r3, r3, #23
 8001526:	f043 0204 	orr.w	r2, r3, #4
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800152e:	bf00      	nop
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr

0800153a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800153a:	b480      	push	{r7}
 800153c:	b083      	sub	sp, #12
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	f003 0304 	and.w	r3, r3, #4
 800154a:	2b04      	cmp	r3, #4
 800154c:	d101      	bne.n	8001552 <LL_ADC_REG_IsConversionOngoing+0x18>
 800154e:	2301      	movs	r3, #1
 8001550:	e000      	b.n	8001554 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001552:	2300      	movs	r3, #0
}
 8001554:	4618      	mov	r0, r3
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b088      	sub	sp, #32
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001568:	2300      	movs	r3, #0
 800156a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 800156c:	2300      	movs	r3, #0
 800156e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001570:	2300      	movs	r3, #0
 8001572:	60fb      	str	r3, [r7, #12]
#if defined(ADC_SUPPORT_2_5_MSPS)
  uint32_t tmpCFGR2 = 0UL;
 8001574:	2300      	movs	r3, #0
 8001576:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d101      	bne.n	8001582 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e16b      	b.n	800185a <HAL_ADC_Init+0x2fa>
  assert_param(IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon1));
  assert_param(IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon2));
  
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	691b      	ldr	r3, [r3, #16]
 8001586:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800158c:	2b00      	cmp	r3, #0
 800158e:	d109      	bne.n	80015a4 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f7ff fb47 	bl	8000c24 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2200      	movs	r2, #0
 800159a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2200      	movs	r2, #0
 80015a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff ff50 	bl	800144e <LL_ADC_IsInternalRegulatorEnabled>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d115      	bne.n	80015e0 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff ff34 	bl	8001426 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80015be:	4b9c      	ldr	r3, [pc, #624]	; (8001830 <HAL_ADC_Init+0x2d0>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	099b      	lsrs	r3, r3, #6
 80015c4:	4a9b      	ldr	r2, [pc, #620]	; (8001834 <HAL_ADC_Init+0x2d4>)
 80015c6:	fba2 2303 	umull	r2, r3, r2, r3
 80015ca:	099b      	lsrs	r3, r3, #6
 80015cc:	3301      	adds	r3, #1
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80015d2:	e002      	b.n	80015da <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	3b01      	subs	r3, #1
 80015d8:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d1f9      	bne.n	80015d4 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff ff32 	bl	800144e <LL_ADC_IsInternalRegulatorEnabled>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d10d      	bne.n	800160c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015f4:	f043 0210 	orr.w	r2, r3, #16
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	649a      	str	r2, [r3, #72]	; 0x48

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001600:	f043 0201 	orr.w	r2, r3, #1
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	64da      	str	r2, [r3, #76]	; 0x4c

    tmp_hal_status = HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff ff92 	bl	800153a <LL_ADC_REG_IsConversionOngoing>
 8001616:	6138      	str	r0, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800161c:	f003 0310 	and.w	r3, r3, #16
 8001620:	2b00      	cmp	r3, #0
 8001622:	f040 8111 	bne.w	8001848 <HAL_ADC_Init+0x2e8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	2b00      	cmp	r3, #0
 800162a:	f040 810d 	bne.w	8001848 <HAL_ADC_Init+0x2e8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001632:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001636:	f043 0202 	orr.w	r2, r3, #2
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	649a      	str	r2, [r3, #72]	; 0x48
    /*  - Clock configuration                                                 */
    /*  - ADC resolution                                                      */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4618      	mov	r0, r3
 8001644:	f7ff ff3f 	bl	80014c6 <LL_ADC_IsEnabled>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d138      	bne.n	80016c0 <HAL_ADC_Init+0x160>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
      
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	f023 0118 	bic.w	r1, r3, #24
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689a      	ldr	r2, [r3, #8]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	430a      	orrs	r2, r1
 8001662:	60da      	str	r2, [r3, #12]
      /*  - oversampling enable                                               */
      /*  - oversampling ratio                                                */
      /*  - oversampling shift                                                */
      /*  - oversampling discontinuous mode (triggered mode)                  */
      /*  - trigger frequency mode                                            */
      tmpCFGR2 |= ( (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                    hadc->Init.TriggerFrequencyMode
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR2 |= ( (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001670:	4313      	orrs	r3, r2
 8001672:	697a      	ldr	r2, [r7, #20]
 8001674:	4313      	orrs	r3, r2
 8001676:	617b      	str	r3, [r7, #20]
                    );
      
      MODIFY_REG(hadc->Instance->CFGR2,
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	691b      	ldr	r3, [r3, #16]
 800167e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	697a      	ldr	r2, [r7, #20]
 8001688:	430a      	orrs	r2, r1
 800168a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_LFTRIG     ,
                 tmpCFGR2              );
      
      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001694:	d014      	beq.n	80016c0 <HAL_ADC_Init+0x160>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800169a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800169e:	d00f      	beq.n	80016c0 <HAL_ADC_Init+0x160>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80016a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80016a8:	d00a      	beq.n	80016c0 <HAL_ADC_Init+0x160>
      {
        MODIFY_REG(ADC1_COMMON->CCR                         ,
 80016aa:	4b63      	ldr	r3, [pc, #396]	; (8001838 <HAL_ADC_Init+0x2d8>)
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80016ba:	495f      	ldr	r1, [pc, #380]	; (8001838 <HAL_ADC_Init+0x2d8>)
 80016bc:	4313      	orrs	r3, r2
 80016be:	608b      	str	r3, [r1, #8]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	7e1b      	ldrb	r3, [r3, #24]
 80016c4:	039a      	lsls	r2, r3, #14
                ADC_CFGR_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	7e5b      	ldrb	r3, [r3, #25]
 80016ca:	03db      	lsls	r3, r3, #15
    tmpCFGR |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80016cc:	431a      	orrs	r2, r3
                ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	7e9b      	ldrb	r3, [r3, #26]
 80016d2:	035b      	lsls	r3, r3, #13
                ADC_CFGR_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80016d4:	4313      	orrs	r3, r2
                ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80016da:	2a00      	cmp	r2, #0
 80016dc:	d002      	beq.n	80016e4 <HAL_ADC_Init+0x184>
 80016de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016e2:	e000      	b.n	80016e6 <HAL_ADC_Init+0x186>
 80016e4:	2200      	movs	r2, #0
                ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80016e6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                            |
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	68db      	ldr	r3, [r3, #12]
                ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 80016ec:	431a      	orrs	r2, r3
                ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	691b      	ldr	r3, [r3, #16]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	da04      	bge.n	8001700 <HAL_ADC_Init+0x1a0>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	691b      	ldr	r3, [r3, #16]
 80016fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80016fe:	e001      	b.n	8001704 <HAL_ADC_Init+0x1a4>
 8001700:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                hadc->Init.DataAlign                                            |
 8001704:	431a      	orrs	r2, r3
                ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800170c:	005b      	lsls	r3, r3, #1
                ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 800170e:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	4313      	orrs	r3, r2
 8001714:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	f893 3020 	ldrb.w	r3, [r3, #32]
 800171c:	2b01      	cmp	r3, #1
 800171e:	d114      	bne.n	800174a <HAL_ADC_Init+0x1ea>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	7e9b      	ldrb	r3, [r3, #26]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d104      	bne.n	8001732 <HAL_ADC_Init+0x1d2>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR |= ADC_CFGR1_DISCEN;
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800172e:	61bb      	str	r3, [r7, #24]
 8001730:	e00b      	b.n	800174a <HAL_ADC_Init+0x1ea>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001736:	f043 0220 	orr.w	r2, r3, #32
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	649a      	str	r2, [r3, #72]	; 0x48
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001742:	f043 0201 	orr.w	r2, r3, #1
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174e:	2b00      	cmp	r3, #0
 8001750:	d009      	beq.n	8001766 <HAL_ADC_Init+0x206>
    {
      tmpCFGR |= ( (hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001756:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge );
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR |= ( (hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800175e:	4313      	orrs	r3, r2
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	4313      	orrs	r3, r2
 8001764:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	68da      	ldr	r2, [r3, #12]
 800176c:	4b33      	ldr	r3, [pc, #204]	; (800183c <HAL_ADC_Init+0x2dc>)
 800176e:	4013      	ands	r3, r2
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	6812      	ldr	r2, [r2, #0]
 8001774:	69b9      	ldr	r1, [r7, #24]
 8001776:	430b      	orrs	r3, r1
 8001778:	60d3      	str	r3, [r2, #12]
               ADC_CFGR1_SCANDIR   |
               ADC_CFGR1_DMACFG,
               tmpCFGR);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6818      	ldr	r0, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001782:	461a      	mov	r2, r3
 8001784:	2100      	movs	r1, #0
 8001786:	f7ff fdb6 	bl	80012f6 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6818      	ldr	r0, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001792:	461a      	mov	r2, r3
 8001794:	492a      	ldr	r1, [pc, #168]	; (8001840 <HAL_ADC_Init+0x2e0>)
 8001796:	f7ff fdae 	bl	80012f6 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if(hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	691b      	ldr	r3, [r3, #16]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d108      	bne.n	80017b4 <HAL_ADC_Init+0x254>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f062 020f 	orn	r2, r2, #15
 80017b0:	629a      	str	r2, [r3, #40]	; 0x28
 80017b2:	e017      	b.n	80017e4 <HAL_ADC_Init+0x284>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if(hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	691b      	ldr	r3, [r3, #16]
 80017b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80017bc:	d112      	bne.n	80017e4 <HAL_ADC_Init+0x284>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	69db      	ldr	r3, [r3, #28]
 80017c8:	3b01      	subs	r3, #1
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	f003 031c 	and.w	r3, r3, #28
 80017d0:	f06f 020f 	mvn.w	r2, #15
 80017d4:	fa02 f103 	lsl.w	r1, r2, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	430a      	orrs	r2, r1
 80017e2:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR').                                  */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	68da      	ldr	r2, [r3, #12]
 80017ea:	4b16      	ldr	r3, [pc, #88]	; (8001844 <HAL_ADC_Init+0x2e4>)
 80017ec:	4013      	ands	r3, r2
 80017ee:	69ba      	ldr	r2, [r7, #24]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d10b      	bne.n	800180c <HAL_ADC_Init+0x2ac>
         == tmpCFGR)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2200      	movs	r2, #0
 80017f8:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017fe:	f023 0303 	bic.w	r3, r3, #3
 8001802:	f043 0201 	orr.w	r2, r3, #1
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	649a      	str	r2, [r3, #72]	; 0x48
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 800180a:	e025      	b.n	8001858 <HAL_ADC_Init+0x2f8>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001810:	f023 0312 	bic.w	r3, r3, #18
 8001814:	f043 0210 	orr.w	r2, r3, #16
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	649a      	str	r2, [r3, #72]	; 0x48
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001820:	f043 0201 	orr.w	r2, r3, #1
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	64da      	str	r2, [r3, #76]	; 0x4c

      tmp_hal_status = HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	77fb      	strb	r3, [r7, #31]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 800182c:	e014      	b.n	8001858 <HAL_ADC_Init+0x2f8>
 800182e:	bf00      	nop
 8001830:	20000008 	.word	0x20000008
 8001834:	053e2d63 	.word	0x053e2d63
 8001838:	40012700 	.word	0x40012700
 800183c:	ffde0219 	.word	0xffde0219
 8001840:	07ffff04 	.word	0x07ffff04
 8001844:	833fffe7 	.word	0x833fffe7
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800184c:	f043 0210 	orr.w	r2, r3, #16
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	649a      	str	r2, [r3, #72]	; 0x48

    tmp_hal_status = HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001858:	7ffb      	ldrb	r3, [r7, #31]
}
 800185a:	4618      	mov	r0, r3
 800185c:	3720      	adds	r7, #32
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop

08001864 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	60b9      	str	r1, [r7, #8]
 800186e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff fe60 	bl	800153a <LL_ADC_REG_IsConversionOngoing>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d15a      	bne.n	8001936 <HAL_ADC_Start_DMA+0xd2>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001886:	2b01      	cmp	r3, #1
 8001888:	d101      	bne.n	800188e <HAL_ADC_Start_DMA+0x2a>
 800188a:	2302      	movs	r3, #2
 800188c:	e056      	b.n	800193c <HAL_ADC_Start_DMA+0xd8>
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	2201      	movs	r2, #1
 8001892:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001896:	68f8      	ldr	r0, [r7, #12]
 8001898:	f000 f9b6 	bl	8001c08 <ADC_Enable>
 800189c:	4603      	mov	r3, r0
 800189e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80018a0:	7dfb      	ldrb	r3, [r7, #23]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d142      	bne.n	800192c <HAL_ADC_Start_DMA+0xc8>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018aa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80018ae:	f023 0301 	bic.w	r3, r3, #1
 80018b2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	649a      	str	r2, [r3, #72]	; 0x48
                          HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                          HAL_ADC_STATE_REG_BUSY);

#if defined(ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	2200      	movs	r2, #0
 80018be:	64da      	str	r2, [r3, #76]	; 0x4c
          ADC_CLEAR_ERRORCODE(hadc);
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c4:	4a1f      	ldr	r2, [pc, #124]	; (8001944 <HAL_ADC_Start_DMA+0xe0>)
 80018c6:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018cc:	4a1e      	ldr	r2, [pc, #120]	; (8001948 <HAL_ADC_Start_DMA+0xe4>)
 80018ce:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d4:	4a1d      	ldr	r2, [pc, #116]	; (800194c <HAL_ADC_Start_DMA+0xe8>)
 80018d6:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	221c      	movs	r2, #28
 80018de:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2200      	movs	r2, #0
 80018e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	685a      	ldr	r2, [r3, #4]
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f042 0210 	orr.w	r2, r2, #16
 80018f6:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if  defined(ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	68da      	ldr	r2, [r3, #12]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f042 0201 	orr.w	r2, r2, #1
 8001906:	60da      	str	r2, [r3, #12]
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	3340      	adds	r3, #64	; 0x40
 8001912:	4619      	mov	r1, r3
 8001914:	68ba      	ldr	r2, [r7, #8]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f000 fe0c 	bl	8002534 <HAL_DMA_Start_IT>
 800191c:	4603      	mov	r3, r0
 800191e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff fdf4 	bl	8001512 <LL_ADC_REG_StartConversion>
 800192a:	e006      	b.n	800193a <HAL_ADC_Start_DMA+0xd6>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2200      	movs	r2, #0
 8001930:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001934:	e001      	b.n	800193a <HAL_ADC_Start_DMA+0xd6>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001936:	2302      	movs	r3, #2
 8001938:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800193a:	7dfb      	ldrb	r3, [r7, #23]
}
 800193c:	4618      	mov	r0, r3
 800193e:	3718      	adds	r7, #24
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	08001dc3 	.word	0x08001dc3
 8001948:	08001e8b 	.word	0x08001e8b
 800194c:	08001ea7 	.word	0x08001ea7

08001950 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001958:	bf00      	nop
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001980:	bf00      	nop
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b088      	sub	sp, #32
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	6039      	str	r1, [r7, #0]
#if  defined(ADC_SUPPORT_2_5_MSPS)
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001996:	2300      	movs	r3, #0
 8001998:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800199a:	2300      	movs	r3, #0
 800199c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(hadc, sConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(sConfig->SamplingTime));
  
  if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)          ||
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	691b      	ldr	r3, [r3, #16]
 80019a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    
    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d101      	bne.n	80019b4 <HAL_ADC_ConfigChannel+0x28>
 80019b0:	2302      	movs	r3, #2
 80019b2:	e114      	b.n	8001bde <HAL_ADC_ConfigChannel+0x252>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2201      	movs	r2, #1
 80019b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff fdba 	bl	800153a <LL_ADC_REG_IsConversionOngoing>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	f040 80fb 	bne.w	8001bc4 <HAL_ADC_ConfigChannel+0x238>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if(sConfig->Rank != ADC_RANK_NONE)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	f000 80b3 	beq.w	8001b3e <HAL_ADC_ConfigChannel+0x1b2>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	691b      	ldr	r3, [r3, #16]
 80019dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80019e0:	d004      	beq.n	80019ec <HAL_ADC_ConfigChannel+0x60>
         (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD)  )
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	691b      	ldr	r3, [r3, #16]
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80019e6:	4a80      	ldr	r2, [pc, #512]	; (8001be8 <HAL_ADC_ConfigChannel+0x25c>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d108      	bne.n	80019fe <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4619      	mov	r1, r3
 80019f6:	4610      	mov	r0, r2
 80019f8:	f7ff fcd1 	bl	800139e <LL_ADC_REG_SetSequencerChAdd>
 80019fc:	e041      	b.n	8001a82 <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */
        
        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f003 031f 	and.w	r3, r3, #31
 8001a0a:	210f      	movs	r1, #15
 8001a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a10:	43db      	mvns	r3, r3
 8001a12:	401a      	ands	r2, r3
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d105      	bne.n	8001a2c <HAL_ADC_ConfigChannel+0xa0>
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	0e9b      	lsrs	r3, r3, #26
 8001a26:	f003 031f 	and.w	r3, r3, #31
 8001a2a:	e011      	b.n	8001a50 <HAL_ADC_ConfigChannel+0xc4>
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	fa93 f3a3 	rbit	r3, r3
 8001a38:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d101      	bne.n	8001a48 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 8001a44:	2320      	movs	r3, #32
 8001a46:	e003      	b.n	8001a50 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	fab3 f383 	clz	r3, r3
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	6839      	ldr	r1, [r7, #0]
 8001a52:	6849      	ldr	r1, [r1, #4]
 8001a54:	f001 011f 	and.w	r1, r1, #31
 8001a58:	408b      	lsls	r3, r1
 8001a5a:	431a      	orrs	r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	651a      	str	r2, [r3, #80]	; 0x50
        
        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */        
        if(((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	089b      	lsrs	r3, r3, #2
 8001a66:	1c5a      	adds	r2, r3, #1
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	69db      	ldr	r3, [r3, #28]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d808      	bhi.n	8001a82 <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6818      	ldr	r0, [r3, #0]
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	6859      	ldr	r1, [r3, #4]
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	f7ff fc6c 	bl	800135a <LL_ADC_REG_SetSequencerRanks>
        }
      }
      
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6818      	ldr	r0, [r3, #0]
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	6819      	ldr	r1, [r3, #0]
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	461a      	mov	r2, r3
 8001a90:	f7ff fcac 	bl	80013ec <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	4b54      	ldr	r3, [pc, #336]	; (8001bec <HAL_ADC_ConfigChannel+0x260>)
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	f000 8099 	beq.w	8001bd4 <HAL_ADC_ConfigChannel+0x248>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001aa2:	4853      	ldr	r0, [pc, #332]	; (8001bf0 <HAL_ADC_ConfigChannel+0x264>)
 8001aa4:	f7ff fc19 	bl	80012da <LL_ADC_GetCommonPathInternalCh>
 8001aa8:	61b8      	str	r0, [r7, #24]
        
        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a51      	ldr	r2, [pc, #324]	; (8001bf4 <HAL_ADC_ConfigChannel+0x268>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d120      	bne.n	8001af6 <HAL_ADC_ConfigChannel+0x16a>
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d11b      	bne.n	8001af6 <HAL_ADC_ConfigChannel+0x16a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	484a      	ldr	r0, [pc, #296]	; (8001bf0 <HAL_ADC_ConfigChannel+0x264>)
 8001ac8:	f7ff fbf4 	bl	80012b4 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001acc:	4b4a      	ldr	r3, [pc, #296]	; (8001bf8 <HAL_ADC_ConfigChannel+0x26c>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	099b      	lsrs	r3, r3, #6
 8001ad2:	4a4a      	ldr	r2, [pc, #296]	; (8001bfc <HAL_ADC_ConfigChannel+0x270>)
 8001ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ad8:	099b      	lsrs	r3, r3, #6
 8001ada:	1c5a      	adds	r2, r3, #1
 8001adc:	4613      	mov	r3, r2
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	4413      	add	r3, r2
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0UL)
 8001ae6:	e002      	b.n	8001aee <HAL_ADC_ConfigChannel+0x162>
          {
            wait_loop_index--;
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	3b01      	subs	r3, #1
 8001aec:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0UL)
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d1f9      	bne.n	8001ae8 <HAL_ADC_ConfigChannel+0x15c>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001af4:	e06e      	b.n	8001bd4 <HAL_ADC_ConfigChannel+0x248>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a41      	ldr	r2, [pc, #260]	; (8001c00 <HAL_ADC_ConfigChannel+0x274>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d10c      	bne.n	8001b1a <HAL_ADC_ConfigChannel+0x18e>
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d107      	bne.n	8001b1a <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b10:	4619      	mov	r1, r3
 8001b12:	4837      	ldr	r0, [pc, #220]	; (8001bf0 <HAL_ADC_ConfigChannel+0x264>)
 8001b14:	f7ff fbce 	bl	80012b4 <LL_ADC_SetCommonPathInternalCh>
 8001b18:	e05c      	b.n	8001bd4 <HAL_ADC_ConfigChannel+0x248>
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a39      	ldr	r2, [pc, #228]	; (8001c04 <HAL_ADC_ConfigChannel+0x278>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d157      	bne.n	8001bd4 <HAL_ADC_ConfigChannel+0x248>
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d152      	bne.n	8001bd4 <HAL_ADC_ConfigChannel+0x248>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b34:	4619      	mov	r1, r3
 8001b36:	482e      	ldr	r0, [pc, #184]	; (8001bf0 <HAL_ADC_ConfigChannel+0x264>)
 8001b38:	f7ff fbbc 	bl	80012b4 <LL_ADC_SetCommonPathInternalCh>
 8001b3c:	e04a      	b.n	8001bd4 <HAL_ADC_ConfigChannel+0x248>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	691b      	ldr	r3, [r3, #16]
 8001b42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001b46:	d004      	beq.n	8001b52 <HAL_ADC_ConfigChannel+0x1c6>
         (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD)  )
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	691b      	ldr	r3, [r3, #16]
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8001b4c:	4a26      	ldr	r2, [pc, #152]	; (8001be8 <HAL_ADC_ConfigChannel+0x25c>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d107      	bne.n	8001b62 <HAL_ADC_ConfigChannel+0x1d6>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4610      	mov	r0, r2
 8001b5e:	f7ff fc31 	bl	80013c4 <LL_ADC_REG_SetSequencerChRem>
      }
      
      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	4b21      	ldr	r3, [pc, #132]	; (8001bec <HAL_ADC_ConfigChannel+0x260>)
 8001b68:	4013      	ands	r3, r2
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d032      	beq.n	8001bd4 <HAL_ADC_ConfigChannel+0x248>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b6e:	4820      	ldr	r0, [pc, #128]	; (8001bf0 <HAL_ADC_ConfigChannel+0x264>)
 8001b70:	f7ff fbb3 	bl	80012da <LL_ADC_GetCommonPathInternalCh>
 8001b74:	61b8      	str	r0, [r7, #24]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a1e      	ldr	r2, [pc, #120]	; (8001bf4 <HAL_ADC_ConfigChannel+0x268>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d107      	bne.n	8001b90 <HAL_ADC_ConfigChannel+0x204>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001b86:	4619      	mov	r1, r3
 8001b88:	4819      	ldr	r0, [pc, #100]	; (8001bf0 <HAL_ADC_ConfigChannel+0x264>)
 8001b8a:	f7ff fb93 	bl	80012b4 <LL_ADC_SetCommonPathInternalCh>
 8001b8e:	e021      	b.n	8001bd4 <HAL_ADC_ConfigChannel+0x248>
        }
        else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a1a      	ldr	r2, [pc, #104]	; (8001c00 <HAL_ADC_ConfigChannel+0x274>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d107      	bne.n	8001baa <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4813      	ldr	r0, [pc, #76]	; (8001bf0 <HAL_ADC_ConfigChannel+0x264>)
 8001ba4:	f7ff fb86 	bl	80012b4 <LL_ADC_SetCommonPathInternalCh>
 8001ba8:	e014      	b.n	8001bd4 <HAL_ADC_ConfigChannel+0x248>
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a15      	ldr	r2, [pc, #84]	; (8001c04 <HAL_ADC_ConfigChannel+0x278>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d10f      	bne.n	8001bd4 <HAL_ADC_ConfigChannel+0x248>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001bba:	4619      	mov	r1, r3
 8001bbc:	480c      	ldr	r0, [pc, #48]	; (8001bf0 <HAL_ADC_ConfigChannel+0x264>)
 8001bbe:	f7ff fb79 	bl	80012b4 <LL_ADC_SetCommonPathInternalCh>
 8001bc2:	e007      	b.n	8001bd4 <HAL_ADC_ConfigChannel+0x248>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bc8:	f043 0220 	orr.w	r2, r3, #32
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	649a      	str	r2, [r3, #72]	; 0x48
    
    tmp_hal_status = HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	77fb      	strb	r3, [r7, #31]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 8001bdc:	7ffb      	ldrb	r3, [r7, #31]
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3720      	adds	r7, #32
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	80000004 	.word	0x80000004
 8001bec:	80080000 	.word	0x80080000
 8001bf0:	40012700 	.word	0x40012700
 8001bf4:	b0001000 	.word	0xb0001000
 8001bf8:	20000008 	.word	0x20000008
 8001bfc:	053e2d63 	.word	0x053e2d63
 8001c00:	b8004000 	.word	0xb8004000
 8001c04:	b4002000 	.word	0xb4002000

08001c08 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001c10:	2300      	movs	r3, #0
 8001c12:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7ff fc54 	bl	80014c6 <LL_ADC_IsEnabled>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d162      	bne.n	8001cea <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	689a      	ldr	r2, [r3, #8]
 8001c2a:	4b32      	ldr	r3, [pc, #200]	; (8001cf4 <ADC_Enable+0xec>)
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d00d      	beq.n	8001c4e <ADC_Enable+0x46>
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c36:	f043 0210 	orr.w	r2, r3, #16
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	649a      	str	r2, [r3, #72]	; 0x48

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c42:	f043 0201 	orr.w	r2, r3, #1
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	64da      	str	r2, [r3, #76]	; 0x4c

      return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e04e      	b.n	8001cec <ADC_Enable+0xe4>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff fc0f 	bl	8001476 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001c58:	4827      	ldr	r0, [pc, #156]	; (8001cf8 <ADC_Enable+0xf0>)
 8001c5a:	f7ff fb3e 	bl	80012da <LL_ADC_GetCommonPathInternalCh>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d00f      	beq.n	8001c88 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c68:	4b24      	ldr	r3, [pc, #144]	; (8001cfc <ADC_Enable+0xf4>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	099b      	lsrs	r3, r3, #6
 8001c6e:	4a24      	ldr	r2, [pc, #144]	; (8001d00 <ADC_Enable+0xf8>)
 8001c70:	fba2 2303 	umull	r2, r3, r2, r3
 8001c74:	099b      	lsrs	r3, r3, #6
 8001c76:	3301      	adds	r3, #1
 8001c78:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8001c7a:	e002      	b.n	8001c82 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d1f9      	bne.n	8001c7c <ADC_Enable+0x74>
    }

#if defined(ADC_SUPPORT_2_5_MSPS)
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	7e5b      	ldrb	r3, [r3, #25]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d02c      	beq.n	8001cea <ADC_Enable+0xe2>
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001c90:	f7ff faf8 	bl	8001284 <HAL_GetTick>
 8001c94:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001c96:	e021      	b.n	8001cdc <ADC_Enable+0xd4>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7ff fc12 	bl	80014c6 <LL_ADC_IsEnabled>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d104      	bne.n	8001cb2 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff fbe2 	bl	8001476 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001cb2:	f7ff fae7 	bl	8001284 <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d90d      	bls.n	8001cdc <ADC_Enable+0xd4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cc4:	f043 0210 	orr.w	r2, r3, #16
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	649a      	str	r2, [r3, #72]	; 0x48
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cd0:	f043 0201 	orr.w	r2, r3, #1
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	64da      	str	r2, [r3, #76]	; 0x4c
          
          return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e007      	b.n	8001cec <ADC_Enable+0xe4>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0301 	and.w	r3, r3, #1
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d1d6      	bne.n	8001c98 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001cea:	2300      	movs	r3, #0
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3710      	adds	r7, #16
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	80000017 	.word	0x80000017
 8001cf8:	40012700 	.word	0x40012700
 8001cfc:	20000008 	.word	0x20000008
 8001d00:	053e2d63 	.word	0x053e2d63

08001d04 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7ff fbeb 	bl	80014ec <LL_ADC_IsDisableOngoing>
 8001d16:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff fbd2 	bl	80014c6 <LL_ADC_IsEnabled>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d047      	beq.n	8001db8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d144      	bne.n	8001db8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f003 0305 	and.w	r3, r3, #5
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d10c      	bne.n	8001d56 <ADC_Disable+0x52>
#else
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7ff fbac 	bl	800149e <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2203      	movs	r2, #3
 8001d4c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001d4e:	f7ff fa99 	bl	8001284 <HAL_GetTick>
 8001d52:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001d54:	e029      	b.n	8001daa <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d5a:	f043 0210 	orr.w	r2, r3, #16
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	649a      	str	r2, [r3, #72]	; 0x48
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d66:	f043 0201 	orr.w	r2, r3, #1
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	64da      	str	r2, [r3, #76]	; 0x4c
      return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e023      	b.n	8001dba <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001d72:	f7ff fa87 	bl	8001284 <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d914      	bls.n	8001daa <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d00d      	beq.n	8001daa <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d92:	f043 0210 	orr.w	r2, r3, #16
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	649a      	str	r2, [r3, #72]	; 0x48

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d9e:	f043 0201 	orr.w	r2, r3, #1
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	64da      	str	r2, [r3, #76]	; 0x4c

          return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e007      	b.n	8001dba <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f003 0301 	and.w	r3, r3, #1
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d1dc      	bne.n	8001d72 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3710      	adds	r7, #16
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b084      	sub	sp, #16
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dce:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dd4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d143      	bne.n	8001e64 <ADC_DMAConvCplt+0xa2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001de0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	649a      	str	r2, [r3, #72]	; 0x48
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if(   (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff faa1 	bl	8001334 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d031      	beq.n	8001e5c <ADC_DMAConvCplt+0x9a>
       && (hadc->Init.ContinuousConvMode == DISABLE)
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	7e9b      	ldrb	r3, [r3, #26]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d12d      	bne.n	8001e5c <ADC_DMAConvCplt+0x9a>
      )
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0308 	and.w	r3, r3, #8
 8001e0a:	2b08      	cmp	r3, #8
 8001e0c:	d126      	bne.n	8001e5c <ADC_DMAConvCplt+0x9a>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7ff fb91 	bl	800153a <LL_ADC_REG_IsConversionOngoing>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d112      	bne.n	8001e44 <ADC_DMAConvCplt+0x82>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	685a      	ldr	r2, [r3, #4]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f022 020c 	bic.w	r2, r2, #12
 8001e2c:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e32:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e36:	f023 0301 	bic.w	r3, r3, #1
 8001e3a:	f043 0201 	orr.w	r2, r3, #1
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	649a      	str	r2, [r3, #72]	; 0x48
 8001e42:	e00b      	b.n	8001e5c <ADC_DMAConvCplt+0x9a>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e48:	f043 0220 	orr.w	r2, r3, #32
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	649a      	str	r2, [r3, #72]	; 0x48
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e54:	f043 0201 	orr.w	r2, r3, #1
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001e5c:	68f8      	ldr	r0, [r7, #12]
 8001e5e:	f7ff fd77 	bl	8001950 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001e62:	e00e      	b.n	8001e82 <ADC_DMAConvCplt+0xc0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e68:	f003 0310 	and.w	r3, r3, #16
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d003      	beq.n	8001e78 <ADC_DMAConvCplt+0xb6>
      HAL_ADC_ErrorCallback(hadc);
 8001e70:	68f8      	ldr	r0, [r7, #12]
 8001e72:	f7ff fd81 	bl	8001978 <HAL_ADC_ErrorCallback>
}
 8001e76:	e004      	b.n	8001e82 <ADC_DMAConvCplt+0xc0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	4798      	blx	r3
}
 8001e82:	bf00      	nop
 8001e84:	3710      	adds	r7, #16
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b084      	sub	sp, #16
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e96:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001e98:	68f8      	ldr	r0, [r7, #12]
 8001e9a:	f7ff fd63 	bl	8001964 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e9e:	bf00      	nop
 8001ea0:	3710      	adds	r7, #16
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b084      	sub	sp, #16
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eb8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ec4:	f043 0204 	orr.w	r2, r3, #4
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001ecc:	68f8      	ldr	r0, [r7, #12]
 8001ece:	f7ff fd53 	bl	8001978 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ed2:	bf00      	nop
 8001ed4:	3710      	adds	r7, #16
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <LL_ADC_GetCommonClock>:
{
 8001eda:	b480      	push	{r7}
 8001edc:	b083      	sub	sp, #12
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr

08001ef6 <LL_ADC_GetClock>:
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	b083      	sub	sp, #12
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr

08001f12 <LL_ADC_SetCalibrationFactor>:
{
 8001f12:	b480      	push	{r7}
 8001f14:	b083      	sub	sp, #12
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
 8001f1a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001f22:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	431a      	orrs	r2, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <LL_ADC_GetCalibrationFactor>:
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001f4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr

08001f5a <LL_ADC_Enable>:
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	b083      	sub	sp, #12
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f6a:	f023 0317 	bic.w	r3, r3, #23
 8001f6e:	f043 0201 	orr.w	r2, r3, #1
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	609a      	str	r2, [r3, #8]
}
 8001f76:	bf00      	nop
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr

08001f82 <LL_ADC_Disable>:
{
 8001f82:	b480      	push	{r7}
 8001f84:	b083      	sub	sp, #12
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f92:	f023 0317 	bic.w	r3, r3, #23
 8001f96:	f043 0202 	orr.w	r2, r3, #2
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	609a      	str	r2, [r3, #8]
}
 8001f9e:	bf00      	nop
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr

08001faa <LL_ADC_IsEnabled>:
{
 8001faa:	b480      	push	{r7}
 8001fac:	b083      	sub	sp, #12
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d101      	bne.n	8001fc2 <LL_ADC_IsEnabled+0x18>
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e000      	b.n	8001fc4 <LL_ADC_IsEnabled+0x1a>
 8001fc2:	2300      	movs	r3, #0
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <LL_ADC_StartCalibration>:
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001fe0:	f023 0317 	bic.w	r3, r3, #23
 8001fe4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	609a      	str	r2, [r3, #8]
}
 8001fec:	bf00      	nop
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <LL_ADC_IsCalibrationOnGoing>:
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002008:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800200c:	d101      	bne.n	8002012 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800200e:	2301      	movs	r3, #1
 8002010:	e000      	b.n	8002014 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002012:	2300      	movs	r3, #0
}
 8002014:	4618      	mov	r0, r3
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <HAL_ADCEx_Calibration_Start>:
  *
  *         (1) On STM32WB series, parameter not available on devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b08a      	sub	sp, #40	; 0x28
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  UNUSED(SingleDiff);

  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 800202a:	2300      	movs	r3, #0
 800202c:	623b      	str	r3, [r7, #32]
  uint32_t adc_clk_async_presc;
  __IO uint32_t delay_cpu_cycles;
#endif /* ADC_SUPPORT_2_5_MSPS */

  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800202e:	2300      	movs	r3, #0
 8002030:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002038:	2b01      	cmp	r3, #1
 800203a:	d101      	bne.n	8002040 <HAL_ADCEx_Calibration_Start+0x20>
 800203c:	2302      	movs	r3, #2
 800203e:	e0d5      	b.n	80021ec <HAL_ADCEx_Calibration_Start+0x1cc>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f7ff fe5b 	bl	8001d04 <ADC_Disable>
 800204e:	4603      	mov	r3, r0
 8002050:	77fb      	strb	r3, [r7, #31]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002052:	7ffb      	ldrb	r3, [r7, #31]
 8002054:	2b00      	cmp	r3, #0
 8002056:	f040 80be 	bne.w	80021d6 <HAL_ADCEx_Calibration_Start+0x1b6>
  {
    /* Set ADC state */
#if defined(ADC_SUPPORT_2_5_MSPS)
    ADC_STATE_CLR_SET(hadc->State,
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800205e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002062:	f043 0202 	orr.w	r2, r3, #2
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	649a      	str	r2, [r3, #72]	; 0x48
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	68da      	ldr	r2, [r3, #12]
 8002070:	f248 0303 	movw	r3, #32771	; 0x8003
 8002074:	4013      	ands	r3, r2
 8002076:	61bb      	str	r3, [r7, #24]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	6812      	ldr	r2, [r2, #0]
 8002082:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002086:	f023 0303 	bic.w	r3, r3, #3
 800208a:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800208c:	2300      	movs	r3, #0
 800208e:	627b      	str	r3, [r7, #36]	; 0x24
 8002090:	e02e      	b.n	80020f0 <HAL_ADCEx_Calibration_Start+0xd0>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4618      	mov	r0, r3
 8002098:	f7ff ff9a 	bl	8001fd0 <LL_ADC_StartCalibration>
#else
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
#endif /* ADC_SUPPORT_2_5_MSPS */

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800209c:	e014      	b.n	80020c8 <HAL_ADCEx_Calibration_Start+0xa8>
    {
      wait_loop_index++;
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	3301      	adds	r3, #1
 80020a2:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	4a53      	ldr	r2, [pc, #332]	; (80021f4 <HAL_ADCEx_Calibration_Start+0x1d4>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d90d      	bls.n	80020c8 <HAL_ADCEx_Calibration_Start+0xa8>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020b0:	f023 0312 	bic.w	r3, r3, #18
 80020b4:	f043 0210 	orr.w	r2, r3, #16
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	649a      	str	r2, [r3, #72]	; 0x48
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e091      	b.n	80021ec <HAL_ADCEx_Calibration_Start+0x1cc>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff ff93 	bl	8001ff8 <LL_ADC_IsCalibrationOnGoing>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d1e2      	bne.n	800209e <HAL_ADCEx_Calibration_Start+0x7e>
      }
    }
#if defined(ADC_SUPPORT_2_5_MSPS)
      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff ff2d 	bl	8001f3c <LL_ADC_GetCalibrationFactor>
 80020e2:	4602      	mov	r2, r0
 80020e4:	6a3b      	ldr	r3, [r7, #32]
 80020e6:	4413      	add	r3, r2
 80020e8:	623b      	str	r3, [r7, #32]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80020ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ec:	3301      	adds	r3, #1
 80020ee:	627b      	str	r3, [r7, #36]	; 0x24
 80020f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f2:	2b07      	cmp	r3, #7
 80020f4:	d9cd      	bls.n	8002092 <HAL_ADCEx_Calibration_Start+0x72>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 80020f6:	6a3a      	ldr	r2, [r7, #32]
 80020f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80020fe:	623b      	str	r3, [r7, #32]
    /* Apply calibration factor (requires ADC enable and disable process) */
    LL_ADC_Enable(hadc->Instance);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff ff28 	bl	8001f5a <LL_ADC_Enable>

    /* Case of ADC clocked at low frequency: Delay required between ADC enable and disable actions */
    if(LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4618      	mov	r0, r3
 8002110:	f7ff fef1 	bl	8001ef6 <LL_ADC_GetClock>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d118      	bne.n	800214c <HAL_ADCEx_Calibration_Start+0x12c>
    {
      adc_clk_async_presc = LL_ADC_GetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800211a:	4837      	ldr	r0, [pc, #220]	; (80021f8 <HAL_ADCEx_Calibration_Start+0x1d8>)
 800211c:	f7ff fedd 	bl	8001eda <LL_ADC_GetCommonClock>
 8002120:	6178      	str	r0, [r7, #20]

      if(adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002128:	d310      	bcc.n	800214c <HAL_ADCEx_Calibration_Start+0x12c>
      {
        /* Delay loop initialization and execution */
        /* Delay depends on ADC clock prescaler: Compute ADC clock asynchronous prescaler to decimal format */
        delay_cpu_cycles = (1U << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3U));
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	0c9b      	lsrs	r3, r3, #18
 800212e:	3b03      	subs	r3, #3
 8002130:	2201      	movs	r2, #1
 8002132:	fa02 f303 	lsl.w	r3, r2, r3
 8002136:	60fb      	str	r3, [r7, #12]
        /* Divide variable by 2 to compensate partially CPU processing cycles */
        delay_cpu_cycles >>= 1U;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	085b      	lsrs	r3, r3, #1
 800213c:	60fb      	str	r3, [r7, #12]

        while(delay_cpu_cycles != 0)
 800213e:	e002      	b.n	8002146 <HAL_ADCEx_Calibration_Start+0x126>
        {
          delay_cpu_cycles--;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	3b01      	subs	r3, #1
 8002144:	60fb      	str	r3, [r7, #12]
        while(delay_cpu_cycles != 0)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d1f9      	bne.n	8002140 <HAL_ADCEx_Calibration_Start+0x120>
        }
      }
    }

    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	6a39      	ldr	r1, [r7, #32]
 8002152:	4618      	mov	r0, r3
 8002154:	f7ff fedd 	bl	8001f12 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4618      	mov	r0, r3
 800215e:	f7ff ff10 	bl	8001f82 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002162:	f7ff f88f 	bl	8001284 <HAL_GetTick>
 8002166:	6138      	str	r0, [r7, #16]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002168:	e01c      	b.n	80021a4 <HAL_ADCEx_Calibration_Start+0x184>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800216a:	f7ff f88b 	bl	8001284 <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	2b02      	cmp	r3, #2
 8002176:	d915      	bls.n	80021a4 <HAL_ADCEx_Calibration_Start+0x184>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff ff14 	bl	8001faa <LL_ADC_IsEnabled>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d00d      	beq.n	80021a4 <HAL_ADCEx_Calibration_Start+0x184>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800218c:	f043 0210 	orr.w	r2, r3, #16
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	649a      	str	r2, [r3, #72]	; 0x48

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002198:	f043 0201 	orr.w	r2, r3, #1
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	64da      	str	r2, [r3, #76]	; 0x4c

          return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e023      	b.n	80021ec <HAL_ADCEx_Calibration_Start+0x1cc>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7ff fefe 	bl	8001faa <LL_ADC_IsEnabled>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d1da      	bne.n	800216a <HAL_ADCEx_Calibration_Start+0x14a>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	68d9      	ldr	r1, [r3, #12]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	430a      	orrs	r2, r1
 80021c2:	60da      	str	r2, [r3, #12]
#endif /* ADC_SUPPORT_2_5_MSPS */

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021c8:	f023 0303 	bic.w	r3, r3, #3
 80021cc:	f043 0201 	orr.w	r2, r3, #1
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	649a      	str	r2, [r3, #72]	; 0x48
 80021d4:	e005      	b.n	80021e2 <HAL_ADCEx_Calibration_Start+0x1c2>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021da:	f043 0210 	orr.w	r2, r3, #16
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	649a      	str	r2, [r3, #72]	; 0x48
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return tmp_hal_status;
 80021ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3728      	adds	r7, #40	; 0x28
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	00026aaa 	.word	0x00026aaa
 80021f8:	40012700 	.word	0x40012700

080021fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f003 0307 	and.w	r3, r3, #7
 800220a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800220c:	4b0c      	ldr	r3, [pc, #48]	; (8002240 <__NVIC_SetPriorityGrouping+0x44>)
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002212:	68ba      	ldr	r2, [r7, #8]
 8002214:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002218:	4013      	ands	r3, r2
 800221a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002224:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002228:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800222c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800222e:	4a04      	ldr	r2, [pc, #16]	; (8002240 <__NVIC_SetPriorityGrouping+0x44>)
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	60d3      	str	r3, [r2, #12]
}
 8002234:	bf00      	nop
 8002236:	3714      	adds	r7, #20
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr
 8002240:	e000ed00 	.word	0xe000ed00

08002244 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002248:	4b04      	ldr	r3, [pc, #16]	; (800225c <__NVIC_GetPriorityGrouping+0x18>)
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	0a1b      	lsrs	r3, r3, #8
 800224e:	f003 0307 	and.w	r3, r3, #7
}
 8002252:	4618      	mov	r0, r3
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr
 800225c:	e000ed00 	.word	0xe000ed00

08002260 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	4603      	mov	r3, r0
 8002268:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800226a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800226e:	2b00      	cmp	r3, #0
 8002270:	db0b      	blt.n	800228a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002272:	79fb      	ldrb	r3, [r7, #7]
 8002274:	f003 021f 	and.w	r2, r3, #31
 8002278:	4907      	ldr	r1, [pc, #28]	; (8002298 <__NVIC_EnableIRQ+0x38>)
 800227a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227e:	095b      	lsrs	r3, r3, #5
 8002280:	2001      	movs	r0, #1
 8002282:	fa00 f202 	lsl.w	r2, r0, r2
 8002286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800228a:	bf00      	nop
 800228c:	370c      	adds	r7, #12
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	e000e100 	.word	0xe000e100

0800229c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	4603      	mov	r3, r0
 80022a4:	6039      	str	r1, [r7, #0]
 80022a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	db0a      	blt.n	80022c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	b2da      	uxtb	r2, r3
 80022b4:	490c      	ldr	r1, [pc, #48]	; (80022e8 <__NVIC_SetPriority+0x4c>)
 80022b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ba:	0112      	lsls	r2, r2, #4
 80022bc:	b2d2      	uxtb	r2, r2
 80022be:	440b      	add	r3, r1
 80022c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022c4:	e00a      	b.n	80022dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	b2da      	uxtb	r2, r3
 80022ca:	4908      	ldr	r1, [pc, #32]	; (80022ec <__NVIC_SetPriority+0x50>)
 80022cc:	79fb      	ldrb	r3, [r7, #7]
 80022ce:	f003 030f 	and.w	r3, r3, #15
 80022d2:	3b04      	subs	r3, #4
 80022d4:	0112      	lsls	r2, r2, #4
 80022d6:	b2d2      	uxtb	r2, r2
 80022d8:	440b      	add	r3, r1
 80022da:	761a      	strb	r2, [r3, #24]
}
 80022dc:	bf00      	nop
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr
 80022e8:	e000e100 	.word	0xe000e100
 80022ec:	e000ed00 	.word	0xe000ed00

080022f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b089      	sub	sp, #36	; 0x24
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f003 0307 	and.w	r3, r3, #7
 8002302:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	f1c3 0307 	rsb	r3, r3, #7
 800230a:	2b04      	cmp	r3, #4
 800230c:	bf28      	it	cs
 800230e:	2304      	movcs	r3, #4
 8002310:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	3304      	adds	r3, #4
 8002316:	2b06      	cmp	r3, #6
 8002318:	d902      	bls.n	8002320 <NVIC_EncodePriority+0x30>
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	3b03      	subs	r3, #3
 800231e:	e000      	b.n	8002322 <NVIC_EncodePriority+0x32>
 8002320:	2300      	movs	r3, #0
 8002322:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002324:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	43da      	mvns	r2, r3
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	401a      	ands	r2, r3
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002338:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	fa01 f303 	lsl.w	r3, r1, r3
 8002342:	43d9      	mvns	r1, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002348:	4313      	orrs	r3, r2
         );
}
 800234a:	4618      	mov	r0, r3
 800234c:	3724      	adds	r7, #36	; 0x24
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
	...

08002358 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	3b01      	subs	r3, #1
 8002364:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002368:	d301      	bcc.n	800236e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800236a:	2301      	movs	r3, #1
 800236c:	e00f      	b.n	800238e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800236e:	4a0a      	ldr	r2, [pc, #40]	; (8002398 <SysTick_Config+0x40>)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	3b01      	subs	r3, #1
 8002374:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002376:	210f      	movs	r1, #15
 8002378:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800237c:	f7ff ff8e 	bl	800229c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002380:	4b05      	ldr	r3, [pc, #20]	; (8002398 <SysTick_Config+0x40>)
 8002382:	2200      	movs	r2, #0
 8002384:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002386:	4b04      	ldr	r3, [pc, #16]	; (8002398 <SysTick_Config+0x40>)
 8002388:	2207      	movs	r2, #7
 800238a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	e000e010 	.word	0xe000e010

0800239c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f7ff ff29 	bl	80021fc <__NVIC_SetPriorityGrouping>
}
 80023aa:	bf00      	nop
 80023ac:	3708      	adds	r7, #8
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b086      	sub	sp, #24
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	4603      	mov	r3, r0
 80023ba:	60b9      	str	r1, [r7, #8]
 80023bc:	607a      	str	r2, [r7, #4]
 80023be:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80023c0:	f7ff ff40 	bl	8002244 <__NVIC_GetPriorityGrouping>
 80023c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	68b9      	ldr	r1, [r7, #8]
 80023ca:	6978      	ldr	r0, [r7, #20]
 80023cc:	f7ff ff90 	bl	80022f0 <NVIC_EncodePriority>
 80023d0:	4602      	mov	r2, r0
 80023d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023d6:	4611      	mov	r1, r2
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff ff5f 	bl	800229c <__NVIC_SetPriority>
}
 80023de:	bf00      	nop
 80023e0:	3718      	adds	r7, #24
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b082      	sub	sp, #8
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	4603      	mov	r3, r0
 80023ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff ff33 	bl	8002260 <__NVIC_EnableIRQ>
}
 80023fa:	bf00      	nop
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b082      	sub	sp, #8
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f7ff ffa4 	bl	8002358 <SysTick_Config>
 8002410:	4603      	mov	r3, r0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
	...

0800241c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e078      	b.n	8002520 <HAL_DMA_Init+0x104>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	461a      	mov	r2, r3
 8002434:	4b3c      	ldr	r3, [pc, #240]	; (8002528 <HAL_DMA_Init+0x10c>)
 8002436:	4413      	add	r3, r2
 8002438:	4a3c      	ldr	r2, [pc, #240]	; (800252c <HAL_DMA_Init+0x110>)
 800243a:	fba2 2303 	umull	r2, r3, r2, r3
 800243e:	091b      	lsrs	r3, r3, #4
 8002440:	009a      	lsls	r2, r3, #2
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a39      	ldr	r2, [pc, #228]	; (8002530 <HAL_DMA_Init+0x114>)
 800244a:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2202      	movs	r2, #2
 8002450:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002466:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002470:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800247c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	699b      	ldr	r3, [r3, #24]
 8002482:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002488:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a1b      	ldr	r3, [r3, #32]
 800248e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002490:	68fa      	ldr	r2, [r7, #12]
 8002492:	4313      	orrs	r3, r2
 8002494:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	68fa      	ldr	r2, [r7, #12]
 800249c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 f9b0 	bl	8002804 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80024ac:	d102      	bne.n	80024b4 <HAL_DMA_Init+0x98>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	685a      	ldr	r2, [r3, #4]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024bc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80024c0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80024ca:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d010      	beq.n	80024f6 <HAL_DMA_Init+0xda>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	2b04      	cmp	r3, #4
 80024da:	d80c      	bhi.n	80024f6 <HAL_DMA_Init+0xda>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f000 f9bd 	bl	800285c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024e6:	2200      	movs	r2, #0
 80024e8:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80024f2:	605a      	str	r2, [r3, #4]
 80024f4:	e008      	b.n	8002508 <HAL_DMA_Init+0xec>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2201      	movs	r2, #1
 8002512:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800251e:	2300      	movs	r3, #0
}
 8002520:	4618      	mov	r0, r3
 8002522:	3710      	adds	r7, #16
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	bffdfff8 	.word	0xbffdfff8
 800252c:	cccccccd 	.word	0xcccccccd
 8002530:	40020000 	.word	0x40020000

08002534 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b086      	sub	sp, #24
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
 8002540:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002542:	2300      	movs	r3, #0
 8002544:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800254c:	2b01      	cmp	r3, #1
 800254e:	d101      	bne.n	8002554 <HAL_DMA_Start_IT+0x20>
 8002550:	2302      	movs	r3, #2
 8002552:	e066      	b.n	8002622 <HAL_DMA_Start_IT+0xee>
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002562:	b2db      	uxtb	r3, r3
 8002564:	2b01      	cmp	r3, #1
 8002566:	d155      	bne.n	8002614 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2202      	movs	r2, #2
 800256c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2200      	movs	r2, #0
 8002574:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f022 0201 	bic.w	r2, r2, #1
 8002584:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	68b9      	ldr	r1, [r7, #8]
 800258c:	68f8      	ldr	r0, [r7, #12]
 800258e:	f000 f8fb 	bl	8002788 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002596:	2b00      	cmp	r3, #0
 8002598:	d008      	beq.n	80025ac <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f042 020e 	orr.w	r2, r2, #14
 80025a8:	601a      	str	r2, [r3, #0]
 80025aa:	e00f      	b.n	80025cc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f022 0204 	bic.w	r2, r2, #4
 80025ba:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f042 020a 	orr.w	r2, r2, #10
 80025ca:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d007      	beq.n	80025ea <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025e8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d007      	beq.n	8002602 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002600:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f042 0201 	orr.w	r2, r2, #1
 8002610:	601a      	str	r2, [r3, #0]
 8002612:	e005      	b.n	8002620 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2200      	movs	r2, #0
 8002618:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800261c:	2302      	movs	r3, #2
 800261e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002620:	7dfb      	ldrb	r3, [r7, #23]
}
 8002622:	4618      	mov	r0, r3
 8002624:	3718      	adds	r7, #24
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800262a:	b580      	push	{r7, lr}
 800262c:	b084      	sub	sp, #16
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002646:	f003 031c 	and.w	r3, r3, #28
 800264a:	2204      	movs	r2, #4
 800264c:	409a      	lsls	r2, r3
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	4013      	ands	r3, r2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d026      	beq.n	80026a4 <HAL_DMA_IRQHandler+0x7a>
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	f003 0304 	and.w	r3, r3, #4
 800265c:	2b00      	cmp	r3, #0
 800265e:	d021      	beq.n	80026a4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0320 	and.w	r3, r3, #32
 800266a:	2b00      	cmp	r3, #0
 800266c:	d107      	bne.n	800267e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f022 0204 	bic.w	r2, r2, #4
 800267c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002682:	f003 021c 	and.w	r2, r3, #28
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268a:	2104      	movs	r1, #4
 800268c:	fa01 f202 	lsl.w	r2, r1, r2
 8002690:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002696:	2b00      	cmp	r3, #0
 8002698:	d071      	beq.n	800277e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80026a2:	e06c      	b.n	800277e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a8:	f003 031c 	and.w	r3, r3, #28
 80026ac:	2202      	movs	r2, #2
 80026ae:	409a      	lsls	r2, r3
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	4013      	ands	r3, r2
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d02e      	beq.n	8002716 <HAL_DMA_IRQHandler+0xec>
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d029      	beq.n	8002716 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0320 	and.w	r3, r3, #32
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d10b      	bne.n	80026e8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f022 020a 	bic.w	r2, r2, #10
 80026de:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ec:	f003 021c 	and.w	r2, r3, #28
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f4:	2102      	movs	r1, #2
 80026f6:	fa01 f202 	lsl.w	r2, r1, r2
 80026fa:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002708:	2b00      	cmp	r3, #0
 800270a:	d038      	beq.n	800277e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002714:	e033      	b.n	800277e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271a:	f003 031c 	and.w	r3, r3, #28
 800271e:	2208      	movs	r2, #8
 8002720:	409a      	lsls	r2, r3
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	4013      	ands	r3, r2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d02a      	beq.n	8002780 <HAL_DMA_IRQHandler+0x156>
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	f003 0308 	and.w	r3, r3, #8
 8002730:	2b00      	cmp	r3, #0
 8002732:	d025      	beq.n	8002780 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f022 020e 	bic.w	r2, r2, #14
 8002742:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002748:	f003 021c 	and.w	r2, r3, #28
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002750:	2101      	movs	r1, #1
 8002752:	fa01 f202 	lsl.w	r2, r1, r2
 8002756:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2201      	movs	r2, #1
 8002762:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002772:	2b00      	cmp	r3, #0
 8002774:	d004      	beq.n	8002780 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800277e:	bf00      	nop
 8002780:	bf00      	nop
}
 8002782:	3710      	adds	r7, #16
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002788:	b480      	push	{r7}
 800278a:	b085      	sub	sp, #20
 800278c:	af00      	add	r7, sp, #0
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	607a      	str	r2, [r7, #4]
 8002794:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800279a:	68fa      	ldr	r2, [r7, #12]
 800279c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800279e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d004      	beq.n	80027b2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ac:	68fa      	ldr	r2, [r7, #12]
 80027ae:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80027b0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b6:	f003 021c 	and.w	r2, r3, #28
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027be:	2101      	movs	r1, #1
 80027c0:	fa01 f202 	lsl.w	r2, r1, r2
 80027c4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	683a      	ldr	r2, [r7, #0]
 80027cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	2b10      	cmp	r3, #16
 80027d4:	d108      	bne.n	80027e8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	68ba      	ldr	r2, [r7, #8]
 80027e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80027e6:	e007      	b.n	80027f8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	68ba      	ldr	r2, [r7, #8]
 80027ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	60da      	str	r2, [r3, #12]
}
 80027f8:	bf00      	nop
 80027fa:	3714      	adds	r7, #20
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002810:	089b      	lsrs	r3, r3, #2
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002818:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	6493      	str	r3, [r2, #72]	; 0x48
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	b2db      	uxtb	r3, r3
 8002826:	3b08      	subs	r3, #8
 8002828:	4a0a      	ldr	r2, [pc, #40]	; (8002854 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 800282a:	fba2 2303 	umull	r2, r3, r2, r3
 800282e:	091b      	lsrs	r3, r3, #4
 8002830:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a08      	ldr	r2, [pc, #32]	; (8002858 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8002836:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f003 031f 	and.w	r3, r3, #31
 800283e:	2201      	movs	r2, #1
 8002840:	409a      	lsls	r2, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002846:	bf00      	nop
 8002848:	3714      	adds	r7, #20
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	cccccccd 	.word	0xcccccccd
 8002858:	40020880 	.word	0x40020880

0800285c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800285c:	b480      	push	{r7}
 800285e:	b085      	sub	sp, #20
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800286c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	4b0b      	ldr	r3, [pc, #44]	; (80028a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002872:	4413      	add	r3, r2
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	461a      	mov	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	4a09      	ldr	r2, [pc, #36]	; (80028a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8002880:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	3b01      	subs	r3, #1
 8002886:	f003 0303 	and.w	r3, r3, #3
 800288a:	2201      	movs	r2, #1
 800288c:	409a      	lsls	r2, r3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002892:	bf00      	nop
 8002894:	3714      	adds	r7, #20
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	1000823f 	.word	0x1000823f
 80028a4:	40020940 	.word	0x40020940

080028a8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b087      	sub	sp, #28
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028b2:	2300      	movs	r3, #0
 80028b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028b6:	e146      	b.n	8002b46 <HAL_GPIO_Init+0x29e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	2101      	movs	r1, #1
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	fa01 f303 	lsl.w	r3, r1, r3
 80028c4:	4013      	ands	r3, r2
 80028c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	f000 8138 	beq.w	8002b40 <HAL_GPIO_Init+0x298>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f003 0303 	and.w	r3, r3, #3
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d005      	beq.n	80028e8 <HAL_GPIO_Init+0x40>
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f003 0303 	and.w	r3, r3, #3
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d130      	bne.n	800294a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	005b      	lsls	r3, r3, #1
 80028f2:	2203      	movs	r2, #3
 80028f4:	fa02 f303 	lsl.w	r3, r2, r3
 80028f8:	43db      	mvns	r3, r3
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	4013      	ands	r3, r2
 80028fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	68da      	ldr	r2, [r3, #12]
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	693a      	ldr	r2, [r7, #16]
 800290e:	4313      	orrs	r3, r2
 8002910:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	693a      	ldr	r2, [r7, #16]
 8002916:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800291e:	2201      	movs	r2, #1
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	fa02 f303 	lsl.w	r3, r2, r3
 8002926:	43db      	mvns	r3, r3
 8002928:	693a      	ldr	r2, [r7, #16]
 800292a:	4013      	ands	r3, r2
 800292c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	091b      	lsrs	r3, r3, #4
 8002934:	f003 0201 	and.w	r2, r3, #1
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	fa02 f303 	lsl.w	r3, r2, r3
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	4313      	orrs	r3, r2
 8002942:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	693a      	ldr	r2, [r7, #16]
 8002948:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f003 0303 	and.w	r3, r3, #3
 8002952:	2b03      	cmp	r3, #3
 8002954:	d017      	beq.n	8002986 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	005b      	lsls	r3, r3, #1
 8002960:	2203      	movs	r2, #3
 8002962:	fa02 f303 	lsl.w	r3, r2, r3
 8002966:	43db      	mvns	r3, r3
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	4013      	ands	r3, r2
 800296c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	689a      	ldr	r2, [r3, #8]
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	fa02 f303 	lsl.w	r3, r2, r3
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	4313      	orrs	r3, r2
 800297e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f003 0303 	and.w	r3, r3, #3
 800298e:	2b02      	cmp	r3, #2
 8002990:	d123      	bne.n	80029da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	08da      	lsrs	r2, r3, #3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	3208      	adds	r2, #8
 800299a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800299e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	f003 0307 	and.w	r3, r3, #7
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	220f      	movs	r2, #15
 80029aa:	fa02 f303 	lsl.w	r3, r2, r3
 80029ae:	43db      	mvns	r3, r3
 80029b0:	693a      	ldr	r2, [r7, #16]
 80029b2:	4013      	ands	r3, r2
 80029b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	691a      	ldr	r2, [r3, #16]
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	f003 0307 	and.w	r3, r3, #7
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	fa02 f303 	lsl.w	r3, r2, r3
 80029c6:	693a      	ldr	r2, [r7, #16]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	08da      	lsrs	r2, r3, #3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	3208      	adds	r2, #8
 80029d4:	6939      	ldr	r1, [r7, #16]
 80029d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	005b      	lsls	r3, r3, #1
 80029e4:	2203      	movs	r2, #3
 80029e6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ea:	43db      	mvns	r3, r3
 80029ec:	693a      	ldr	r2, [r7, #16]
 80029ee:	4013      	ands	r3, r2
 80029f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f003 0203 	and.w	r2, r3, #3
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	005b      	lsls	r3, r3, #1
 80029fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002a02:	693a      	ldr	r2, [r7, #16]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	f000 8092 	beq.w	8002b40 <HAL_GPIO_Init+0x298>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002a1c:	4a51      	ldr	r2, [pc, #324]	; (8002b64 <HAL_GPIO_Init+0x2bc>)
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	089b      	lsrs	r3, r3, #2
 8002a22:	3302      	adds	r3, #2
 8002a24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a28:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	f003 0303 	and.w	r3, r3, #3
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	220f      	movs	r2, #15
 8002a34:	fa02 f303 	lsl.w	r3, r2, r3
 8002a38:	43db      	mvns	r3, r3
 8002a3a:	693a      	ldr	r2, [r7, #16]
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002a46:	d013      	beq.n	8002a70 <HAL_GPIO_Init+0x1c8>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	4a47      	ldr	r2, [pc, #284]	; (8002b68 <HAL_GPIO_Init+0x2c0>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d00d      	beq.n	8002a6c <HAL_GPIO_Init+0x1c4>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4a46      	ldr	r2, [pc, #280]	; (8002b6c <HAL_GPIO_Init+0x2c4>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d007      	beq.n	8002a68 <HAL_GPIO_Init+0x1c0>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	4a45      	ldr	r2, [pc, #276]	; (8002b70 <HAL_GPIO_Init+0x2c8>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d101      	bne.n	8002a64 <HAL_GPIO_Init+0x1bc>
 8002a60:	2304      	movs	r3, #4
 8002a62:	e006      	b.n	8002a72 <HAL_GPIO_Init+0x1ca>
 8002a64:	2307      	movs	r3, #7
 8002a66:	e004      	b.n	8002a72 <HAL_GPIO_Init+0x1ca>
 8002a68:	2302      	movs	r3, #2
 8002a6a:	e002      	b.n	8002a72 <HAL_GPIO_Init+0x1ca>
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e000      	b.n	8002a72 <HAL_GPIO_Init+0x1ca>
 8002a70:	2300      	movs	r3, #0
 8002a72:	697a      	ldr	r2, [r7, #20]
 8002a74:	f002 0203 	and.w	r2, r2, #3
 8002a78:	0092      	lsls	r2, r2, #2
 8002a7a:	4093      	lsls	r3, r2
 8002a7c:	693a      	ldr	r2, [r7, #16]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a82:	4938      	ldr	r1, [pc, #224]	; (8002b64 <HAL_GPIO_Init+0x2bc>)
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	089b      	lsrs	r3, r3, #2
 8002a88:	3302      	adds	r3, #2
 8002a8a:	693a      	ldr	r2, [r7, #16]
 8002a8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a90:	4b38      	ldr	r3, [pc, #224]	; (8002b74 <HAL_GPIO_Init+0x2cc>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	43db      	mvns	r3, r3
 8002a9a:	693a      	ldr	r2, [r7, #16]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d003      	beq.n	8002ab4 <HAL_GPIO_Init+0x20c>
        {
          temp |= iocurrent;
 8002aac:	693a      	ldr	r2, [r7, #16]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002ab4:	4a2f      	ldr	r2, [pc, #188]	; (8002b74 <HAL_GPIO_Init+0x2cc>)
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002aba:	4b2e      	ldr	r3, [pc, #184]	; (8002b74 <HAL_GPIO_Init+0x2cc>)
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	43db      	mvns	r3, r3
 8002ac4:	693a      	ldr	r2, [r7, #16]
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d003      	beq.n	8002ade <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 8002ad6:	693a      	ldr	r2, [r7, #16]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002ade:	4a25      	ldr	r2, [pc, #148]	; (8002b74 <HAL_GPIO_Init+0x2cc>)
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002ae4:	4b23      	ldr	r3, [pc, #140]	; (8002b74 <HAL_GPIO_Init+0x2cc>)
 8002ae6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002aea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	43db      	mvns	r3, r3
 8002af0:	693a      	ldr	r2, [r7, #16]
 8002af2:	4013      	ands	r3, r2
 8002af4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d003      	beq.n	8002b0a <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002b0a:	4a1a      	ldr	r2, [pc, #104]	; (8002b74 <HAL_GPIO_Init+0x2cc>)
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8002b12:	4b18      	ldr	r3, [pc, #96]	; (8002b74 <HAL_GPIO_Init+0x2cc>)
 8002b14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	43db      	mvns	r3, r3
 8002b1e:	693a      	ldr	r2, [r7, #16]
 8002b20:	4013      	ands	r3, r2
 8002b22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d003      	beq.n	8002b38 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002b30:	693a      	ldr	r2, [r7, #16]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b38:	4a0e      	ldr	r2, [pc, #56]	; (8002b74 <HAL_GPIO_Init+0x2cc>)
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	3301      	adds	r3, #1
 8002b44:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	f47f aeb1 	bne.w	80028b8 <HAL_GPIO_Init+0x10>
  }
}
 8002b56:	bf00      	nop
 8002b58:	bf00      	nop
 8002b5a:	371c      	adds	r7, #28
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr
 8002b64:	40010000 	.word	0x40010000
 8002b68:	48000400 	.word	0x48000400
 8002b6c:	48000800 	.word	0x48000800
 8002b70:	48001000 	.word	0x48001000
 8002b74:	58000800 	.word	0x58000800

08002b78 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	4603      	mov	r3, r0
 8002b80:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002b82:	4b08      	ldr	r3, [pc, #32]	; (8002ba4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b84:	68da      	ldr	r2, [r3, #12]
 8002b86:	88fb      	ldrh	r3, [r7, #6]
 8002b88:	4013      	ands	r3, r2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d006      	beq.n	8002b9c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b8e:	4a05      	ldr	r2, [pc, #20]	; (8002ba4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b90:	88fb      	ldrh	r3, [r7, #6]
 8002b92:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b94:	88fb      	ldrh	r3, [r7, #6]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7fd fcf6 	bl	8000588 <HAL_GPIO_EXTI_Callback>
  }
}
 8002b9c:	bf00      	nop
 8002b9e:	3708      	adds	r7, #8
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	58000800 	.word	0x58000800

08002ba8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d101      	bne.n	8002bba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e081      	b.n	8002cbe <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d106      	bne.n	8002bd4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f7fe f89a 	bl	8000d08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2224      	movs	r2, #36	; 0x24
 8002bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f022 0201 	bic.w	r2, r2, #1
 8002bea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685a      	ldr	r2, [r3, #4]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002bf8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	689a      	ldr	r2, [r3, #8]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c08:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d107      	bne.n	8002c22 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	689a      	ldr	r2, [r3, #8]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c1e:	609a      	str	r2, [r3, #8]
 8002c20:	e006      	b.n	8002c30 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	689a      	ldr	r2, [r3, #8]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002c2e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d104      	bne.n	8002c42 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c40:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	6812      	ldr	r2, [r2, #0]
 8002c4c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c54:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	68da      	ldr	r2, [r3, #12]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c64:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	691a      	ldr	r2, [r3, #16]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	695b      	ldr	r3, [r3, #20]
 8002c6e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	69d9      	ldr	r1, [r3, #28]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a1a      	ldr	r2, [r3, #32]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	430a      	orrs	r2, r1
 8002c8e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f042 0201 	orr.w	r2, r2, #1
 8002c9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2220      	movs	r2, #32
 8002caa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3708      	adds	r7, #8
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	b083      	sub	sp, #12
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
 8002cce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	2b20      	cmp	r3, #32
 8002cda:	d138      	bne.n	8002d4e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d101      	bne.n	8002cea <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002ce6:	2302      	movs	r3, #2
 8002ce8:	e032      	b.n	8002d50 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2201      	movs	r2, #1
 8002cee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2224      	movs	r2, #36	; 0x24
 8002cf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f022 0201 	bic.w	r2, r2, #1
 8002d08:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d18:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	6819      	ldr	r1, [r3, #0]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	683a      	ldr	r2, [r7, #0]
 8002d26:	430a      	orrs	r2, r1
 8002d28:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f042 0201 	orr.w	r2, r2, #1
 8002d38:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2220      	movs	r2, #32
 8002d3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	e000      	b.n	8002d50 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002d4e:	2302      	movs	r3, #2
  }
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b085      	sub	sp, #20
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	2b20      	cmp	r3, #32
 8002d70:	d139      	bne.n	8002de6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d101      	bne.n	8002d80 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002d7c:	2302      	movs	r3, #2
 8002d7e:	e033      	b.n	8002de8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2224      	movs	r2, #36	; 0x24
 8002d8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f022 0201 	bic.w	r2, r2, #1
 8002d9e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002dae:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	021b      	lsls	r3, r3, #8
 8002db4:	68fa      	ldr	r2, [r7, #12]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	68fa      	ldr	r2, [r7, #12]
 8002dc0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f042 0201 	orr.w	r2, r2, #1
 8002dd0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2220      	movs	r2, #32
 8002dd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002de2:	2300      	movs	r3, #0
 8002de4:	e000      	b.n	8002de8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002de6:	2302      	movs	r3, #2
  }
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3714      	adds	r7, #20
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002df8:	4b05      	ldr	r3, [pc, #20]	; (8002e10 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a04      	ldr	r2, [pc, #16]	; (8002e10 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002dfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e02:	6013      	str	r3, [r2, #0]
}
 8002e04:	bf00      	nop
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	58000400 	.word	0x58000400

08002e14 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002e18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e26:	d101      	bne.n	8002e2c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e000      	b.n	8002e2e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr

08002e38 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002e3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e4a:	6013      	str	r3, [r2, #0]
}
 8002e4c:	bf00      	nop
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr

08002e56 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8002e56:	b480      	push	{r7}
 8002e58:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002e5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e68:	6013      	str	r3, [r2, #0]
}
 8002e6a:	bf00      	nop
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8002e74:	b480      	push	{r7}
 8002e76:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002e78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e86:	d101      	bne.n	8002e8c <LL_RCC_HSE_IsReady+0x18>
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e000      	b.n	8002e8e <LL_RCC_HSE_IsReady+0x1a>
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002e9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ea6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eaa:	6013      	str	r3, [r2, #0]
}
 8002eac:	bf00      	nop
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr

08002eb6 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8002eb6:	b480      	push	{r7}
 8002eb8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002eba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ec4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ec8:	6013      	str	r3, [r2, #0]
}
 8002eca:	bf00      	nop
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002ed8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ee2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ee6:	d101      	bne.n	8002eec <LL_RCC_HSI_IsReady+0x18>
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e000      	b.n	8002eee <LL_RCC_HSI_IsReady+0x1a>
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002f00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	061b      	lsls	r3, r3, #24
 8002f0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f12:	4313      	orrs	r3, r2
 8002f14:	604b      	str	r3, [r1, #4]
}
 8002f16:	bf00      	nop
 8002f18:	370c      	adds	r7, #12
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr

08002f22 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8002f22:	b480      	push	{r7}
 8002f24:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002f26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f32:	f043 0301 	orr.w	r3, r3, #1
 8002f36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002f3a:	bf00      	nop
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8002f44:	b480      	push	{r7}
 8002f46:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002f48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f54:	f023 0301 	bic.w	r3, r3, #1
 8002f58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002f5c:	bf00      	nop
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr

08002f66 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8002f66:	b480      	push	{r7}
 8002f68:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002f6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f76:	f043 0304 	orr.w	r3, r3, #4
 8002f7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002f7e:	bf00      	nop
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002f8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f98:	f023 0304 	bic.w	r3, r3, #4
 8002f9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002fa0:	bf00      	nop
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr

08002faa <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8002faa:	b480      	push	{r7}
 8002fac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002fae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d101      	bne.n	8002fc2 <LL_RCC_LSE_IsReady+0x18>
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e000      	b.n	8002fc4 <LL_RCC_LSE_IsReady+0x1a>
 8002fc2:	2300      	movs	r3, #0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr

08002fce <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8002fce:	b480      	push	{r7}
 8002fd0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002fd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fda:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fde:	f043 0301 	orr.w	r3, r3, #1
 8002fe2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002fe6:	bf00      	nop
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr

08002ff0 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002ff4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ff8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ffc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003000:	f023 0301 	bic.w	r3, r3, #1
 8003004:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003008:	bf00      	nop
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr

08003012 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8003012:	b480      	push	{r7}
 8003014:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8003016:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800301a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	2b02      	cmp	r3, #2
 8003024:	d101      	bne.n	800302a <LL_RCC_LSI1_IsReady+0x18>
 8003026:	2301      	movs	r3, #1
 8003028:	e000      	b.n	800302c <LL_RCC_LSI1_IsReady+0x1a>
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr

08003036 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8003036:	b480      	push	{r7}
 8003038:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800303a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800303e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003042:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003046:	f043 0304 	orr.w	r3, r3, #4
 800304a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800304e:	bf00      	nop
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr

08003058 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8003058:	b480      	push	{r7}
 800305a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800305c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003060:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003064:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003068:	f023 0304 	bic.w	r3, r3, #4
 800306c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003070:	bf00      	nop
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr

0800307a <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 800307a:	b480      	push	{r7}
 800307c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800307e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003082:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003086:	f003 0308 	and.w	r3, r3, #8
 800308a:	2b08      	cmp	r3, #8
 800308c:	d101      	bne.n	8003092 <LL_RCC_LSI2_IsReady+0x18>
 800308e:	2301      	movs	r3, #1
 8003090:	e000      	b.n	8003094 <LL_RCC_LSI2_IsReady+0x1a>
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr

0800309e <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 800309e:	b480      	push	{r7}
 80030a0:	b083      	sub	sp, #12
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80030a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030ae:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	021b      	lsls	r3, r3, #8
 80030b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030ba:	4313      	orrs	r3, r2
 80030bc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80030c0:	bf00      	nop
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80030d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030da:	f043 0301 	orr.w	r3, r3, #1
 80030de:	6013      	str	r3, [r2, #0]
}
 80030e0:	bf00      	nop
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr

080030ea <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80030ea:	b480      	push	{r7}
 80030ec:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80030ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030f8:	f023 0301 	bic.w	r3, r3, #1
 80030fc:	6013      	str	r3, [r2, #0]
}
 80030fe:	bf00      	nop
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr

08003108 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8003108:	b480      	push	{r7}
 800310a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800310c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0302 	and.w	r3, r3, #2
 8003116:	2b02      	cmp	r3, #2
 8003118:	d101      	bne.n	800311e <LL_RCC_MSI_IsReady+0x16>
 800311a:	2301      	movs	r3, #1
 800311c:	e000      	b.n	8003120 <LL_RCC_MSI_IsReady+0x18>
 800311e:	2300      	movs	r3, #0
}
 8003120:	4618      	mov	r0, r3
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr

0800312a <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 800312a:	b480      	push	{r7}
 800312c:	b083      	sub	sp, #12
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8003132:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800313c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	4313      	orrs	r3, r2
 8003144:	600b      	str	r3, [r1, #0]
}
 8003146:	bf00      	nop
 8003148:	370c      	adds	r7, #12
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr

08003152 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8003152:	b480      	push	{r7}
 8003154:	b083      	sub	sp, #12
 8003156:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003158:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003162:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2bb0      	cmp	r3, #176	; 0xb0
 8003168:	d901      	bls.n	800316e <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 800316a:	23b0      	movs	r3, #176	; 0xb0
 800316c:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 800316e:	687b      	ldr	r3, [r7, #4]
}
 8003170:	4618      	mov	r0, r3
 8003172:	370c      	adds	r7, #12
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr

0800317c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003184:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	021b      	lsls	r3, r3, #8
 8003192:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003196:	4313      	orrs	r3, r2
 8003198:	604b      	str	r3, [r1, #4]
}
 800319a:	bf00      	nop
 800319c:	370c      	adds	r7, #12
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr

080031a6 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80031a6:	b480      	push	{r7}
 80031a8:	b083      	sub	sp, #12
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80031ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f023 0203 	bic.w	r2, r3, #3
 80031b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4313      	orrs	r3, r2
 80031c0:	608b      	str	r3, [r1, #8]
}
 80031c2:	bf00      	nop
 80031c4:	370c      	adds	r7, #12
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr

080031ce <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80031ce:	b480      	push	{r7}
 80031d0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80031d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	f003 030c 	and.w	r3, r3, #12
}
 80031dc:	4618      	mov	r0, r3
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr

080031e6 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80031e6:	b480      	push	{r7}
 80031e8:	b083      	sub	sp, #12
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80031ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4313      	orrs	r3, r2
 8003200:	608b      	str	r3, [r1, #8]
}
 8003202:	bf00      	nop
 8003204:	370c      	adds	r7, #12
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr

0800320e <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800320e:	b480      	push	{r7}
 8003210:	b083      	sub	sp, #12
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8003216:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800321a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800321e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003222:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4313      	orrs	r3, r2
 800322a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800322e:	bf00      	nop
 8003230:	370c      	adds	r7, #12
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr

0800323a <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 800323a:	b480      	push	{r7}
 800323c:	b083      	sub	sp, #12
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003242:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003246:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800324a:	f023 020f 	bic.w	r2, r3, #15
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	091b      	lsrs	r3, r3, #4
 8003252:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003256:	4313      	orrs	r3, r2
 8003258:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800325c:	bf00      	nop
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003270:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800327a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4313      	orrs	r3, r2
 8003282:	608b      	str	r3, [r1, #8]
}
 8003284:	bf00      	nop
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003298:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80032a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	608b      	str	r3, [r1, #8]
}
 80032ac:	bf00      	nop
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80032b8:	b480      	push	{r7}
 80032ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80032bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 80032d0:	b480      	push	{r7}
 80032d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80032d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032d8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80032dc:	011b      	lsls	r3, r3, #4
 80032de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80032ec:	b480      	push	{r7}
 80032ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80032f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr

08003304 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8003304:	b480      	push	{r7}
 8003306:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003308:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8003312:	4618      	mov	r0, r3
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr

0800331c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800331c:	b480      	push	{r7}
 800331e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003320:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800332a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800332e:	6013      	str	r3, [r2, #0]
}
 8003330:	bf00      	nop
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr

0800333a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800333a:	b480      	push	{r7}
 800333c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800333e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003348:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800334c:	6013      	str	r3, [r2, #0]
}
 800334e:	bf00      	nop
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8003358:	b480      	push	{r7}
 800335a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800335c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003366:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800336a:	d101      	bne.n	8003370 <LL_RCC_PLL_IsReady+0x18>
 800336c:	2301      	movs	r3, #1
 800336e:	e000      	b.n	8003372 <LL_RCC_PLL_IsReady+0x1a>
 8003370:	2300      	movs	r3, #0
}
 8003372:	4618      	mov	r0, r3
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800337c:	b480      	push	{r7}
 800337e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003380:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	0a1b      	lsrs	r3, r3, #8
 8003388:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800338c:	4618      	mov	r0, r3
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr

08003396 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8003396:	b480      	push	{r7}
 8003398:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800339a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr

080033ae <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80033ae:	b480      	push	{r7}
 80033b0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80033b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80033bc:	4618      	mov	r0, r3
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr

080033c6 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80033c6:	b480      	push	{r7}
 80033c8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80033ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	f003 0303 	and.w	r3, r3, #3
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr

080033de <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80033de:	b480      	push	{r7}
 80033e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80033e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033f0:	d101      	bne.n	80033f6 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80033f2:	2301      	movs	r3, #1
 80033f4:	e000      	b.n	80033f8 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80033f6:	2300      	movs	r3, #0
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr

08003402 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8003402:	b480      	push	{r7}
 8003404:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8003406:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800340a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800340e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003412:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003416:	d101      	bne.n	800341c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8003418:	2301      	movs	r3, #1
 800341a:	e000      	b.n	800341e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8003428:	b480      	push	{r7}
 800342a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800342c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003430:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003434:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003438:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800343c:	d101      	bne.n	8003442 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800343e:	2301      	movs	r3, #1
 8003440:	e000      	b.n	8003444 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8003442:	2300      	movs	r3, #0
}
 8003444:	4618      	mov	r0, r3
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr

0800344e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800344e:	b480      	push	{r7}
 8003450:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8003452:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800345c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003460:	d101      	bne.n	8003466 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8003462:	2301      	movs	r3, #1
 8003464:	e000      	b.n	8003468 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8003466:	2300      	movs	r3, #0
}
 8003468:	4618      	mov	r0, r3
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr

08003472 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8003472:	b480      	push	{r7}
 8003474:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003476:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003480:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003484:	d101      	bne.n	800348a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003486:	2301      	movs	r3, #1
 8003488:	e000      	b.n	800348c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800348a:	2300      	movs	r3, #0
}
 800348c:	4618      	mov	r0, r3
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
	...

08003498 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003498:	b590      	push	{r4, r7, lr}
 800349a:	b08d      	sub	sp, #52	; 0x34
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d101      	bne.n	80034aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e324      	b.n	8003af4 <HAL_RCC_OscConfig+0x65c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0320 	and.w	r3, r3, #32
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	f000 808d 	beq.w	80035d2 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034b8:	f7ff fe89 	bl	80031ce <LL_RCC_GetSysClkSource>
 80034bc:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034be:	f7ff ff82 	bl	80033c6 <LL_RCC_PLL_GetMainSource>
 80034c2:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80034c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d005      	beq.n	80034d6 <HAL_RCC_OscConfig+0x3e>
 80034ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034cc:	2b0c      	cmp	r3, #12
 80034ce:	d147      	bne.n	8003560 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80034d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d144      	bne.n	8003560 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	69db      	ldr	r3, [r3, #28]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d101      	bne.n	80034e2 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e308      	b.n	8003af4 <HAL_RCC_OscConfig+0x65c>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80034e6:	f7ff fe34 	bl	8003152 <LL_RCC_MSI_GetRange>
 80034ea:	4603      	mov	r3, r0
 80034ec:	429c      	cmp	r4, r3
 80034ee:	d914      	bls.n	800351a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f4:	4618      	mov	r0, r3
 80034f6:	f000 fcf3 	bl	8003ee0 <RCC_SetFlashLatencyFromMSIRange>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d001      	beq.n	8003504 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e2f7      	b.n	8003af4 <HAL_RCC_OscConfig+0x65c>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003508:	4618      	mov	r0, r3
 800350a:	f7ff fe0e 	bl	800312a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a1b      	ldr	r3, [r3, #32]
 8003512:	4618      	mov	r0, r3
 8003514:	f7ff fe32 	bl	800317c <LL_RCC_MSI_SetCalibTrimming>
 8003518:	e013      	b.n	8003542 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351e:	4618      	mov	r0, r3
 8003520:	f7ff fe03 	bl	800312a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a1b      	ldr	r3, [r3, #32]
 8003528:	4618      	mov	r0, r3
 800352a:	f7ff fe27 	bl	800317c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003532:	4618      	mov	r0, r3
 8003534:	f000 fcd4 	bl	8003ee0 <RCC_SetFlashLatencyFromMSIRange>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d001      	beq.n	8003542 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e2d8      	b.n	8003af4 <HAL_RCC_OscConfig+0x65c>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003542:	f000 fc8d 	bl	8003e60 <HAL_RCC_GetHCLKFreq>
 8003546:	4603      	mov	r3, r0
 8003548:	4aa4      	ldr	r2, [pc, #656]	; (80037dc <HAL_RCC_OscConfig+0x344>)
 800354a:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800354c:	4ba4      	ldr	r3, [pc, #656]	; (80037e0 <HAL_RCC_OscConfig+0x348>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4618      	mov	r0, r3
 8003552:	f7fd fe49 	bl	80011e8 <HAL_InitTick>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d039      	beq.n	80035d0 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e2c9      	b.n	8003af4 <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	69db      	ldr	r3, [r3, #28]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d01e      	beq.n	80035a6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003568:	f7ff fdb0 	bl	80030cc <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800356c:	f7fd fe8a 	bl	8001284 <HAL_GetTick>
 8003570:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8003572:	e008      	b.n	8003586 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003574:	f7fd fe86 	bl	8001284 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b02      	cmp	r3, #2
 8003580:	d901      	bls.n	8003586 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e2b6      	b.n	8003af4 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003586:	f7ff fdbf 	bl	8003108 <LL_RCC_MSI_IsReady>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d0f1      	beq.n	8003574 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003594:	4618      	mov	r0, r3
 8003596:	f7ff fdc8 	bl	800312a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a1b      	ldr	r3, [r3, #32]
 800359e:	4618      	mov	r0, r3
 80035a0:	f7ff fdec 	bl	800317c <LL_RCC_MSI_SetCalibTrimming>
 80035a4:	e015      	b.n	80035d2 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80035a6:	f7ff fda0 	bl	80030ea <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80035aa:	f7fd fe6b 	bl	8001284 <HAL_GetTick>
 80035ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80035b0:	e008      	b.n	80035c4 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80035b2:	f7fd fe67 	bl	8001284 <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d901      	bls.n	80035c4 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e297      	b.n	8003af4 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() != 0U)
 80035c4:	f7ff fda0 	bl	8003108 <LL_RCC_MSI_IsReady>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1f1      	bne.n	80035b2 <HAL_RCC_OscConfig+0x11a>
 80035ce:	e000      	b.n	80035d2 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80035d0:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d047      	beq.n	800366e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035de:	f7ff fdf6 	bl	80031ce <LL_RCC_GetSysClkSource>
 80035e2:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035e4:	f7ff feef 	bl	80033c6 <LL_RCC_PLL_GetMainSource>
 80035e8:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80035ea:	6a3b      	ldr	r3, [r7, #32]
 80035ec:	2b08      	cmp	r3, #8
 80035ee:	d005      	beq.n	80035fc <HAL_RCC_OscConfig+0x164>
 80035f0:	6a3b      	ldr	r3, [r7, #32]
 80035f2:	2b0c      	cmp	r3, #12
 80035f4:	d108      	bne.n	8003608 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	2b03      	cmp	r3, #3
 80035fa:	d105      	bne.n	8003608 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d134      	bne.n	800366e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e275      	b.n	8003af4 <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003610:	d102      	bne.n	8003618 <HAL_RCC_OscConfig+0x180>
 8003612:	f7ff fc11 	bl	8002e38 <LL_RCC_HSE_Enable>
 8003616:	e001      	b.n	800361c <HAL_RCC_OscConfig+0x184>
 8003618:	f7ff fc1d 	bl	8002e56 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d012      	beq.n	800364a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003624:	f7fd fe2e 	bl	8001284 <HAL_GetTick>
 8003628:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800362a:	e008      	b.n	800363e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800362c:	f7fd fe2a 	bl	8001284 <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	2b64      	cmp	r3, #100	; 0x64
 8003638:	d901      	bls.n	800363e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e25a      	b.n	8003af4 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() == 0U)
 800363e:	f7ff fc19 	bl	8002e74 <LL_RCC_HSE_IsReady>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d0f1      	beq.n	800362c <HAL_RCC_OscConfig+0x194>
 8003648:	e011      	b.n	800366e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800364a:	f7fd fe1b 	bl	8001284 <HAL_GetTick>
 800364e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8003650:	e008      	b.n	8003664 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003652:	f7fd fe17 	bl	8001284 <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	2b64      	cmp	r3, #100	; 0x64
 800365e:	d901      	bls.n	8003664 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003660:	2303      	movs	r3, #3
 8003662:	e247      	b.n	8003af4 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003664:	f7ff fc06 	bl	8002e74 <LL_RCC_HSE_IsReady>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d1f1      	bne.n	8003652 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d04c      	beq.n	8003714 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800367a:	f7ff fda8 	bl	80031ce <LL_RCC_GetSysClkSource>
 800367e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003680:	f7ff fea1 	bl	80033c6 <LL_RCC_PLL_GetMainSource>
 8003684:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	2b04      	cmp	r3, #4
 800368a:	d005      	beq.n	8003698 <HAL_RCC_OscConfig+0x200>
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	2b0c      	cmp	r3, #12
 8003690:	d10e      	bne.n	80036b0 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	2b02      	cmp	r3, #2
 8003696:	d10b      	bne.n	80036b0 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d101      	bne.n	80036a4 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e227      	b.n	8003af4 <HAL_RCC_OscConfig+0x65c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	691b      	ldr	r3, [r3, #16]
 80036a8:	4618      	mov	r0, r3
 80036aa:	f7ff fc25 	bl	8002ef8 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80036ae:	e031      	b.n	8003714 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d019      	beq.n	80036ec <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036b8:	f7ff fbee 	bl	8002e98 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036bc:	f7fd fde2 	bl	8001284 <HAL_GetTick>
 80036c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80036c2:	e008      	b.n	80036d6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036c4:	f7fd fdde 	bl	8001284 <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d901      	bls.n	80036d6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e20e      	b.n	8003af4 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() == 0U)
 80036d6:	f7ff fbfd 	bl	8002ed4 <LL_RCC_HSI_IsReady>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d0f1      	beq.n	80036c4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	691b      	ldr	r3, [r3, #16]
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7ff fc07 	bl	8002ef8 <LL_RCC_HSI_SetCalibTrimming>
 80036ea:	e013      	b.n	8003714 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036ec:	f7ff fbe3 	bl	8002eb6 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f0:	f7fd fdc8 	bl	8001284 <HAL_GetTick>
 80036f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80036f6:	e008      	b.n	800370a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036f8:	f7fd fdc4 	bl	8001284 <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	2b02      	cmp	r3, #2
 8003704:	d901      	bls.n	800370a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e1f4      	b.n	8003af4 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() != 0U)
 800370a:	f7ff fbe3 	bl	8002ed4 <LL_RCC_HSI_IsReady>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d1f1      	bne.n	80036f8 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0308 	and.w	r3, r3, #8
 800371c:	2b00      	cmp	r3, #0
 800371e:	d106      	bne.n	800372e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003728:	2b00      	cmp	r3, #0
 800372a:	f000 80a3 	beq.w	8003874 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	695b      	ldr	r3, [r3, #20]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d076      	beq.n	8003824 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0310 	and.w	r3, r3, #16
 800373e:	2b00      	cmp	r3, #0
 8003740:	d046      	beq.n	80037d0 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8003742:	f7ff fc66 	bl	8003012 <LL_RCC_LSI1_IsReady>
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d113      	bne.n	8003774 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800374c:	f7ff fc3f 	bl	8002fce <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003750:	f7fd fd98 	bl	8001284 <HAL_GetTick>
 8003754:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003756:	e008      	b.n	800376a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003758:	f7fd fd94 	bl	8001284 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b02      	cmp	r3, #2
 8003764:	d901      	bls.n	800376a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e1c4      	b.n	8003af4 <HAL_RCC_OscConfig+0x65c>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800376a:	f7ff fc52 	bl	8003012 <LL_RCC_LSI1_IsReady>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d0f1      	beq.n	8003758 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8003774:	f7ff fc5f 	bl	8003036 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003778:	f7fd fd84 	bl	8001284 <HAL_GetTick>
 800377c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800377e:	e008      	b.n	8003792 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003780:	f7fd fd80 	bl	8001284 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	2b03      	cmp	r3, #3
 800378c:	d901      	bls.n	8003792 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e1b0      	b.n	8003af4 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003792:	f7ff fc72 	bl	800307a <LL_RCC_LSI2_IsReady>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d0f1      	beq.n	8003780 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	699b      	ldr	r3, [r3, #24]
 80037a0:	4618      	mov	r0, r3
 80037a2:	f7ff fc7c 	bl	800309e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80037a6:	f7ff fc23 	bl	8002ff0 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037aa:	f7fd fd6b 	bl	8001284 <HAL_GetTick>
 80037ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80037b0:	e008      	b.n	80037c4 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80037b2:	f7fd fd67 	bl	8001284 <HAL_GetTick>
 80037b6:	4602      	mov	r2, r0
 80037b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d901      	bls.n	80037c4 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80037c0:	2303      	movs	r3, #3
 80037c2:	e197      	b.n	8003af4 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80037c4:	f7ff fc25 	bl	8003012 <LL_RCC_LSI1_IsReady>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1f1      	bne.n	80037b2 <HAL_RCC_OscConfig+0x31a>
 80037ce:	e051      	b.n	8003874 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80037d0:	f7ff fbfd 	bl	8002fce <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d4:	f7fd fd56 	bl	8001284 <HAL_GetTick>
 80037d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80037da:	e00c      	b.n	80037f6 <HAL_RCC_OscConfig+0x35e>
 80037dc:	20000008 	.word	0x20000008
 80037e0:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80037e4:	f7fd fd4e 	bl	8001284 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e17e      	b.n	8003af4 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80037f6:	f7ff fc0c 	bl	8003012 <LL_RCC_LSI1_IsReady>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d0f1      	beq.n	80037e4 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8003800:	f7ff fc2a 	bl	8003058 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003804:	e008      	b.n	8003818 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003806:	f7fd fd3d 	bl	8001284 <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	2b03      	cmp	r3, #3
 8003812:	d901      	bls.n	8003818 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8003814:	2303      	movs	r3, #3
 8003816:	e16d      	b.n	8003af4 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003818:	f7ff fc2f 	bl	800307a <LL_RCC_LSI2_IsReady>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d1f1      	bne.n	8003806 <HAL_RCC_OscConfig+0x36e>
 8003822:	e027      	b.n	8003874 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8003824:	f7ff fc18 	bl	8003058 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003828:	f7fd fd2c 	bl	8001284 <HAL_GetTick>
 800382c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800382e:	e008      	b.n	8003842 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003830:	f7fd fd28 	bl	8001284 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	2b03      	cmp	r3, #3
 800383c:	d901      	bls.n	8003842 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e158      	b.n	8003af4 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003842:	f7ff fc1a 	bl	800307a <LL_RCC_LSI2_IsReady>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d1f1      	bne.n	8003830 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800384c:	f7ff fbd0 	bl	8002ff0 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003850:	f7fd fd18 	bl	8001284 <HAL_GetTick>
 8003854:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003856:	e008      	b.n	800386a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003858:	f7fd fd14 	bl	8001284 <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	2b02      	cmp	r3, #2
 8003864:	d901      	bls.n	800386a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e144      	b.n	8003af4 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800386a:	f7ff fbd2 	bl	8003012 <LL_RCC_LSI1_IsReady>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d1f1      	bne.n	8003858 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0304 	and.w	r3, r3, #4
 800387c:	2b00      	cmp	r3, #0
 800387e:	d05b      	beq.n	8003938 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003880:	4b9e      	ldr	r3, [pc, #632]	; (8003afc <HAL_RCC_OscConfig+0x664>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003888:	2b00      	cmp	r3, #0
 800388a:	d114      	bne.n	80038b6 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800388c:	f7ff fab2 	bl	8002df4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003890:	f7fd fcf8 	bl	8001284 <HAL_GetTick>
 8003894:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003896:	e008      	b.n	80038aa <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003898:	f7fd fcf4 	bl	8001284 <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d901      	bls.n	80038aa <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e124      	b.n	8003af4 <HAL_RCC_OscConfig+0x65c>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038aa:	4b94      	ldr	r3, [pc, #592]	; (8003afc <HAL_RCC_OscConfig+0x664>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d0f0      	beq.n	8003898 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d102      	bne.n	80038c4 <HAL_RCC_OscConfig+0x42c>
 80038be:	f7ff fb30 	bl	8002f22 <LL_RCC_LSE_Enable>
 80038c2:	e00c      	b.n	80038de <HAL_RCC_OscConfig+0x446>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	2b05      	cmp	r3, #5
 80038ca:	d104      	bne.n	80038d6 <HAL_RCC_OscConfig+0x43e>
 80038cc:	f7ff fb4b 	bl	8002f66 <LL_RCC_LSE_EnableBypass>
 80038d0:	f7ff fb27 	bl	8002f22 <LL_RCC_LSE_Enable>
 80038d4:	e003      	b.n	80038de <HAL_RCC_OscConfig+0x446>
 80038d6:	f7ff fb35 	bl	8002f44 <LL_RCC_LSE_Disable>
 80038da:	f7ff fb55 	bl	8002f88 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d014      	beq.n	8003910 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038e6:	f7fd fccd 	bl	8001284 <HAL_GetTick>
 80038ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80038ec:	e00a      	b.n	8003904 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038ee:	f7fd fcc9 	bl	8001284 <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d901      	bls.n	8003904 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e0f7      	b.n	8003af4 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() == 0U)
 8003904:	f7ff fb51 	bl	8002faa <LL_RCC_LSE_IsReady>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d0ef      	beq.n	80038ee <HAL_RCC_OscConfig+0x456>
 800390e:	e013      	b.n	8003938 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003910:	f7fd fcb8 	bl	8001284 <HAL_GetTick>
 8003914:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8003916:	e00a      	b.n	800392e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003918:	f7fd fcb4 	bl	8001284 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	f241 3288 	movw	r2, #5000	; 0x1388
 8003926:	4293      	cmp	r3, r2
 8003928:	d901      	bls.n	800392e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e0e2      	b.n	8003af4 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() != 0U)
 800392e:	f7ff fb3c 	bl	8002faa <LL_RCC_LSE_IsReady>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d1ef      	bne.n	8003918 <HAL_RCC_OscConfig+0x480>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800393c:	2b00      	cmp	r3, #0
 800393e:	f000 80d8 	beq.w	8003af2 <HAL_RCC_OscConfig+0x65a>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003942:	f7ff fc44 	bl	80031ce <LL_RCC_GetSysClkSource>
 8003946:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8003948:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003954:	2b02      	cmp	r3, #2
 8003956:	f040 80a6 	bne.w	8003aa6 <HAL_RCC_OscConfig+0x60e>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f003 0203 	and.w	r2, r3, #3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003964:	429a      	cmp	r2, r3
 8003966:	d123      	bne.n	80039b0 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003972:	429a      	cmp	r2, r3
 8003974:	d11c      	bne.n	80039b0 <HAL_RCC_OscConfig+0x518>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	0a1b      	lsrs	r3, r3, #8
 800397a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003982:	429a      	cmp	r2, r3
 8003984:	d114      	bne.n	80039b0 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003990:	429a      	cmp	r2, r3
 8003992:	d10d      	bne.n	80039b0 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800399e:	429a      	cmp	r2, r3
 80039a0:	d106      	bne.n	80039b0 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d054      	beq.n	8003a5a <HAL_RCC_OscConfig+0x5c2>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	2b0c      	cmp	r3, #12
 80039b4:	d04f      	beq.n	8003a56 <HAL_RCC_OscConfig+0x5be>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80039b6:	f7ff fcc0 	bl	800333a <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80039ba:	f7fd fc63 	bl	8001284 <HAL_GetTick>
 80039be:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039c0:	e008      	b.n	80039d4 <HAL_RCC_OscConfig+0x53c>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039c2:	f7fd fc5f 	bl	8001284 <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d901      	bls.n	80039d4 <HAL_RCC_OscConfig+0x53c>
              {
                return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e08f      	b.n	8003af4 <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d1ef      	bne.n	80039c2 <HAL_RCC_OscConfig+0x52a>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039e6:	68da      	ldr	r2, [r3, #12]
 80039e8:	4b45      	ldr	r3, [pc, #276]	; (8003b00 <HAL_RCC_OscConfig+0x668>)
 80039ea:	4013      	ands	r3, r2
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80039f4:	4311      	orrs	r1, r2
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80039fa:	0212      	lsls	r2, r2, #8
 80039fc:	4311      	orrs	r1, r2
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a02:	4311      	orrs	r1, r2
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003a08:	4311      	orrs	r1, r2
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003a0e:	430a      	orrs	r2, r1
 8003a10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a14:	4313      	orrs	r3, r2
 8003a16:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003a18:	f7ff fc80 	bl	800331c <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a2a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a2c:	f7fd fc2a 	bl	8001284 <HAL_GetTick>
 8003a30:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a32:	e008      	b.n	8003a46 <HAL_RCC_OscConfig+0x5ae>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a34:	f7fd fc26 	bl	8001284 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d901      	bls.n	8003a46 <HAL_RCC_OscConfig+0x5ae>
              {
                return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e056      	b.n	8003af4 <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d0ef      	beq.n	8003a34 <HAL_RCC_OscConfig+0x59c>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a54:	e04d      	b.n	8003af2 <HAL_RCC_OscConfig+0x65a>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e04c      	b.n	8003af4 <HAL_RCC_OscConfig+0x65c>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d144      	bne.n	8003af2 <HAL_RCC_OscConfig+0x65a>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003a68:	f7ff fc58 	bl	800331c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a7a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003a7c:	f7fd fc02 	bl	8001284 <HAL_GetTick>
 8003a80:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a82:	e008      	b.n	8003a96 <HAL_RCC_OscConfig+0x5fe>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a84:	f7fd fbfe 	bl	8001284 <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d901      	bls.n	8003a96 <HAL_RCC_OscConfig+0x5fe>
            {
              return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e02e      	b.n	8003af4 <HAL_RCC_OscConfig+0x65c>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d0ef      	beq.n	8003a84 <HAL_RCC_OscConfig+0x5ec>
 8003aa4:	e025      	b.n	8003af2 <HAL_RCC_OscConfig+0x65a>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	2b0c      	cmp	r3, #12
 8003aaa:	d020      	beq.n	8003aee <HAL_RCC_OscConfig+0x656>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aac:	f7ff fc45 	bl	800333a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab0:	f7fd fbe8 	bl	8001284 <HAL_GetTick>
 8003ab4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ab6:	e008      	b.n	8003aca <HAL_RCC_OscConfig+0x632>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ab8:	f7fd fbe4 	bl	8001284 <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d901      	bls.n	8003aca <HAL_RCC_OscConfig+0x632>
          {
            return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e014      	b.n	8003af4 <HAL_RCC_OscConfig+0x65c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003aca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d1ef      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x620>

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
#else
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLREN));
 8003ad8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ae2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ae6:	f023 0303 	bic.w	r3, r3, #3
 8003aea:	60d3      	str	r3, [r2, #12]
 8003aec:	e001      	b.n	8003af2 <HAL_RCC_OscConfig+0x65a>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e000      	b.n	8003af4 <HAL_RCC_OscConfig+0x65c>
      }
    }
  }
  return HAL_OK;
 8003af2:	2300      	movs	r3, #0
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3734      	adds	r7, #52	; 0x34
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd90      	pop	{r4, r7, pc}
 8003afc:	58000400 	.word	0x58000400
 8003b00:	11c1808c 	.word	0x11c1808c

08003b04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d101      	bne.n	8003b18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e12d      	b.n	8003d74 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b18:	4b98      	ldr	r3, [pc, #608]	; (8003d7c <HAL_RCC_ClockConfig+0x278>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0307 	and.w	r3, r3, #7
 8003b20:	683a      	ldr	r2, [r7, #0]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d91b      	bls.n	8003b5e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b26:	4b95      	ldr	r3, [pc, #596]	; (8003d7c <HAL_RCC_ClockConfig+0x278>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f023 0207 	bic.w	r2, r3, #7
 8003b2e:	4993      	ldr	r1, [pc, #588]	; (8003d7c <HAL_RCC_ClockConfig+0x278>)
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b36:	f7fd fba5 	bl	8001284 <HAL_GetTick>
 8003b3a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b3c:	e008      	b.n	8003b50 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003b3e:	f7fd fba1 	bl	8001284 <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d901      	bls.n	8003b50 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e111      	b.n	8003d74 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b50:	4b8a      	ldr	r3, [pc, #552]	; (8003d7c <HAL_RCC_ClockConfig+0x278>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0307 	and.w	r3, r3, #7
 8003b58:	683a      	ldr	r2, [r7, #0]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d1ef      	bne.n	8003b3e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0302 	and.w	r3, r3, #2
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d016      	beq.n	8003b98 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7ff fb39 	bl	80031e6 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003b74:	f7fd fb86 	bl	8001284 <HAL_GetTick>
 8003b78:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003b7a:	e008      	b.n	8003b8e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003b7c:	f7fd fb82 	bl	8001284 <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d901      	bls.n	8003b8e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e0f2      	b.n	8003d74 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003b8e:	f7ff fc26 	bl	80033de <LL_RCC_IsActiveFlag_HPRE>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d0f1      	beq.n	8003b7c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0320 	and.w	r3, r3, #32
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d016      	beq.n	8003bd2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	695b      	ldr	r3, [r3, #20]
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f7ff fb30 	bl	800320e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003bae:	f7fd fb69 	bl	8001284 <HAL_GetTick>
 8003bb2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003bb4:	e008      	b.n	8003bc8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003bb6:	f7fd fb65 	bl	8001284 <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d901      	bls.n	8003bc8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e0d5      	b.n	8003d74 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003bc8:	f7ff fc1b 	bl	8003402 <LL_RCC_IsActiveFlag_C2HPRE>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d0f1      	beq.n	8003bb6 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d016      	beq.n	8003c0c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	699b      	ldr	r3, [r3, #24]
 8003be2:	4618      	mov	r0, r3
 8003be4:	f7ff fb29 	bl	800323a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003be8:	f7fd fb4c 	bl	8001284 <HAL_GetTick>
 8003bec:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003bee:	e008      	b.n	8003c02 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003bf0:	f7fd fb48 	bl	8001284 <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d901      	bls.n	8003c02 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e0b8      	b.n	8003d74 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003c02:	f7ff fc11 	bl	8003428 <LL_RCC_IsActiveFlag_SHDHPRE>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d0f1      	beq.n	8003bf0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0304 	and.w	r3, r3, #4
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d016      	beq.n	8003c46 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f7ff fb23 	bl	8003268 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003c22:	f7fd fb2f 	bl	8001284 <HAL_GetTick>
 8003c26:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003c28:	e008      	b.n	8003c3c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003c2a:	f7fd fb2b 	bl	8001284 <HAL_GetTick>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d901      	bls.n	8003c3c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	e09b      	b.n	8003d74 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003c3c:	f7ff fc07 	bl	800344e <LL_RCC_IsActiveFlag_PPRE1>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d0f1      	beq.n	8003c2a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0308 	and.w	r3, r3, #8
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d017      	beq.n	8003c82 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	00db      	lsls	r3, r3, #3
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f7ff fb19 	bl	8003290 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003c5e:	f7fd fb11 	bl	8001284 <HAL_GetTick>
 8003c62:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003c64:	e008      	b.n	8003c78 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003c66:	f7fd fb0d 	bl	8001284 <HAL_GetTick>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d901      	bls.n	8003c78 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e07d      	b.n	8003d74 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003c78:	f7ff fbfb 	bl	8003472 <LL_RCC_IsActiveFlag_PPRE2>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d0f1      	beq.n	8003c66 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0301 	and.w	r3, r3, #1
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d043      	beq.n	8003d16 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d106      	bne.n	8003ca4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003c96:	f7ff f8ed 	bl	8002e74 <LL_RCC_HSE_IsReady>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d11e      	bne.n	8003cde <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e067      	b.n	8003d74 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	2b03      	cmp	r3, #3
 8003caa:	d106      	bne.n	8003cba <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003cac:	f7ff fb54 	bl	8003358 <LL_RCC_PLL_IsReady>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d113      	bne.n	8003cde <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e05c      	b.n	8003d74 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d106      	bne.n	8003cd0 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003cc2:	f7ff fa21 	bl	8003108 <LL_RCC_MSI_IsReady>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d108      	bne.n	8003cde <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e051      	b.n	8003d74 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003cd0:	f7ff f900 	bl	8002ed4 <LL_RCC_HSI_IsReady>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d101      	bne.n	8003cde <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e04a      	b.n	8003d74 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7ff fa5f 	bl	80031a6 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ce8:	f7fd facc 	bl	8001284 <HAL_GetTick>
 8003cec:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cee:	e00a      	b.n	8003d06 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cf0:	f7fd fac8 	bl	8001284 <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d901      	bls.n	8003d06 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e036      	b.n	8003d74 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d06:	f7ff fa62 	bl	80031ce <LL_RCC_GetSysClkSource>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d1ec      	bne.n	8003cf0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d16:	4b19      	ldr	r3, [pc, #100]	; (8003d7c <HAL_RCC_ClockConfig+0x278>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0307 	and.w	r3, r3, #7
 8003d1e:	683a      	ldr	r2, [r7, #0]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d21b      	bcs.n	8003d5c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d24:	4b15      	ldr	r3, [pc, #84]	; (8003d7c <HAL_RCC_ClockConfig+0x278>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f023 0207 	bic.w	r2, r3, #7
 8003d2c:	4913      	ldr	r1, [pc, #76]	; (8003d7c <HAL_RCC_ClockConfig+0x278>)
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d34:	f7fd faa6 	bl	8001284 <HAL_GetTick>
 8003d38:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d3a:	e008      	b.n	8003d4e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003d3c:	f7fd faa2 	bl	8001284 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d901      	bls.n	8003d4e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e012      	b.n	8003d74 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d4e:	4b0b      	ldr	r3, [pc, #44]	; (8003d7c <HAL_RCC_ClockConfig+0x278>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0307 	and.w	r3, r3, #7
 8003d56:	683a      	ldr	r2, [r7, #0]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d1ef      	bne.n	8003d3c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003d5c:	f000 f880 	bl	8003e60 <HAL_RCC_GetHCLKFreq>
 8003d60:	4603      	mov	r3, r0
 8003d62:	4a07      	ldr	r2, [pc, #28]	; (8003d80 <HAL_RCC_ClockConfig+0x27c>)
 8003d64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8003d66:	f7fd fa99 	bl	800129c <HAL_GetTickPrio>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f7fd fa3b 	bl	80011e8 <HAL_InitTick>
 8003d72:	4603      	mov	r3, r0
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3710      	adds	r7, #16
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	58004000 	.word	0x58004000
 8003d80:	20000008 	.word	0x20000008

08003d84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d84:	b590      	push	{r4, r7, lr}
 8003d86:	b085      	sub	sp, #20
 8003d88:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d8a:	f7ff fa20 	bl	80031ce <LL_RCC_GetSysClkSource>
 8003d8e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d10a      	bne.n	8003dac <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003d96:	f7ff f9dc 	bl	8003152 <LL_RCC_MSI_GetRange>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	091b      	lsrs	r3, r3, #4
 8003d9e:	f003 030f 	and.w	r3, r3, #15
 8003da2:	4a2b      	ldr	r2, [pc, #172]	; (8003e50 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003da4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003da8:	60fb      	str	r3, [r7, #12]
 8003daa:	e04b      	b.n	8003e44 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2b04      	cmp	r3, #4
 8003db0:	d102      	bne.n	8003db8 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003db2:	4b28      	ldr	r3, [pc, #160]	; (8003e54 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003db4:	60fb      	str	r3, [r7, #12]
 8003db6:	e045      	b.n	8003e44 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2b08      	cmp	r3, #8
 8003dbc:	d10a      	bne.n	8003dd4 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003dbe:	f7ff f829 	bl	8002e14 <LL_RCC_HSE_IsEnabledDiv2>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d102      	bne.n	8003dce <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003dc8:	4b23      	ldr	r3, [pc, #140]	; (8003e58 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003dca:	60fb      	str	r3, [r7, #12]
 8003dcc:	e03a      	b.n	8003e44 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003dce:	4b23      	ldr	r3, [pc, #140]	; (8003e5c <HAL_RCC_GetSysClockFreq+0xd8>)
 8003dd0:	60fb      	str	r3, [r7, #12]
 8003dd2:	e037      	b.n	8003e44 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003dd4:	f7ff faf7 	bl	80033c6 <LL_RCC_PLL_GetMainSource>
 8003dd8:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d003      	beq.n	8003de8 <HAL_RCC_GetSysClockFreq+0x64>
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	2b03      	cmp	r3, #3
 8003de4:	d003      	beq.n	8003dee <HAL_RCC_GetSysClockFreq+0x6a>
 8003de6:	e00d      	b.n	8003e04 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003de8:	4b1a      	ldr	r3, [pc, #104]	; (8003e54 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003dea:	60bb      	str	r3, [r7, #8]
        break;
 8003dec:	e015      	b.n	8003e1a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003dee:	f7ff f811 	bl	8002e14 <LL_RCC_HSE_IsEnabledDiv2>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d102      	bne.n	8003dfe <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003df8:	4b17      	ldr	r3, [pc, #92]	; (8003e58 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003dfa:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003dfc:	e00d      	b.n	8003e1a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8003dfe:	4b17      	ldr	r3, [pc, #92]	; (8003e5c <HAL_RCC_GetSysClockFreq+0xd8>)
 8003e00:	60bb      	str	r3, [r7, #8]
        break;
 8003e02:	e00a      	b.n	8003e1a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003e04:	f7ff f9a5 	bl	8003152 <LL_RCC_MSI_GetRange>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	091b      	lsrs	r3, r3, #4
 8003e0c:	f003 030f 	and.w	r3, r3, #15
 8003e10:	4a0f      	ldr	r2, [pc, #60]	; (8003e50 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003e12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e16:	60bb      	str	r3, [r7, #8]
        break;
 8003e18:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8003e1a:	f7ff faaf 	bl	800337c <LL_RCC_PLL_GetN>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	fb03 f402 	mul.w	r4, r3, r2
 8003e26:	f7ff fac2 	bl	80033ae <LL_RCC_PLL_GetDivider>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	091b      	lsrs	r3, r3, #4
 8003e2e:	3301      	adds	r3, #1
 8003e30:	fbb4 f4f3 	udiv	r4, r4, r3
 8003e34:	f7ff faaf 	bl	8003396 <LL_RCC_PLL_GetR>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	0f5b      	lsrs	r3, r3, #29
 8003e3c:	3301      	adds	r3, #1
 8003e3e:	fbb4 f3f3 	udiv	r3, r4, r3
 8003e42:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003e44:	68fb      	ldr	r3, [r7, #12]
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3714      	adds	r7, #20
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd90      	pop	{r4, r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	0800749c 	.word	0x0800749c
 8003e54:	00f42400 	.word	0x00f42400
 8003e58:	003d0900 	.word	0x003d0900
 8003e5c:	007a1200 	.word	0x007a1200

08003e60 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e60:	b598      	push	{r3, r4, r7, lr}
 8003e62:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003e64:	f7ff ff8e 	bl	8003d84 <HAL_RCC_GetSysClockFreq>
 8003e68:	4604      	mov	r4, r0
 8003e6a:	f7ff fa25 	bl	80032b8 <LL_RCC_GetAHBPrescaler>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	091b      	lsrs	r3, r3, #4
 8003e72:	f003 030f 	and.w	r3, r3, #15
 8003e76:	4a03      	ldr	r2, [pc, #12]	; (8003e84 <HAL_RCC_GetHCLKFreq+0x24>)
 8003e78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e7c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	bd98      	pop	{r3, r4, r7, pc}
 8003e84:	0800743c 	.word	0x0800743c

08003e88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e88:	b598      	push	{r3, r4, r7, lr}
 8003e8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003e8c:	f7ff ffe8 	bl	8003e60 <HAL_RCC_GetHCLKFreq>
 8003e90:	4604      	mov	r4, r0
 8003e92:	f7ff fa2b 	bl	80032ec <LL_RCC_GetAPB1Prescaler>
 8003e96:	4603      	mov	r3, r0
 8003e98:	0a1b      	lsrs	r3, r3, #8
 8003e9a:	f003 0307 	and.w	r3, r3, #7
 8003e9e:	4a04      	ldr	r2, [pc, #16]	; (8003eb0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003ea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ea4:	f003 031f 	and.w	r3, r3, #31
 8003ea8:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	bd98      	pop	{r3, r4, r7, pc}
 8003eb0:	0800747c 	.word	0x0800747c

08003eb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003eb4:	b598      	push	{r3, r4, r7, lr}
 8003eb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003eb8:	f7ff ffd2 	bl	8003e60 <HAL_RCC_GetHCLKFreq>
 8003ebc:	4604      	mov	r4, r0
 8003ebe:	f7ff fa21 	bl	8003304 <LL_RCC_GetAPB2Prescaler>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	0adb      	lsrs	r3, r3, #11
 8003ec6:	f003 0307 	and.w	r3, r3, #7
 8003eca:	4a04      	ldr	r2, [pc, #16]	; (8003edc <HAL_RCC_GetPCLK2Freq+0x28>)
 8003ecc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ed0:	f003 031f 	and.w	r3, r3, #31
 8003ed4:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	bd98      	pop	{r3, r4, r7, pc}
 8003edc:	0800747c 	.word	0x0800747c

08003ee0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2bb0      	cmp	r3, #176	; 0xb0
 8003eec:	d903      	bls.n	8003ef6 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8003eee:	4b14      	ldr	r3, [pc, #80]	; (8003f40 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8003ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef2:	60fb      	str	r3, [r7, #12]
 8003ef4:	e007      	b.n	8003f06 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	091b      	lsrs	r3, r3, #4
 8003efa:	f003 030f 	and.w	r3, r3, #15
 8003efe:	4a10      	ldr	r2, [pc, #64]	; (8003f40 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8003f00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f04:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003f06:	f7ff f9e3 	bl	80032d0 <LL_RCC_GetAHB4Prescaler>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	091b      	lsrs	r3, r3, #4
 8003f0e:	f003 030f 	and.w	r3, r3, #15
 8003f12:	4a0c      	ldr	r2, [pc, #48]	; (8003f44 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003f14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f18:	68fa      	ldr	r2, [r7, #12]
 8003f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f1e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	4a09      	ldr	r2, [pc, #36]	; (8003f48 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003f24:	fba2 2303 	umull	r2, r3, r2, r3
 8003f28:	0c9b      	lsrs	r3, r3, #18
 8003f2a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f000 f80c 	bl	8003f4c <RCC_SetFlashLatency>
 8003f34:	4603      	mov	r3, r0
#endif /* PWR_CR1_VOS */
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3710      	adds	r7, #16
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	0800749c 	.word	0x0800749c
 8003f44:	0800743c 	.word	0x0800743c
 8003f48:	431bde83 	.word	0x431bde83

08003f4c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003f4c:	b590      	push	{r4, r7, lr}
 8003f4e:	b08f      	sub	sp, #60	; 0x3c
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8003f56:	4b24      	ldr	r3, [pc, #144]	; (8003fe8 <RCC_SetFlashLatency+0x9c>)
 8003f58:	f107 041c 	add.w	r4, r7, #28
 8003f5c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003f5e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8003f62:	4b22      	ldr	r3, [pc, #136]	; (8003fec <RCC_SetFlashLatency+0xa0>)
 8003f64:	f107 040c 	add.w	r4, r7, #12
 8003f68:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003f6a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003f6e:	2300      	movs	r3, #0
 8003f70:	637b      	str	r3, [r7, #52]	; 0x34
        break;
      }
    }
  }
#else
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003f72:	2300      	movs	r3, #0
 8003f74:	633b      	str	r3, [r7, #48]	; 0x30
 8003f76:	e013      	b.n	8003fa0 <RCC_SetFlashLatency+0x54>
  {
    if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	3338      	adds	r3, #56	; 0x38
 8003f7e:	443b      	add	r3, r7
 8003f80:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d807      	bhi.n	8003f9a <RCC_SetFlashLatency+0x4e>
    {
      latency = FLASH_LATENCY_RANGE[index];
 8003f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	3338      	adds	r3, #56	; 0x38
 8003f90:	443b      	add	r3, r7
 8003f92:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003f96:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8003f98:	e005      	b.n	8003fa6 <RCC_SetFlashLatency+0x5a>
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	633b      	str	r3, [r7, #48]	; 0x30
 8003fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa2:	2b03      	cmp	r3, #3
 8003fa4:	d9e8      	bls.n	8003f78 <RCC_SetFlashLatency+0x2c>
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8003fa6:	4b12      	ldr	r3, [pc, #72]	; (8003ff0 <RCC_SetFlashLatency+0xa4>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f023 0207 	bic.w	r2, r3, #7
 8003fae:	4910      	ldr	r1, [pc, #64]	; (8003ff0 <RCC_SetFlashLatency+0xa4>)
 8003fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003fb6:	f7fd f965 	bl	8001284 <HAL_GetTick>
 8003fba:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003fbc:	e008      	b.n	8003fd0 <RCC_SetFlashLatency+0x84>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003fbe:	f7fd f961 	bl	8001284 <HAL_GetTick>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d901      	bls.n	8003fd0 <RCC_SetFlashLatency+0x84>
    {
      return HAL_TIMEOUT;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	e007      	b.n	8003fe0 <RCC_SetFlashLatency+0x94>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003fd0:	4b07      	ldr	r3, [pc, #28]	; (8003ff0 <RCC_SetFlashLatency+0xa4>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0307 	and.w	r3, r3, #7
 8003fd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d1ef      	bne.n	8003fbe <RCC_SetFlashLatency+0x72>
    }
  }
  return HAL_OK;
 8003fde:	2300      	movs	r3, #0
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	373c      	adds	r7, #60	; 0x3c
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd90      	pop	{r4, r7, pc}
 8003fe8:	0800741c 	.word	0x0800741c
 8003fec:	0800742c 	.word	0x0800742c
 8003ff0:	58004000 	.word	0x58004000

08003ff4 <LL_RCC_LSE_IsEnabled>:
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003ff8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004000:	f003 0301 	and.w	r3, r3, #1
 8004004:	2b01      	cmp	r3, #1
 8004006:	d101      	bne.n	800400c <LL_RCC_LSE_IsEnabled+0x18>
 8004008:	2301      	movs	r3, #1
 800400a:	e000      	b.n	800400e <LL_RCC_LSE_IsEnabled+0x1a>
 800400c:	2300      	movs	r3, #0
}
 800400e:	4618      	mov	r0, r3
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr

08004018 <LL_RCC_LSE_IsReady>:
{
 8004018:	b480      	push	{r7}
 800401a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800401c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004020:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004024:	f003 0302 	and.w	r3, r3, #2
 8004028:	2b02      	cmp	r3, #2
 800402a:	d101      	bne.n	8004030 <LL_RCC_LSE_IsReady+0x18>
 800402c:	2301      	movs	r3, #1
 800402e:	e000      	b.n	8004032 <LL_RCC_LSE_IsReady+0x1a>
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <LL_RCC_SetRFWKPClockSource>:
{
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8004044:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004048:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800404c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004050:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	4313      	orrs	r3, r2
 8004058:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800405c:	bf00      	nop
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <LL_RCC_SetSMPSClockSource>:
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8004070:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004076:	f023 0203 	bic.w	r2, r3, #3
 800407a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4313      	orrs	r3, r2
 8004082:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004084:	bf00      	nop
 8004086:	370c      	adds	r7, #12
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <LL_RCC_SetSMPSPrescaler>:
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8004098:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800409c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80040a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	624b      	str	r3, [r1, #36]	; 0x24
}
 80040ac:	bf00      	nop
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <LL_RCC_SetUSARTClockSource>:
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80040c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040c8:	f023 0203 	bic.w	r2, r3, #3
 80040cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80040d8:	bf00      	nop
 80040da:	370c      	adds	r7, #12
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr

080040e4 <LL_RCC_SetLPUARTClockSource>:
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80040ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040f4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80040f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4313      	orrs	r3, r2
 8004100:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004104:	bf00      	nop
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <LL_RCC_SetI2CClockSource>:
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004118:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800411c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	091b      	lsrs	r3, r3, #4
 8004124:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004128:	43db      	mvns	r3, r3
 800412a:	401a      	ands	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	011b      	lsls	r3, r3, #4
 8004130:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004134:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004138:	4313      	orrs	r3, r2
 800413a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800413e:	bf00      	nop
 8004140:	370c      	adds	r7, #12
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr

0800414a <LL_RCC_SetLPTIMClockSource>:
{
 800414a:	b480      	push	{r7}
 800414c:	b083      	sub	sp, #12
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004152:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004156:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	0c1b      	lsrs	r3, r3, #16
 800415e:	041b      	lsls	r3, r3, #16
 8004160:	43db      	mvns	r3, r3
 8004162:	401a      	ands	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	041b      	lsls	r3, r3, #16
 8004168:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800416c:	4313      	orrs	r3, r2
 800416e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004172:	bf00      	nop
 8004174:	370c      	adds	r7, #12
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr

0800417e <LL_RCC_SetRNGClockSource>:
{
 800417e:	b480      	push	{r7}
 8004180:	b083      	sub	sp, #12
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004186:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800418a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800418e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004192:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4313      	orrs	r3, r2
 800419a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800419e:	bf00      	nop
 80041a0:	370c      	adds	r7, #12
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr

080041aa <LL_RCC_SetCLK48ClockSource>:
{
 80041aa:	b480      	push	{r7}
 80041ac:	b083      	sub	sp, #12
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80041b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80041be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80041ca:	bf00      	nop
 80041cc:	370c      	adds	r7, #12
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr

080041d6 <LL_RCC_SetADCClockSource>:
{
 80041d6:	b480      	push	{r7}
 80041d8:	b083      	sub	sp, #12
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80041de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041e6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80041ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80041f6:	bf00      	nop
 80041f8:	370c      	adds	r7, #12
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr

08004202 <LL_RCC_SetRTCClockSource>:
{
 8004202:	b480      	push	{r7}
 8004204:	b083      	sub	sp, #12
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800420a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800420e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004212:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004216:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4313      	orrs	r3, r2
 800421e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004222:	bf00      	nop
 8004224:	370c      	adds	r7, #12
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr

0800422e <LL_RCC_GetRTCClockSource>:
{
 800422e:	b480      	push	{r7}
 8004230:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004232:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800423a:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800423e:	4618      	mov	r0, r3
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <LL_RCC_ForceBackupDomainReset>:
{
 8004248:	b480      	push	{r7}
 800424a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800424c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004254:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004258:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800425c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004260:	bf00      	nop
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr

0800426a <LL_RCC_ReleaseBackupDomainReset>:
{
 800426a:	b480      	push	{r7}
 800426c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800426e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004276:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800427a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800427e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004282:	bf00      	nop
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b088      	sub	sp, #32
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8004294:	2300      	movs	r3, #0
 8004296:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004298:	2300      	movs	r3, #0
 800429a:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d046      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80042a8:	f7ff ffc1 	bl	800422e <LL_RCC_GetRTCClockSource>
 80042ac:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6a1b      	ldr	r3, [r3, #32]
 80042b2:	69ba      	ldr	r2, [r7, #24]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d03c      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80042b8:	f7fe fd9c 	bl	8002df4 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d105      	bne.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x42>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a1b      	ldr	r3, [r3, #32]
 80042c6:	4618      	mov	r0, r3
 80042c8:	f7ff ff9b 	bl	8004202 <LL_RCC_SetRTCClockSource>
 80042cc:	e02e      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0xa0>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80042ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042d6:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80042d8:	f7ff ffb6 	bl	8004248 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80042dc:	f7ff ffc5 	bl	800426a <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a1b      	ldr	r3, [r3, #32]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80042ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80042f8:	f7ff fe7c 	bl	8003ff4 <LL_RCC_LSE_IsEnabled>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d114      	bne.n	800432c <HAL_RCCEx_PeriphCLKConfig+0xa0>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004302:	f7fc ffbf 	bl	8001284 <HAL_GetTick>
 8004306:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8004308:	e00b      	b.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x96>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800430a:	f7fc ffbb 	bl	8001284 <HAL_GetTick>
 800430e:	4602      	mov	r2, r0
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	f241 3288 	movw	r2, #5000	; 0x1388
 8004318:	4293      	cmp	r3, r2
 800431a:	d902      	bls.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x96>
            {
              ret = HAL_TIMEOUT;
 800431c:	2303      	movs	r3, #3
 800431e:	77fb      	strb	r3, [r7, #31]
              break;
 8004320:	e004      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0xa0>
          while (LL_RCC_LSE_IsReady() != 1U)
 8004322:	f7ff fe79 	bl	8004018 <LL_RCC_LSE_IsReady>
 8004326:	4603      	mov	r3, r0
 8004328:	2b01      	cmp	r3, #1
 800432a:	d1ee      	bne.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x7e>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800432c:	7ffb      	ldrb	r3, [r7, #31]
 800432e:	77bb      	strb	r3, [r7, #30]
 8004330:	e001      	b.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0xaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004332:	7ffb      	ldrb	r3, [r7, #31]
 8004334:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0301 	and.w	r3, r3, #1
 800433e:	2b00      	cmp	r3, #0
 8004340:	d004      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	4618      	mov	r0, r3
 8004348:	f7ff feb6 	bl	80040b8 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0302 	and.w	r3, r3, #2
 8004354:	2b00      	cmp	r3, #0
 8004356:	d004      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	4618      	mov	r0, r3
 800435e:	f7ff fec1 	bl	80040e4 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0310 	and.w	r3, r3, #16
 800436a:	2b00      	cmp	r3, #0
 800436c:	d004      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	4618      	mov	r0, r3
 8004374:	f7ff fee9 	bl	800414a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0320 	and.w	r3, r3, #32
 8004380:	2b00      	cmp	r3, #0
 8004382:	d004      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	695b      	ldr	r3, [r3, #20]
 8004388:	4618      	mov	r0, r3
 800438a:	f7ff fede 	bl	800414a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0304 	and.w	r3, r3, #4
 8004396:	2b00      	cmp	r3, #0
 8004398:	d004      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	4618      	mov	r0, r3
 80043a0:	f7ff feb6 	bl	8004110 <LL_RCC_SetI2CClockSource>
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d02b      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	699b      	ldr	r3, [r3, #24]
 80043b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043b8:	d008      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x140>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	699b      	ldr	r3, [r3, #24]
 80043be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043c2:	d003      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x140>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	699b      	ldr	r3, [r3, #24]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d105      	bne.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	699b      	ldr	r3, [r3, #24]
 80043d0:	4618      	mov	r0, r3
 80043d2:	f7ff fed4 	bl	800417e <LL_RCC_SetRNGClockSource>
 80043d6:	e00a      	b.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x162>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	699b      	ldr	r3, [r3, #24]
 80043dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043e0:	60fb      	str	r3, [r7, #12]
 80043e2:	2000      	movs	r0, #0
 80043e4:	f7ff fecb 	bl	800417e <LL_RCC_SetRNGClockSource>
 80043e8:	68f8      	ldr	r0, [r7, #12]
 80043ea:	f7ff fede 	bl	80041aa <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	699b      	ldr	r3, [r3, #24]
 80043f2:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80043f6:	d107      	bne.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80043f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004402:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004406:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004410:	2b00      	cmp	r3, #0
 8004412:	d011      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	69db      	ldr	r3, [r3, #28]
 8004418:	4618      	mov	r0, r3
 800441a:	f7ff fedc 	bl	80041d6 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	69db      	ldr	r3, [r3, #28]
 8004422:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004426:	d107      	bne.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004428:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004432:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004436:	60d3      	str	r3, [r2, #12]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d004      	beq.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004448:	4618      	mov	r0, r3
 800444a:	f7ff fdf7 	bl	800403c <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d009      	beq.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800445e:	4618      	mov	r0, r3
 8004460:	f7ff fe16 	bl	8004090 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004468:	4618      	mov	r0, r3
 800446a:	f7ff fdfd 	bl	8004068 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800446e:	7fbb      	ldrb	r3, [r7, #30]
}
 8004470:	4618      	mov	r0, r3
 8004472:	3720      	adds	r7, #32
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}

08004478 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d101      	bne.n	800448a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e049      	b.n	800451e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004490:	b2db      	uxtb	r3, r3
 8004492:	2b00      	cmp	r3, #0
 8004494:	d106      	bne.n	80044a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f7fc fc7a 	bl	8000d98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2202      	movs	r2, #2
 80044a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	3304      	adds	r3, #4
 80044b4:	4619      	mov	r1, r3
 80044b6:	4610      	mov	r0, r2
 80044b8:	f000 fcd4 	bl	8004e64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3708      	adds	r7, #8
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
	...

08004528 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004528:	b480      	push	{r7}
 800452a:	b085      	sub	sp, #20
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004536:	b2db      	uxtb	r3, r3
 8004538:	2b01      	cmp	r3, #1
 800453a:	d001      	beq.n	8004540 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e02e      	b.n	800459e <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2202      	movs	r2, #2
 8004544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a17      	ldr	r2, [pc, #92]	; (80045ac <HAL_TIM_Base_Start+0x84>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d004      	beq.n	800455c <HAL_TIM_Base_Start+0x34>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800455a:	d115      	bne.n	8004588 <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	689a      	ldr	r2, [r3, #8]
 8004562:	4b13      	ldr	r3, [pc, #76]	; (80045b0 <HAL_TIM_Base_Start+0x88>)
 8004564:	4013      	ands	r3, r2
 8004566:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2b06      	cmp	r3, #6
 800456c:	d015      	beq.n	800459a <HAL_TIM_Base_Start+0x72>
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004574:	d011      	beq.n	800459a <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f042 0201 	orr.w	r2, r2, #1
 8004584:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004586:	e008      	b.n	800459a <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f042 0201 	orr.w	r2, r2, #1
 8004596:	601a      	str	r2, [r3, #0]
 8004598:	e000      	b.n	800459c <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800459a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800459c:	2300      	movs	r3, #0
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3714      	adds	r7, #20
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr
 80045aa:	bf00      	nop
 80045ac:	40012c00 	.word	0x40012c00
 80045b0:	00010007 	.word	0x00010007

080045b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b082      	sub	sp, #8
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d101      	bne.n	80045c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e049      	b.n	800465a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d106      	bne.n	80045e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f000 f841 	bl	8004662 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2202      	movs	r2, #2
 80045e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	3304      	adds	r3, #4
 80045f0:	4619      	mov	r1, r3
 80045f2:	4610      	mov	r0, r2
 80045f4:	f000 fc36 	bl	8004e64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004658:	2300      	movs	r3, #0
}
 800465a:	4618      	mov	r0, r3
 800465c:	3708      	adds	r7, #8
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}

08004662 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004662:	b480      	push	{r7}
 8004664:	b083      	sub	sp, #12
 8004666:	af00      	add	r7, sp, #0
 8004668:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800466a:	bf00      	nop
 800466c:	370c      	adds	r7, #12
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr
	...

08004678 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d109      	bne.n	800469c <HAL_TIM_PWM_Start+0x24>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800468e:	b2db      	uxtb	r3, r3
 8004690:	2b01      	cmp	r3, #1
 8004692:	bf14      	ite	ne
 8004694:	2301      	movne	r3, #1
 8004696:	2300      	moveq	r3, #0
 8004698:	b2db      	uxtb	r3, r3
 800469a:	e03c      	b.n	8004716 <HAL_TIM_PWM_Start+0x9e>
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	2b04      	cmp	r3, #4
 80046a0:	d109      	bne.n	80046b6 <HAL_TIM_PWM_Start+0x3e>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	bf14      	ite	ne
 80046ae:	2301      	movne	r3, #1
 80046b0:	2300      	moveq	r3, #0
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	e02f      	b.n	8004716 <HAL_TIM_PWM_Start+0x9e>
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	2b08      	cmp	r3, #8
 80046ba:	d109      	bne.n	80046d0 <HAL_TIM_PWM_Start+0x58>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	bf14      	ite	ne
 80046c8:	2301      	movne	r3, #1
 80046ca:	2300      	moveq	r3, #0
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	e022      	b.n	8004716 <HAL_TIM_PWM_Start+0x9e>
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	2b0c      	cmp	r3, #12
 80046d4:	d109      	bne.n	80046ea <HAL_TIM_PWM_Start+0x72>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	2b01      	cmp	r3, #1
 80046e0:	bf14      	ite	ne
 80046e2:	2301      	movne	r3, #1
 80046e4:	2300      	moveq	r3, #0
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	e015      	b.n	8004716 <HAL_TIM_PWM_Start+0x9e>
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	2b10      	cmp	r3, #16
 80046ee:	d109      	bne.n	8004704 <HAL_TIM_PWM_Start+0x8c>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	bf14      	ite	ne
 80046fc:	2301      	movne	r3, #1
 80046fe:	2300      	moveq	r3, #0
 8004700:	b2db      	uxtb	r3, r3
 8004702:	e008      	b.n	8004716 <HAL_TIM_PWM_Start+0x9e>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800470a:	b2db      	uxtb	r3, r3
 800470c:	2b01      	cmp	r3, #1
 800470e:	bf14      	ite	ne
 8004710:	2301      	movne	r3, #1
 8004712:	2300      	moveq	r3, #0
 8004714:	b2db      	uxtb	r3, r3
 8004716:	2b00      	cmp	r3, #0
 8004718:	d001      	beq.n	800471e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e06a      	b.n	80047f4 <HAL_TIM_PWM_Start+0x17c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d104      	bne.n	800472e <HAL_TIM_PWM_Start+0xb6>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2202      	movs	r2, #2
 8004728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800472c:	e023      	b.n	8004776 <HAL_TIM_PWM_Start+0xfe>
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	2b04      	cmp	r3, #4
 8004732:	d104      	bne.n	800473e <HAL_TIM_PWM_Start+0xc6>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2202      	movs	r2, #2
 8004738:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800473c:	e01b      	b.n	8004776 <HAL_TIM_PWM_Start+0xfe>
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	2b08      	cmp	r3, #8
 8004742:	d104      	bne.n	800474e <HAL_TIM_PWM_Start+0xd6>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2202      	movs	r2, #2
 8004748:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800474c:	e013      	b.n	8004776 <HAL_TIM_PWM_Start+0xfe>
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	2b0c      	cmp	r3, #12
 8004752:	d104      	bne.n	800475e <HAL_TIM_PWM_Start+0xe6>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2202      	movs	r2, #2
 8004758:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800475c:	e00b      	b.n	8004776 <HAL_TIM_PWM_Start+0xfe>
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	2b10      	cmp	r3, #16
 8004762:	d104      	bne.n	800476e <HAL_TIM_PWM_Start+0xf6>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2202      	movs	r2, #2
 8004768:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800476c:	e003      	b.n	8004776 <HAL_TIM_PWM_Start+0xfe>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2202      	movs	r2, #2
 8004772:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	2201      	movs	r2, #1
 800477c:	6839      	ldr	r1, [r7, #0]
 800477e:	4618      	mov	r0, r3
 8004780:	f000 fe8a 	bl	8005498 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a1c      	ldr	r2, [pc, #112]	; (80047fc <HAL_TIM_PWM_Start+0x184>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d107      	bne.n	800479e <HAL_TIM_PWM_Start+0x126>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800479c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a16      	ldr	r2, [pc, #88]	; (80047fc <HAL_TIM_PWM_Start+0x184>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d004      	beq.n	80047b2 <HAL_TIM_PWM_Start+0x13a>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047b0:	d115      	bne.n	80047de <HAL_TIM_PWM_Start+0x166>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	689a      	ldr	r2, [r3, #8]
 80047b8:	4b11      	ldr	r3, [pc, #68]	; (8004800 <HAL_TIM_PWM_Start+0x188>)
 80047ba:	4013      	ands	r3, r2
 80047bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2b06      	cmp	r3, #6
 80047c2:	d015      	beq.n	80047f0 <HAL_TIM_PWM_Start+0x178>
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047ca:	d011      	beq.n	80047f0 <HAL_TIM_PWM_Start+0x178>
    {
      __HAL_TIM_ENABLE(htim);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f042 0201 	orr.w	r2, r2, #1
 80047da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047dc:	e008      	b.n	80047f0 <HAL_TIM_PWM_Start+0x178>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f042 0201 	orr.w	r2, r2, #1
 80047ec:	601a      	str	r2, [r3, #0]
 80047ee:	e000      	b.n	80047f2 <HAL_TIM_PWM_Start+0x17a>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047f0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80047f2:	2300      	movs	r3, #0
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3710      	adds	r7, #16
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	40012c00 	.word	0x40012c00
 8004800:	00010007 	.word	0x00010007

08004804 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b082      	sub	sp, #8
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	f003 0302 	and.w	r3, r3, #2
 8004816:	2b02      	cmp	r3, #2
 8004818:	d122      	bne.n	8004860 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	f003 0302 	and.w	r3, r3, #2
 8004824:	2b02      	cmp	r3, #2
 8004826:	d11b      	bne.n	8004860 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f06f 0202 	mvn.w	r2, #2
 8004830:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2201      	movs	r2, #1
 8004836:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	699b      	ldr	r3, [r3, #24]
 800483e:	f003 0303 	and.w	r3, r3, #3
 8004842:	2b00      	cmp	r3, #0
 8004844:	d003      	beq.n	800484e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 faed 	bl	8004e26 <HAL_TIM_IC_CaptureCallback>
 800484c:	e005      	b.n	800485a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f000 fadf 	bl	8004e12 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f000 faf0 	bl	8004e3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	691b      	ldr	r3, [r3, #16]
 8004866:	f003 0304 	and.w	r3, r3, #4
 800486a:	2b04      	cmp	r3, #4
 800486c:	d122      	bne.n	80048b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	f003 0304 	and.w	r3, r3, #4
 8004878:	2b04      	cmp	r3, #4
 800487a:	d11b      	bne.n	80048b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f06f 0204 	mvn.w	r2, #4
 8004884:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2202      	movs	r2, #2
 800488a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	699b      	ldr	r3, [r3, #24]
 8004892:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004896:	2b00      	cmp	r3, #0
 8004898:	d003      	beq.n	80048a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f000 fac3 	bl	8004e26 <HAL_TIM_IC_CaptureCallback>
 80048a0:	e005      	b.n	80048ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 fab5 	bl	8004e12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f000 fac6 	bl	8004e3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	691b      	ldr	r3, [r3, #16]
 80048ba:	f003 0308 	and.w	r3, r3, #8
 80048be:	2b08      	cmp	r3, #8
 80048c0:	d122      	bne.n	8004908 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	f003 0308 	and.w	r3, r3, #8
 80048cc:	2b08      	cmp	r3, #8
 80048ce:	d11b      	bne.n	8004908 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f06f 0208 	mvn.w	r2, #8
 80048d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2204      	movs	r2, #4
 80048de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	69db      	ldr	r3, [r3, #28]
 80048e6:	f003 0303 	and.w	r3, r3, #3
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d003      	beq.n	80048f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 fa99 	bl	8004e26 <HAL_TIM_IC_CaptureCallback>
 80048f4:	e005      	b.n	8004902 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f000 fa8b 	bl	8004e12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f000 fa9c 	bl	8004e3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	691b      	ldr	r3, [r3, #16]
 800490e:	f003 0310 	and.w	r3, r3, #16
 8004912:	2b10      	cmp	r3, #16
 8004914:	d122      	bne.n	800495c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	f003 0310 	and.w	r3, r3, #16
 8004920:	2b10      	cmp	r3, #16
 8004922:	d11b      	bne.n	800495c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f06f 0210 	mvn.w	r2, #16
 800492c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2208      	movs	r2, #8
 8004932:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	69db      	ldr	r3, [r3, #28]
 800493a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800493e:	2b00      	cmp	r3, #0
 8004940:	d003      	beq.n	800494a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 fa6f 	bl	8004e26 <HAL_TIM_IC_CaptureCallback>
 8004948:	e005      	b.n	8004956 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 fa61 	bl	8004e12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f000 fa72 	bl	8004e3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	f003 0301 	and.w	r3, r3, #1
 8004966:	2b01      	cmp	r3, #1
 8004968:	d10e      	bne.n	8004988 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	f003 0301 	and.w	r3, r3, #1
 8004974:	2b01      	cmp	r3, #1
 8004976:	d107      	bne.n	8004988 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f06f 0201 	mvn.w	r2, #1
 8004980:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 fa3b 	bl	8004dfe <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004992:	2b80      	cmp	r3, #128	; 0x80
 8004994:	d10e      	bne.n	80049b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049a0:	2b80      	cmp	r3, #128	; 0x80
 80049a2:	d107      	bne.n	80049b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80049ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 fe92 	bl	80056d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	691b      	ldr	r3, [r3, #16]
 80049ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049c2:	d10e      	bne.n	80049e2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ce:	2b80      	cmp	r3, #128	; 0x80
 80049d0:	d107      	bne.n	80049e2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80049da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f000 fe85 	bl	80056ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	691b      	ldr	r3, [r3, #16]
 80049e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ec:	2b40      	cmp	r3, #64	; 0x40
 80049ee:	d10e      	bne.n	8004a0e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049fa:	2b40      	cmp	r3, #64	; 0x40
 80049fc:	d107      	bne.n	8004a0e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f000 fa20 	bl	8004e4e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	691b      	ldr	r3, [r3, #16]
 8004a14:	f003 0320 	and.w	r3, r3, #32
 8004a18:	2b20      	cmp	r3, #32
 8004a1a:	d10e      	bne.n	8004a3a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	68db      	ldr	r3, [r3, #12]
 8004a22:	f003 0320 	and.w	r3, r3, #32
 8004a26:	2b20      	cmp	r3, #32
 8004a28:	d107      	bne.n	8004a3a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f06f 0220 	mvn.w	r2, #32
 8004a32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f000 fe45 	bl	80056c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a3a:	bf00      	nop
 8004a3c:	3708      	adds	r7, #8
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
	...

08004a44 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b086      	sub	sp, #24
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	60f8      	str	r0, [r7, #12]
 8004a4c:	60b9      	str	r1, [r7, #8]
 8004a4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a50:	2300      	movs	r3, #0
 8004a52:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d101      	bne.n	8004a62 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a5e:	2302      	movs	r3, #2
 8004a60:	e0ff      	b.n	8004c62 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2201      	movs	r2, #1
 8004a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2b14      	cmp	r3, #20
 8004a6e:	f200 80f0 	bhi.w	8004c52 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004a72:	a201      	add	r2, pc, #4	; (adr r2, 8004a78 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a78:	08004acd 	.word	0x08004acd
 8004a7c:	08004c53 	.word	0x08004c53
 8004a80:	08004c53 	.word	0x08004c53
 8004a84:	08004c53 	.word	0x08004c53
 8004a88:	08004b0d 	.word	0x08004b0d
 8004a8c:	08004c53 	.word	0x08004c53
 8004a90:	08004c53 	.word	0x08004c53
 8004a94:	08004c53 	.word	0x08004c53
 8004a98:	08004b4f 	.word	0x08004b4f
 8004a9c:	08004c53 	.word	0x08004c53
 8004aa0:	08004c53 	.word	0x08004c53
 8004aa4:	08004c53 	.word	0x08004c53
 8004aa8:	08004b8f 	.word	0x08004b8f
 8004aac:	08004c53 	.word	0x08004c53
 8004ab0:	08004c53 	.word	0x08004c53
 8004ab4:	08004c53 	.word	0x08004c53
 8004ab8:	08004bd1 	.word	0x08004bd1
 8004abc:	08004c53 	.word	0x08004c53
 8004ac0:	08004c53 	.word	0x08004c53
 8004ac4:	08004c53 	.word	0x08004c53
 8004ac8:	08004c11 	.word	0x08004c11
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68b9      	ldr	r1, [r7, #8]
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f000 fa16 	bl	8004f04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	699a      	ldr	r2, [r3, #24]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f042 0208 	orr.w	r2, r2, #8
 8004ae6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	699a      	ldr	r2, [r3, #24]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f022 0204 	bic.w	r2, r2, #4
 8004af6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	6999      	ldr	r1, [r3, #24]
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	691a      	ldr	r2, [r3, #16]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	430a      	orrs	r2, r1
 8004b08:	619a      	str	r2, [r3, #24]
      break;
 8004b0a:	e0a5      	b.n	8004c58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	68b9      	ldr	r1, [r7, #8]
 8004b12:	4618      	mov	r0, r3
 8004b14:	f000 fa5e 	bl	8004fd4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	699a      	ldr	r2, [r3, #24]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	699a      	ldr	r2, [r3, #24]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	6999      	ldr	r1, [r3, #24]
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	021a      	lsls	r2, r3, #8
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	430a      	orrs	r2, r1
 8004b4a:	619a      	str	r2, [r3, #24]
      break;
 8004b4c:	e084      	b.n	8004c58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	68b9      	ldr	r1, [r7, #8]
 8004b54:	4618      	mov	r0, r3
 8004b56:	f000 faab 	bl	80050b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	69da      	ldr	r2, [r3, #28]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f042 0208 	orr.w	r2, r2, #8
 8004b68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	69da      	ldr	r2, [r3, #28]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f022 0204 	bic.w	r2, r2, #4
 8004b78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	69d9      	ldr	r1, [r3, #28]
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	691a      	ldr	r2, [r3, #16]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	430a      	orrs	r2, r1
 8004b8a:	61da      	str	r2, [r3, #28]
      break;
 8004b8c:	e064      	b.n	8004c58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	68b9      	ldr	r1, [r7, #8]
 8004b94:	4618      	mov	r0, r3
 8004b96:	f000 faf7 	bl	8005188 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	69da      	ldr	r2, [r3, #28]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ba8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	69da      	ldr	r2, [r3, #28]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	69d9      	ldr	r1, [r3, #28]
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	691b      	ldr	r3, [r3, #16]
 8004bc4:	021a      	lsls	r2, r3, #8
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	430a      	orrs	r2, r1
 8004bcc:	61da      	str	r2, [r3, #28]
      break;
 8004bce:	e043      	b.n	8004c58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	68b9      	ldr	r1, [r7, #8]
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f000 fb28 	bl	800522c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f042 0208 	orr.w	r2, r2, #8
 8004bea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f022 0204 	bic.w	r2, r2, #4
 8004bfa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	691a      	ldr	r2, [r3, #16]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	430a      	orrs	r2, r1
 8004c0c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004c0e:	e023      	b.n	8004c58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68b9      	ldr	r1, [r7, #8]
 8004c16:	4618      	mov	r0, r3
 8004c18:	f000 fb54 	bl	80052c4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c2a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c3a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	021a      	lsls	r2, r3, #8
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	430a      	orrs	r2, r1
 8004c4e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004c50:	e002      	b.n	8004c58 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	75fb      	strb	r3, [r7, #23]
      break;
 8004c56:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c60:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3718      	adds	r7, #24
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop

08004c6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b084      	sub	sp, #16
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c76:	2300      	movs	r3, #0
 8004c78:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d101      	bne.n	8004c88 <HAL_TIM_ConfigClockSource+0x1c>
 8004c84:	2302      	movs	r3, #2
 8004c86:	e0b6      	b.n	8004df6 <HAL_TIM_ConfigClockSource+0x18a>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2202      	movs	r2, #2
 8004c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8004ca6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004caa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004cb2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	68ba      	ldr	r2, [r7, #8]
 8004cba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cc4:	d03e      	beq.n	8004d44 <HAL_TIM_ConfigClockSource+0xd8>
 8004cc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cca:	f200 8087 	bhi.w	8004ddc <HAL_TIM_ConfigClockSource+0x170>
 8004cce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cd2:	f000 8086 	beq.w	8004de2 <HAL_TIM_ConfigClockSource+0x176>
 8004cd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cda:	d87f      	bhi.n	8004ddc <HAL_TIM_ConfigClockSource+0x170>
 8004cdc:	2b70      	cmp	r3, #112	; 0x70
 8004cde:	d01a      	beq.n	8004d16 <HAL_TIM_ConfigClockSource+0xaa>
 8004ce0:	2b70      	cmp	r3, #112	; 0x70
 8004ce2:	d87b      	bhi.n	8004ddc <HAL_TIM_ConfigClockSource+0x170>
 8004ce4:	2b60      	cmp	r3, #96	; 0x60
 8004ce6:	d050      	beq.n	8004d8a <HAL_TIM_ConfigClockSource+0x11e>
 8004ce8:	2b60      	cmp	r3, #96	; 0x60
 8004cea:	d877      	bhi.n	8004ddc <HAL_TIM_ConfigClockSource+0x170>
 8004cec:	2b50      	cmp	r3, #80	; 0x50
 8004cee:	d03c      	beq.n	8004d6a <HAL_TIM_ConfigClockSource+0xfe>
 8004cf0:	2b50      	cmp	r3, #80	; 0x50
 8004cf2:	d873      	bhi.n	8004ddc <HAL_TIM_ConfigClockSource+0x170>
 8004cf4:	2b40      	cmp	r3, #64	; 0x40
 8004cf6:	d058      	beq.n	8004daa <HAL_TIM_ConfigClockSource+0x13e>
 8004cf8:	2b40      	cmp	r3, #64	; 0x40
 8004cfa:	d86f      	bhi.n	8004ddc <HAL_TIM_ConfigClockSource+0x170>
 8004cfc:	2b30      	cmp	r3, #48	; 0x30
 8004cfe:	d064      	beq.n	8004dca <HAL_TIM_ConfigClockSource+0x15e>
 8004d00:	2b30      	cmp	r3, #48	; 0x30
 8004d02:	d86b      	bhi.n	8004ddc <HAL_TIM_ConfigClockSource+0x170>
 8004d04:	2b20      	cmp	r3, #32
 8004d06:	d060      	beq.n	8004dca <HAL_TIM_ConfigClockSource+0x15e>
 8004d08:	2b20      	cmp	r3, #32
 8004d0a:	d867      	bhi.n	8004ddc <HAL_TIM_ConfigClockSource+0x170>
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d05c      	beq.n	8004dca <HAL_TIM_ConfigClockSource+0x15e>
 8004d10:	2b10      	cmp	r3, #16
 8004d12:	d05a      	beq.n	8004dca <HAL_TIM_ConfigClockSource+0x15e>
 8004d14:	e062      	b.n	8004ddc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6818      	ldr	r0, [r3, #0]
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	6899      	ldr	r1, [r3, #8]
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	685a      	ldr	r2, [r3, #4]
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	f000 fb97 	bl	8005458 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004d38:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	68ba      	ldr	r2, [r7, #8]
 8004d40:	609a      	str	r2, [r3, #8]
      break;
 8004d42:	e04f      	b.n	8004de4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6818      	ldr	r0, [r3, #0]
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	6899      	ldr	r1, [r3, #8]
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	685a      	ldr	r2, [r3, #4]
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	f000 fb80 	bl	8005458 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	689a      	ldr	r2, [r3, #8]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d66:	609a      	str	r2, [r3, #8]
      break;
 8004d68:	e03c      	b.n	8004de4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6818      	ldr	r0, [r3, #0]
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	6859      	ldr	r1, [r3, #4]
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	461a      	mov	r2, r3
 8004d78:	f000 faf2 	bl	8005360 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2150      	movs	r1, #80	; 0x50
 8004d82:	4618      	mov	r0, r3
 8004d84:	f000 fb4b 	bl	800541e <TIM_ITRx_SetConfig>
      break;
 8004d88:	e02c      	b.n	8004de4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6818      	ldr	r0, [r3, #0]
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	6859      	ldr	r1, [r3, #4]
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	461a      	mov	r2, r3
 8004d98:	f000 fb11 	bl	80053be <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	2160      	movs	r1, #96	; 0x60
 8004da2:	4618      	mov	r0, r3
 8004da4:	f000 fb3b 	bl	800541e <TIM_ITRx_SetConfig>
      break;
 8004da8:	e01c      	b.n	8004de4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6818      	ldr	r0, [r3, #0]
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	6859      	ldr	r1, [r3, #4]
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	461a      	mov	r2, r3
 8004db8:	f000 fad2 	bl	8005360 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	2140      	movs	r1, #64	; 0x40
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f000 fb2b 	bl	800541e <TIM_ITRx_SetConfig>
      break;
 8004dc8:	e00c      	b.n	8004de4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4619      	mov	r1, r3
 8004dd4:	4610      	mov	r0, r2
 8004dd6:	f000 fb22 	bl	800541e <TIM_ITRx_SetConfig>
      break;
 8004dda:	e003      	b.n	8004de4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	73fb      	strb	r3, [r7, #15]
      break;
 8004de0:	e000      	b.n	8004de4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004de2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3710      	adds	r7, #16
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}

08004dfe <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004dfe:	b480      	push	{r7}
 8004e00:	b083      	sub	sp, #12
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004e06:	bf00      	nop
 8004e08:	370c      	adds	r7, #12
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr

08004e12 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e12:	b480      	push	{r7}
 8004e14:	b083      	sub	sp, #12
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e1a:	bf00      	nop
 8004e1c:	370c      	adds	r7, #12
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr

08004e26 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e26:	b480      	push	{r7}
 8004e28:	b083      	sub	sp, #12
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e2e:	bf00      	nop
 8004e30:	370c      	adds	r7, #12
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr

08004e3a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e3a:	b480      	push	{r7}
 8004e3c:	b083      	sub	sp, #12
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e42:	bf00      	nop
 8004e44:	370c      	adds	r7, #12
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr

08004e4e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e4e:	b480      	push	{r7}
 8004e50:	b083      	sub	sp, #12
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e56:	bf00      	nop
 8004e58:	370c      	adds	r7, #12
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr
	...

08004e64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b085      	sub	sp, #20
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	4a22      	ldr	r2, [pc, #136]	; (8004f00 <TIM_Base_SetConfig+0x9c>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d003      	beq.n	8004e84 <TIM_Base_SetConfig+0x20>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e82:	d108      	bne.n	8004e96 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a19      	ldr	r2, [pc, #100]	; (8004f00 <TIM_Base_SetConfig+0x9c>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d003      	beq.n	8004ea6 <TIM_Base_SetConfig+0x42>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ea4:	d108      	bne.n	8004eb8 <TIM_Base_SetConfig+0x54>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	68fa      	ldr	r2, [r7, #12]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	695b      	ldr	r3, [r3, #20]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	68fa      	ldr	r2, [r7, #12]
 8004eca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	689a      	ldr	r2, [r3, #8]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4a08      	ldr	r2, [pc, #32]	; (8004f00 <TIM_Base_SetConfig+0x9c>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d103      	bne.n	8004eec <TIM_Base_SetConfig+0x88>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	691a      	ldr	r2, [r3, #16]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	615a      	str	r2, [r3, #20]
}
 8004ef2:	bf00      	nop
 8004ef4:	3714      	adds	r7, #20
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr
 8004efe:	bf00      	nop
 8004f00:	40012c00 	.word	0x40012c00

08004f04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b087      	sub	sp, #28
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a1b      	ldr	r3, [r3, #32]
 8004f12:	f023 0201 	bic.w	r2, r3, #1
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a1b      	ldr	r3, [r3, #32]
 8004f1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	699b      	ldr	r3, [r3, #24]
 8004f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f023 0303 	bic.w	r3, r3, #3
 8004f3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	68fa      	ldr	r2, [r7, #12]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	f023 0302 	bic.w	r3, r3, #2
 8004f50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	697a      	ldr	r2, [r7, #20]
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4a1c      	ldr	r2, [pc, #112]	; (8004fd0 <TIM_OC1_SetConfig+0xcc>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d10c      	bne.n	8004f7e <TIM_OC1_SetConfig+0x7a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	f023 0308 	bic.w	r3, r3, #8
 8004f6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	697a      	ldr	r2, [r7, #20]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	f023 0304 	bic.w	r3, r3, #4
 8004f7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4a13      	ldr	r2, [pc, #76]	; (8004fd0 <TIM_OC1_SetConfig+0xcc>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d111      	bne.n	8004faa <TIM_OC1_SetConfig+0xa6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	695b      	ldr	r3, [r3, #20]
 8004f9a:	693a      	ldr	r2, [r7, #16]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	699b      	ldr	r3, [r3, #24]
 8004fa4:	693a      	ldr	r2, [r7, #16]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	693a      	ldr	r2, [r7, #16]
 8004fae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	68fa      	ldr	r2, [r7, #12]
 8004fb4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	685a      	ldr	r2, [r3, #4]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	697a      	ldr	r2, [r7, #20]
 8004fc2:	621a      	str	r2, [r3, #32]
}
 8004fc4:	bf00      	nop
 8004fc6:	371c      	adds	r7, #28
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr
 8004fd0:	40012c00 	.word	0x40012c00

08004fd4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b087      	sub	sp, #28
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a1b      	ldr	r3, [r3, #32]
 8004fe2:	f023 0210 	bic.w	r2, r3, #16
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a1b      	ldr	r3, [r3, #32]
 8004fee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	699b      	ldr	r3, [r3, #24]
 8004ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005002:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005006:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800500e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	021b      	lsls	r3, r3, #8
 8005016:	68fa      	ldr	r2, [r7, #12]
 8005018:	4313      	orrs	r3, r2
 800501a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	f023 0320 	bic.w	r3, r3, #32
 8005022:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	011b      	lsls	r3, r3, #4
 800502a:	697a      	ldr	r2, [r7, #20]
 800502c:	4313      	orrs	r3, r2
 800502e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	4a1e      	ldr	r2, [pc, #120]	; (80050ac <TIM_OC2_SetConfig+0xd8>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d10d      	bne.n	8005054 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800503e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	011b      	lsls	r3, r3, #4
 8005046:	697a      	ldr	r2, [r7, #20]
 8005048:	4313      	orrs	r3, r2
 800504a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005052:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	4a15      	ldr	r2, [pc, #84]	; (80050ac <TIM_OC2_SetConfig+0xd8>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d113      	bne.n	8005084 <TIM_OC2_SetConfig+0xb0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005062:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800506a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	695b      	ldr	r3, [r3, #20]
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	693a      	ldr	r2, [r7, #16]
 8005074:	4313      	orrs	r3, r2
 8005076:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	699b      	ldr	r3, [r3, #24]
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	693a      	ldr	r2, [r7, #16]
 8005080:	4313      	orrs	r3, r2
 8005082:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	693a      	ldr	r2, [r7, #16]
 8005088:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	68fa      	ldr	r2, [r7, #12]
 800508e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	685a      	ldr	r2, [r3, #4]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	697a      	ldr	r2, [r7, #20]
 800509c:	621a      	str	r2, [r3, #32]
}
 800509e:	bf00      	nop
 80050a0:	371c      	adds	r7, #28
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr
 80050aa:	bf00      	nop
 80050ac:	40012c00 	.word	0x40012c00

080050b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b087      	sub	sp, #28
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a1b      	ldr	r3, [r3, #32]
 80050be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a1b      	ldr	r3, [r3, #32]
 80050ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	69db      	ldr	r3, [r3, #28]
 80050d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f023 0303 	bic.w	r3, r3, #3
 80050ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	68fa      	ldr	r2, [r7, #12]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	021b      	lsls	r3, r3, #8
 8005104:	697a      	ldr	r2, [r7, #20]
 8005106:	4313      	orrs	r3, r2
 8005108:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4a1d      	ldr	r2, [pc, #116]	; (8005184 <TIM_OC3_SetConfig+0xd4>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d10d      	bne.n	800512e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005118:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	021b      	lsls	r3, r3, #8
 8005120:	697a      	ldr	r2, [r7, #20]
 8005122:	4313      	orrs	r3, r2
 8005124:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800512c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a14      	ldr	r2, [pc, #80]	; (8005184 <TIM_OC3_SetConfig+0xd4>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d113      	bne.n	800515e <TIM_OC3_SetConfig+0xae>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800513c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005144:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	011b      	lsls	r3, r3, #4
 800514c:	693a      	ldr	r2, [r7, #16]
 800514e:	4313      	orrs	r3, r2
 8005150:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	699b      	ldr	r3, [r3, #24]
 8005156:	011b      	lsls	r3, r3, #4
 8005158:	693a      	ldr	r2, [r7, #16]
 800515a:	4313      	orrs	r3, r2
 800515c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	693a      	ldr	r2, [r7, #16]
 8005162:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	68fa      	ldr	r2, [r7, #12]
 8005168:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	685a      	ldr	r2, [r3, #4]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	697a      	ldr	r2, [r7, #20]
 8005176:	621a      	str	r2, [r3, #32]
}
 8005178:	bf00      	nop
 800517a:	371c      	adds	r7, #28
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr
 8005184:	40012c00 	.word	0x40012c00

08005188 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005188:	b480      	push	{r7}
 800518a:	b087      	sub	sp, #28
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a1b      	ldr	r3, [r3, #32]
 8005196:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a1b      	ldr	r3, [r3, #32]
 80051a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	69db      	ldr	r3, [r3, #28]
 80051ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	021b      	lsls	r3, r3, #8
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	031b      	lsls	r3, r3, #12
 80051de:	693a      	ldr	r2, [r7, #16]
 80051e0:	4313      	orrs	r3, r2
 80051e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a10      	ldr	r2, [pc, #64]	; (8005228 <TIM_OC4_SetConfig+0xa0>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d109      	bne.n	8005200 <TIM_OC4_SetConfig+0x78>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	695b      	ldr	r3, [r3, #20]
 80051f8:	019b      	lsls	r3, r3, #6
 80051fa:	697a      	ldr	r2, [r7, #20]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	697a      	ldr	r2, [r7, #20]
 8005204:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	68fa      	ldr	r2, [r7, #12]
 800520a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	685a      	ldr	r2, [r3, #4]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	693a      	ldr	r2, [r7, #16]
 8005218:	621a      	str	r2, [r3, #32]
}
 800521a:	bf00      	nop
 800521c:	371c      	adds	r7, #28
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr
 8005226:	bf00      	nop
 8005228:	40012c00 	.word	0x40012c00

0800522c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800522c:	b480      	push	{r7}
 800522e:	b087      	sub	sp, #28
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a1b      	ldr	r3, [r3, #32]
 800523a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a1b      	ldr	r3, [r3, #32]
 8005246:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800525a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800525e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	68fa      	ldr	r2, [r7, #12]
 8005266:	4313      	orrs	r3, r2
 8005268:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005270:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	041b      	lsls	r3, r3, #16
 8005278:	693a      	ldr	r2, [r7, #16]
 800527a:	4313      	orrs	r3, r2
 800527c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a0f      	ldr	r2, [pc, #60]	; (80052c0 <TIM_OC5_SetConfig+0x94>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d109      	bne.n	800529a <TIM_OC5_SetConfig+0x6e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800528c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	695b      	ldr	r3, [r3, #20]
 8005292:	021b      	lsls	r3, r3, #8
 8005294:	697a      	ldr	r2, [r7, #20]
 8005296:	4313      	orrs	r3, r2
 8005298:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	697a      	ldr	r2, [r7, #20]
 800529e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	68fa      	ldr	r2, [r7, #12]
 80052a4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	685a      	ldr	r2, [r3, #4]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	693a      	ldr	r2, [r7, #16]
 80052b2:	621a      	str	r2, [r3, #32]
}
 80052b4:	bf00      	nop
 80052b6:	371c      	adds	r7, #28
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr
 80052c0:	40012c00 	.word	0x40012c00

080052c4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b087      	sub	sp, #28
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a1b      	ldr	r3, [r3, #32]
 80052d2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a1b      	ldr	r3, [r3, #32]
 80052de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	021b      	lsls	r3, r3, #8
 80052fe:	68fa      	ldr	r2, [r7, #12]
 8005300:	4313      	orrs	r3, r2
 8005302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800530a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	051b      	lsls	r3, r3, #20
 8005312:	693a      	ldr	r2, [r7, #16]
 8005314:	4313      	orrs	r3, r2
 8005316:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4a10      	ldr	r2, [pc, #64]	; (800535c <TIM_OC6_SetConfig+0x98>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d109      	bne.n	8005334 <TIM_OC6_SetConfig+0x70>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005326:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	695b      	ldr	r3, [r3, #20]
 800532c:	029b      	lsls	r3, r3, #10
 800532e:	697a      	ldr	r2, [r7, #20]
 8005330:	4313      	orrs	r3, r2
 8005332:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	697a      	ldr	r2, [r7, #20]
 8005338:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	68fa      	ldr	r2, [r7, #12]
 800533e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	685a      	ldr	r2, [r3, #4]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	693a      	ldr	r2, [r7, #16]
 800534c:	621a      	str	r2, [r3, #32]
}
 800534e:	bf00      	nop
 8005350:	371c      	adds	r7, #28
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr
 800535a:	bf00      	nop
 800535c:	40012c00 	.word	0x40012c00

08005360 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005360:	b480      	push	{r7}
 8005362:	b087      	sub	sp, #28
 8005364:	af00      	add	r7, sp, #0
 8005366:	60f8      	str	r0, [r7, #12]
 8005368:	60b9      	str	r1, [r7, #8]
 800536a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	6a1b      	ldr	r3, [r3, #32]
 8005370:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	6a1b      	ldr	r3, [r3, #32]
 8005376:	f023 0201 	bic.w	r2, r3, #1
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	699b      	ldr	r3, [r3, #24]
 8005382:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800538a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	011b      	lsls	r3, r3, #4
 8005390:	693a      	ldr	r2, [r7, #16]
 8005392:	4313      	orrs	r3, r2
 8005394:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	f023 030a 	bic.w	r3, r3, #10
 800539c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800539e:	697a      	ldr	r2, [r7, #20]
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	693a      	ldr	r2, [r7, #16]
 80053aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	697a      	ldr	r2, [r7, #20]
 80053b0:	621a      	str	r2, [r3, #32]
}
 80053b2:	bf00      	nop
 80053b4:	371c      	adds	r7, #28
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr

080053be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053be:	b480      	push	{r7}
 80053c0:	b087      	sub	sp, #28
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	60f8      	str	r0, [r7, #12]
 80053c6:	60b9      	str	r1, [r7, #8]
 80053c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	6a1b      	ldr	r3, [r3, #32]
 80053ce:	f023 0210 	bic.w	r2, r3, #16
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	699b      	ldr	r3, [r3, #24]
 80053da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6a1b      	ldr	r3, [r3, #32]
 80053e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80053e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	031b      	lsls	r3, r3, #12
 80053ee:	697a      	ldr	r2, [r7, #20]
 80053f0:	4313      	orrs	r3, r2
 80053f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80053fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	011b      	lsls	r3, r3, #4
 8005400:	693a      	ldr	r2, [r7, #16]
 8005402:	4313      	orrs	r3, r2
 8005404:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	697a      	ldr	r2, [r7, #20]
 800540a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	693a      	ldr	r2, [r7, #16]
 8005410:	621a      	str	r2, [r3, #32]
}
 8005412:	bf00      	nop
 8005414:	371c      	adds	r7, #28
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr

0800541e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800541e:	b480      	push	{r7}
 8005420:	b085      	sub	sp, #20
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
 8005426:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005434:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005438:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800543a:	683a      	ldr	r2, [r7, #0]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	4313      	orrs	r3, r2
 8005440:	f043 0307 	orr.w	r3, r3, #7
 8005444:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	68fa      	ldr	r2, [r7, #12]
 800544a:	609a      	str	r2, [r3, #8]
}
 800544c:	bf00      	nop
 800544e:	3714      	adds	r7, #20
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr

08005458 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005458:	b480      	push	{r7}
 800545a:	b087      	sub	sp, #28
 800545c:	af00      	add	r7, sp, #0
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	607a      	str	r2, [r7, #4]
 8005464:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005472:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	021a      	lsls	r2, r3, #8
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	431a      	orrs	r2, r3
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	4313      	orrs	r3, r2
 8005480:	697a      	ldr	r2, [r7, #20]
 8005482:	4313      	orrs	r3, r2
 8005484:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	697a      	ldr	r2, [r7, #20]
 800548a:	609a      	str	r2, [r3, #8]
}
 800548c:	bf00      	nop
 800548e:	371c      	adds	r7, #28
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr

08005498 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005498:	b480      	push	{r7}
 800549a:	b087      	sub	sp, #28
 800549c:	af00      	add	r7, sp, #0
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	60b9      	str	r1, [r7, #8]
 80054a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	f003 031f 	and.w	r3, r3, #31
 80054aa:	2201      	movs	r2, #1
 80054ac:	fa02 f303 	lsl.w	r3, r2, r3
 80054b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	6a1a      	ldr	r2, [r3, #32]
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	43db      	mvns	r3, r3
 80054ba:	401a      	ands	r2, r3
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6a1a      	ldr	r2, [r3, #32]
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	f003 031f 	and.w	r3, r3, #31
 80054ca:	6879      	ldr	r1, [r7, #4]
 80054cc:	fa01 f303 	lsl.w	r3, r1, r3
 80054d0:	431a      	orrs	r2, r3
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	621a      	str	r2, [r3, #32]
}
 80054d6:	bf00      	nop
 80054d8:	371c      	adds	r7, #28
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr
	...

080054e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b085      	sub	sp, #20
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d101      	bne.n	80054fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054f8:	2302      	movs	r3, #2
 80054fa:	e04a      	b.n	8005592 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2202      	movs	r2, #2
 8005508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a1f      	ldr	r2, [pc, #124]	; (80055a0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d108      	bne.n	8005538 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800552c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	68fa      	ldr	r2, [r7, #12]
 8005534:	4313      	orrs	r3, r2
 8005536:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800553e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68fa      	ldr	r2, [r7, #12]
 8005546:	4313      	orrs	r3, r2
 8005548:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	68fa      	ldr	r2, [r7, #12]
 8005550:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a12      	ldr	r2, [pc, #72]	; (80055a0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d004      	beq.n	8005566 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005564:	d10c      	bne.n	8005580 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800556c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	68ba      	ldr	r2, [r7, #8]
 8005574:	4313      	orrs	r3, r2
 8005576:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	68ba      	ldr	r2, [r7, #8]
 800557e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005590:	2300      	movs	r3, #0
}
 8005592:	4618      	mov	r0, r3
 8005594:	3714      	adds	r7, #20
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr
 800559e:	bf00      	nop
 80055a0:	40012c00 	.word	0x40012c00

080055a4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b085      	sub	sp, #20
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80055ae:	2300      	movs	r3, #0
 80055b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d101      	bne.n	80055c0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80055bc:	2302      	movs	r3, #2
 80055be:	e078      	b.n	80056b2 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2201      	movs	r2, #1
 80055c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	4313      	orrs	r3, r2
 80055e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4313      	orrs	r3, r2
 80055fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	691b      	ldr	r3, [r3, #16]
 800560a:	4313      	orrs	r3, r2
 800560c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	695b      	ldr	r3, [r3, #20]
 8005618:	4313      	orrs	r3, r2
 800561a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005626:	4313      	orrs	r3, r2
 8005628:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	699b      	ldr	r3, [r3, #24]
 8005634:	041b      	lsls	r3, r3, #16
 8005636:	4313      	orrs	r3, r2
 8005638:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a20      	ldr	r2, [pc, #128]	; (80056c0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d106      	bne.n	8005652 <HAL_TIMEx_ConfigBreakDeadTime+0xae>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	69db      	ldr	r3, [r3, #28]
 800564e:	4313      	orrs	r3, r2
 8005650:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a1a      	ldr	r2, [pc, #104]	; (80056c0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d121      	bne.n	80056a0 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005666:	051b      	lsls	r3, r3, #20
 8005668:	4313      	orrs	r3, r2
 800566a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	6a1b      	ldr	r3, [r3, #32]
 8005676:	4313      	orrs	r3, r2
 8005678:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005684:	4313      	orrs	r3, r2
 8005686:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a0c      	ldr	r2, [pc, #48]	; (80056c0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d106      	bne.n	80056a0 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800569c:	4313      	orrs	r3, r2
 800569e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	68fa      	ldr	r2, [r7, #12]
 80056a6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056b0:	2300      	movs	r3, #0
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3714      	adds	r7, #20
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr
 80056be:	bf00      	nop
 80056c0:	40012c00 	.word	0x40012c00

080056c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b083      	sub	sp, #12
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056cc:	bf00      	nop
 80056ce:	370c      	adds	r7, #12
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056e0:	bf00      	nop
 80056e2:	370c      	adds	r7, #12
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr

080056ec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80056f4:	bf00      	nop
 80056f6:	370c      	adds	r7, #12
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <LL_RCC_GetUSARTClockSource>:
{
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8005708:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800570c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	4013      	ands	r3, r2
}
 8005714:	4618      	mov	r0, r3
 8005716:	370c      	adds	r7, #12
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <LL_RCC_GetLPUARTClockSource>:
{
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8005728:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800572c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	4013      	ands	r3, r2
}
 8005734:	4618      	mov	r0, r3
 8005736:	370c      	adds	r7, #12
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b082      	sub	sp, #8
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d101      	bne.n	8005752 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e042      	b.n	80057d8 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005758:	2b00      	cmp	r3, #0
 800575a:	d106      	bne.n	800576a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2200      	movs	r2, #0
 8005760:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f7fb fb67 	bl	8000e38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2224      	movs	r2, #36	; 0x24
 800576e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f022 0201 	bic.w	r2, r2, #1
 8005780:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 f8ba 	bl	80058fc <UART_SetConfig>
 8005788:	4603      	mov	r3, r0
 800578a:	2b01      	cmp	r3, #1
 800578c:	d101      	bne.n	8005792 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e022      	b.n	80057d8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005796:	2b00      	cmp	r3, #0
 8005798:	d002      	beq.n	80057a0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f000 fad6 	bl	8005d4c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	685a      	ldr	r2, [r3, #4]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	689a      	ldr	r2, [r3, #8]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f042 0201 	orr.w	r2, r2, #1
 80057ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f000 fb5d 	bl	8005e90 <UART_CheckIdleState>
 80057d6:	4603      	mov	r3, r0
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3708      	adds	r7, #8
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}

080057e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b08a      	sub	sp, #40	; 0x28
 80057e4:	af02      	add	r7, sp, #8
 80057e6:	60f8      	str	r0, [r7, #12]
 80057e8:	60b9      	str	r1, [r7, #8]
 80057ea:	603b      	str	r3, [r7, #0]
 80057ec:	4613      	mov	r3, r2
 80057ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057f6:	2b20      	cmp	r3, #32
 80057f8:	d17b      	bne.n	80058f2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d002      	beq.n	8005806 <HAL_UART_Transmit+0x26>
 8005800:	88fb      	ldrh	r3, [r7, #6]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d101      	bne.n	800580a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	e074      	b.n	80058f4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2200      	movs	r2, #0
 800580e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2221      	movs	r2, #33	; 0x21
 8005816:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800581a:	f7fb fd33 	bl	8001284 <HAL_GetTick>
 800581e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	88fa      	ldrh	r2, [r7, #6]
 8005824:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	88fa      	ldrh	r2, [r7, #6]
 800582c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005838:	d108      	bne.n	800584c <HAL_UART_Transmit+0x6c>
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d104      	bne.n	800584c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005842:	2300      	movs	r3, #0
 8005844:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	61bb      	str	r3, [r7, #24]
 800584a:	e003      	b.n	8005854 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005850:	2300      	movs	r3, #0
 8005852:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005854:	e030      	b.n	80058b8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	9300      	str	r3, [sp, #0]
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	2200      	movs	r2, #0
 800585e:	2180      	movs	r1, #128	; 0x80
 8005860:	68f8      	ldr	r0, [r7, #12]
 8005862:	f000 fbbf 	bl	8005fe4 <UART_WaitOnFlagUntilTimeout>
 8005866:	4603      	mov	r3, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	d005      	beq.n	8005878 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2220      	movs	r2, #32
 8005870:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8005874:	2303      	movs	r3, #3
 8005876:	e03d      	b.n	80058f4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d10b      	bne.n	8005896 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	881b      	ldrh	r3, [r3, #0]
 8005882:	461a      	mov	r2, r3
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800588c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800588e:	69bb      	ldr	r3, [r7, #24]
 8005890:	3302      	adds	r3, #2
 8005892:	61bb      	str	r3, [r7, #24]
 8005894:	e007      	b.n	80058a6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005896:	69fb      	ldr	r3, [r7, #28]
 8005898:	781a      	ldrb	r2, [r3, #0]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	3301      	adds	r3, #1
 80058a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	3b01      	subs	r3, #1
 80058b0:	b29a      	uxth	r2, r3
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80058be:	b29b      	uxth	r3, r3
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d1c8      	bne.n	8005856 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	9300      	str	r3, [sp, #0]
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	2200      	movs	r2, #0
 80058cc:	2140      	movs	r1, #64	; 0x40
 80058ce:	68f8      	ldr	r0, [r7, #12]
 80058d0:	f000 fb88 	bl	8005fe4 <UART_WaitOnFlagUntilTimeout>
 80058d4:	4603      	mov	r3, r0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d005      	beq.n	80058e6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2220      	movs	r2, #32
 80058de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80058e2:	2303      	movs	r3, #3
 80058e4:	e006      	b.n	80058f4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2220      	movs	r2, #32
 80058ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80058ee:	2300      	movs	r3, #0
 80058f0:	e000      	b.n	80058f4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80058f2:	2302      	movs	r3, #2
  }
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3720      	adds	r7, #32
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}

080058fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005900:	b08c      	sub	sp, #48	; 0x30
 8005902:	af00      	add	r7, sp, #0
 8005904:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005906:	2300      	movs	r3, #0
 8005908:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	689a      	ldr	r2, [r3, #8]
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	691b      	ldr	r3, [r3, #16]
 8005914:	431a      	orrs	r2, r3
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	695b      	ldr	r3, [r3, #20]
 800591a:	431a      	orrs	r2, r3
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	69db      	ldr	r3, [r3, #28]
 8005920:	4313      	orrs	r3, r2
 8005922:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	4baf      	ldr	r3, [pc, #700]	; (8005be8 <UART_SetConfig+0x2ec>)
 800592c:	4013      	ands	r3, r2
 800592e:	697a      	ldr	r2, [r7, #20]
 8005930:	6812      	ldr	r2, [r2, #0]
 8005932:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005934:	430b      	orrs	r3, r1
 8005936:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	68da      	ldr	r2, [r3, #12]
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	430a      	orrs	r2, r1
 800594c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	699b      	ldr	r3, [r3, #24]
 8005952:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4aa4      	ldr	r2, [pc, #656]	; (8005bec <UART_SetConfig+0x2f0>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d004      	beq.n	8005968 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	6a1b      	ldr	r3, [r3, #32]
 8005962:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005964:	4313      	orrs	r3, r2
 8005966:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005972:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005976:	697a      	ldr	r2, [r7, #20]
 8005978:	6812      	ldr	r2, [r2, #0]
 800597a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800597c:	430b      	orrs	r3, r1
 800597e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005986:	f023 010f 	bic.w	r1, r3, #15
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	430a      	orrs	r2, r1
 8005994:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a95      	ldr	r2, [pc, #596]	; (8005bf0 <UART_SetConfig+0x2f4>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d125      	bne.n	80059ec <UART_SetConfig+0xf0>
 80059a0:	2003      	movs	r0, #3
 80059a2:	f7ff fead 	bl	8005700 <LL_RCC_GetUSARTClockSource>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b03      	cmp	r3, #3
 80059aa:	d81b      	bhi.n	80059e4 <UART_SetConfig+0xe8>
 80059ac:	a201      	add	r2, pc, #4	; (adr r2, 80059b4 <UART_SetConfig+0xb8>)
 80059ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059b2:	bf00      	nop
 80059b4:	080059c5 	.word	0x080059c5
 80059b8:	080059d5 	.word	0x080059d5
 80059bc:	080059cd 	.word	0x080059cd
 80059c0:	080059dd 	.word	0x080059dd
 80059c4:	2301      	movs	r3, #1
 80059c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059ca:	e042      	b.n	8005a52 <UART_SetConfig+0x156>
 80059cc:	2302      	movs	r3, #2
 80059ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059d2:	e03e      	b.n	8005a52 <UART_SetConfig+0x156>
 80059d4:	2304      	movs	r3, #4
 80059d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059da:	e03a      	b.n	8005a52 <UART_SetConfig+0x156>
 80059dc:	2308      	movs	r3, #8
 80059de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059e2:	e036      	b.n	8005a52 <UART_SetConfig+0x156>
 80059e4:	2310      	movs	r3, #16
 80059e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059ea:	e032      	b.n	8005a52 <UART_SetConfig+0x156>
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a7e      	ldr	r2, [pc, #504]	; (8005bec <UART_SetConfig+0x2f0>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d12a      	bne.n	8005a4c <UART_SetConfig+0x150>
 80059f6:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80059fa:	f7ff fe91 	bl	8005720 <LL_RCC_GetLPUARTClockSource>
 80059fe:	4603      	mov	r3, r0
 8005a00:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a04:	d01a      	beq.n	8005a3c <UART_SetConfig+0x140>
 8005a06:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a0a:	d81b      	bhi.n	8005a44 <UART_SetConfig+0x148>
 8005a0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a10:	d00c      	beq.n	8005a2c <UART_SetConfig+0x130>
 8005a12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a16:	d815      	bhi.n	8005a44 <UART_SetConfig+0x148>
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d003      	beq.n	8005a24 <UART_SetConfig+0x128>
 8005a1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a20:	d008      	beq.n	8005a34 <UART_SetConfig+0x138>
 8005a22:	e00f      	b.n	8005a44 <UART_SetConfig+0x148>
 8005a24:	2300      	movs	r3, #0
 8005a26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a2a:	e012      	b.n	8005a52 <UART_SetConfig+0x156>
 8005a2c:	2302      	movs	r3, #2
 8005a2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a32:	e00e      	b.n	8005a52 <UART_SetConfig+0x156>
 8005a34:	2304      	movs	r3, #4
 8005a36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a3a:	e00a      	b.n	8005a52 <UART_SetConfig+0x156>
 8005a3c:	2308      	movs	r3, #8
 8005a3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a42:	e006      	b.n	8005a52 <UART_SetConfig+0x156>
 8005a44:	2310      	movs	r3, #16
 8005a46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a4a:	e002      	b.n	8005a52 <UART_SetConfig+0x156>
 8005a4c:	2310      	movs	r3, #16
 8005a4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a65      	ldr	r2, [pc, #404]	; (8005bec <UART_SetConfig+0x2f0>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	f040 8097 	bne.w	8005b8c <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005a5e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005a62:	2b08      	cmp	r3, #8
 8005a64:	d823      	bhi.n	8005aae <UART_SetConfig+0x1b2>
 8005a66:	a201      	add	r2, pc, #4	; (adr r2, 8005a6c <UART_SetConfig+0x170>)
 8005a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a6c:	08005a91 	.word	0x08005a91
 8005a70:	08005aaf 	.word	0x08005aaf
 8005a74:	08005a99 	.word	0x08005a99
 8005a78:	08005aaf 	.word	0x08005aaf
 8005a7c:	08005a9f 	.word	0x08005a9f
 8005a80:	08005aaf 	.word	0x08005aaf
 8005a84:	08005aaf 	.word	0x08005aaf
 8005a88:	08005aaf 	.word	0x08005aaf
 8005a8c:	08005aa7 	.word	0x08005aa7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a90:	f7fe f9fa 	bl	8003e88 <HAL_RCC_GetPCLK1Freq>
 8005a94:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005a96:	e010      	b.n	8005aba <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a98:	4b56      	ldr	r3, [pc, #344]	; (8005bf4 <UART_SetConfig+0x2f8>)
 8005a9a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005a9c:	e00d      	b.n	8005aba <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a9e:	f7fe f971 	bl	8003d84 <HAL_RCC_GetSysClockFreq>
 8005aa2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005aa4:	e009      	b.n	8005aba <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005aa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005aaa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005aac:	e005      	b.n	8005aba <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005ab8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	f000 812b 	beq.w	8005d18 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac6:	4a4c      	ldr	r2, [pc, #304]	; (8005bf8 <UART_SetConfig+0x2fc>)
 8005ac8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005acc:	461a      	mov	r2, r3
 8005ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad0:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ad4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	685a      	ldr	r2, [r3, #4]
 8005ada:	4613      	mov	r3, r2
 8005adc:	005b      	lsls	r3, r3, #1
 8005ade:	4413      	add	r3, r2
 8005ae0:	69ba      	ldr	r2, [r7, #24]
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d305      	bcc.n	8005af2 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005aec:	69ba      	ldr	r2, [r7, #24]
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d903      	bls.n	8005afa <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005af8:	e10e      	b.n	8005d18 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afc:	2200      	movs	r2, #0
 8005afe:	60bb      	str	r3, [r7, #8]
 8005b00:	60fa      	str	r2, [r7, #12]
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b06:	4a3c      	ldr	r2, [pc, #240]	; (8005bf8 <UART_SetConfig+0x2fc>)
 8005b08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	2200      	movs	r2, #0
 8005b10:	603b      	str	r3, [r7, #0]
 8005b12:	607a      	str	r2, [r7, #4]
 8005b14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b18:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005b1c:	f7fa fb80 	bl	8000220 <__aeabi_uldivmod>
 8005b20:	4602      	mov	r2, r0
 8005b22:	460b      	mov	r3, r1
 8005b24:	4610      	mov	r0, r2
 8005b26:	4619      	mov	r1, r3
 8005b28:	f04f 0200 	mov.w	r2, #0
 8005b2c:	f04f 0300 	mov.w	r3, #0
 8005b30:	020b      	lsls	r3, r1, #8
 8005b32:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005b36:	0202      	lsls	r2, r0, #8
 8005b38:	6979      	ldr	r1, [r7, #20]
 8005b3a:	6849      	ldr	r1, [r1, #4]
 8005b3c:	0849      	lsrs	r1, r1, #1
 8005b3e:	2000      	movs	r0, #0
 8005b40:	460c      	mov	r4, r1
 8005b42:	4605      	mov	r5, r0
 8005b44:	eb12 0804 	adds.w	r8, r2, r4
 8005b48:	eb43 0905 	adc.w	r9, r3, r5
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	469a      	mov	sl, r3
 8005b54:	4693      	mov	fp, r2
 8005b56:	4652      	mov	r2, sl
 8005b58:	465b      	mov	r3, fp
 8005b5a:	4640      	mov	r0, r8
 8005b5c:	4649      	mov	r1, r9
 8005b5e:	f7fa fb5f 	bl	8000220 <__aeabi_uldivmod>
 8005b62:	4602      	mov	r2, r0
 8005b64:	460b      	mov	r3, r1
 8005b66:	4613      	mov	r3, r2
 8005b68:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005b6a:	6a3b      	ldr	r3, [r7, #32]
 8005b6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b70:	d308      	bcc.n	8005b84 <UART_SetConfig+0x288>
 8005b72:	6a3b      	ldr	r3, [r7, #32]
 8005b74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b78:	d204      	bcs.n	8005b84 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	6a3a      	ldr	r2, [r7, #32]
 8005b80:	60da      	str	r2, [r3, #12]
 8005b82:	e0c9      	b.n	8005d18 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005b8a:	e0c5      	b.n	8005d18 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	69db      	ldr	r3, [r3, #28]
 8005b90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b94:	d16d      	bne.n	8005c72 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8005b96:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005b9a:	3b01      	subs	r3, #1
 8005b9c:	2b07      	cmp	r3, #7
 8005b9e:	d82d      	bhi.n	8005bfc <UART_SetConfig+0x300>
 8005ba0:	a201      	add	r2, pc, #4	; (adr r2, 8005ba8 <UART_SetConfig+0x2ac>)
 8005ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ba6:	bf00      	nop
 8005ba8:	08005bc9 	.word	0x08005bc9
 8005bac:	08005bd1 	.word	0x08005bd1
 8005bb0:	08005bfd 	.word	0x08005bfd
 8005bb4:	08005bd7 	.word	0x08005bd7
 8005bb8:	08005bfd 	.word	0x08005bfd
 8005bbc:	08005bfd 	.word	0x08005bfd
 8005bc0:	08005bfd 	.word	0x08005bfd
 8005bc4:	08005bdf 	.word	0x08005bdf
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005bc8:	f7fe f974 	bl	8003eb4 <HAL_RCC_GetPCLK2Freq>
 8005bcc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005bce:	e01b      	b.n	8005c08 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005bd0:	4b08      	ldr	r3, [pc, #32]	; (8005bf4 <UART_SetConfig+0x2f8>)
 8005bd2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005bd4:	e018      	b.n	8005c08 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bd6:	f7fe f8d5 	bl	8003d84 <HAL_RCC_GetSysClockFreq>
 8005bda:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005bdc:	e014      	b.n	8005c08 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005be2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005be4:	e010      	b.n	8005c08 <UART_SetConfig+0x30c>
 8005be6:	bf00      	nop
 8005be8:	cfff69f3 	.word	0xcfff69f3
 8005bec:	40008000 	.word	0x40008000
 8005bf0:	40013800 	.word	0x40013800
 8005bf4:	00f42400 	.word	0x00f42400
 8005bf8:	080074dc 	.word	0x080074dc
      default:
        pclk = 0U;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005c06:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	f000 8084 	beq.w	8005d18 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c14:	4a4b      	ldr	r2, [pc, #300]	; (8005d44 <UART_SetConfig+0x448>)
 8005c16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c22:	005a      	lsls	r2, r3, #1
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	085b      	lsrs	r3, r3, #1
 8005c2a:	441a      	add	r2, r3
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c34:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c36:	6a3b      	ldr	r3, [r7, #32]
 8005c38:	2b0f      	cmp	r3, #15
 8005c3a:	d916      	bls.n	8005c6a <UART_SetConfig+0x36e>
 8005c3c:	6a3b      	ldr	r3, [r7, #32]
 8005c3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c42:	d212      	bcs.n	8005c6a <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c44:	6a3b      	ldr	r3, [r7, #32]
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	f023 030f 	bic.w	r3, r3, #15
 8005c4c:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c4e:	6a3b      	ldr	r3, [r7, #32]
 8005c50:	085b      	lsrs	r3, r3, #1
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	f003 0307 	and.w	r3, r3, #7
 8005c58:	b29a      	uxth	r2, r3
 8005c5a:	8bfb      	ldrh	r3, [r7, #30]
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	8bfa      	ldrh	r2, [r7, #30]
 8005c66:	60da      	str	r2, [r3, #12]
 8005c68:	e056      	b.n	8005d18 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005c70:	e052      	b.n	8005d18 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c72:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005c76:	3b01      	subs	r3, #1
 8005c78:	2b07      	cmp	r3, #7
 8005c7a:	d822      	bhi.n	8005cc2 <UART_SetConfig+0x3c6>
 8005c7c:	a201      	add	r2, pc, #4	; (adr r2, 8005c84 <UART_SetConfig+0x388>)
 8005c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c82:	bf00      	nop
 8005c84:	08005ca5 	.word	0x08005ca5
 8005c88:	08005cad 	.word	0x08005cad
 8005c8c:	08005cc3 	.word	0x08005cc3
 8005c90:	08005cb3 	.word	0x08005cb3
 8005c94:	08005cc3 	.word	0x08005cc3
 8005c98:	08005cc3 	.word	0x08005cc3
 8005c9c:	08005cc3 	.word	0x08005cc3
 8005ca0:	08005cbb 	.word	0x08005cbb
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ca4:	f7fe f906 	bl	8003eb4 <HAL_RCC_GetPCLK2Freq>
 8005ca8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005caa:	e010      	b.n	8005cce <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cac:	4b26      	ldr	r3, [pc, #152]	; (8005d48 <UART_SetConfig+0x44c>)
 8005cae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005cb0:	e00d      	b.n	8005cce <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cb2:	f7fe f867 	bl	8003d84 <HAL_RCC_GetSysClockFreq>
 8005cb6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005cb8:	e009      	b.n	8005cce <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cbe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005cc0:	e005      	b.n	8005cce <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005ccc:	bf00      	nop
    }

    if (pclk != 0U)
 8005cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d021      	beq.n	8005d18 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd8:	4a1a      	ldr	r2, [pc, #104]	; (8005d44 <UART_SetConfig+0x448>)
 8005cda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005cde:	461a      	mov	r2, r3
 8005ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce2:	fbb3 f2f2 	udiv	r2, r3, r2
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	085b      	lsrs	r3, r3, #1
 8005cec:	441a      	add	r2, r3
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cf6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cf8:	6a3b      	ldr	r3, [r7, #32]
 8005cfa:	2b0f      	cmp	r3, #15
 8005cfc:	d909      	bls.n	8005d12 <UART_SetConfig+0x416>
 8005cfe:	6a3b      	ldr	r3, [r7, #32]
 8005d00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d04:	d205      	bcs.n	8005d12 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005d06:	6a3b      	ldr	r3, [r7, #32]
 8005d08:	b29a      	uxth	r2, r3
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	60da      	str	r2, [r3, #12]
 8005d10:	e002      	b.n	8005d18 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	2200      	movs	r2, #0
 8005d32:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005d34:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3730      	adds	r7, #48	; 0x30
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d42:	bf00      	nop
 8005d44:	080074dc 	.word	0x080074dc
 8005d48:	00f42400 	.word	0x00f42400

08005d4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b083      	sub	sp, #12
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d58:	f003 0301 	and.w	r3, r3, #1
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d00a      	beq.n	8005d76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	430a      	orrs	r2, r1
 8005d74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d7a:	f003 0302 	and.w	r3, r3, #2
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d00a      	beq.n	8005d98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	430a      	orrs	r2, r1
 8005d96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d9c:	f003 0304 	and.w	r3, r3, #4
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d00a      	beq.n	8005dba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	430a      	orrs	r2, r1
 8005db8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dbe:	f003 0308 	and.w	r3, r3, #8
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d00a      	beq.n	8005ddc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	430a      	orrs	r2, r1
 8005dda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de0:	f003 0310 	and.w	r3, r3, #16
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d00a      	beq.n	8005dfe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	430a      	orrs	r2, r1
 8005dfc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e02:	f003 0320 	and.w	r3, r3, #32
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d00a      	beq.n	8005e20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	430a      	orrs	r2, r1
 8005e1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d01a      	beq.n	8005e62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	430a      	orrs	r2, r1
 8005e40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e4a:	d10a      	bne.n	8005e62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	430a      	orrs	r2, r1
 8005e60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d00a      	beq.n	8005e84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	430a      	orrs	r2, r1
 8005e82:	605a      	str	r2, [r3, #4]
  }
}
 8005e84:	bf00      	nop
 8005e86:	370c      	adds	r7, #12
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr

08005e90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b098      	sub	sp, #96	; 0x60
 8005e94:	af02      	add	r7, sp, #8
 8005e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ea0:	f7fb f9f0 	bl	8001284 <HAL_GetTick>
 8005ea4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f003 0308 	and.w	r3, r3, #8
 8005eb0:	2b08      	cmp	r3, #8
 8005eb2:	d12f      	bne.n	8005f14 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005eb4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005eb8:	9300      	str	r3, [sp, #0]
 8005eba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f000 f88e 	bl	8005fe4 <UART_WaitOnFlagUntilTimeout>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d022      	beq.n	8005f14 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed6:	e853 3f00 	ldrex	r3, [r3]
 8005eda:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ede:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ee2:	653b      	str	r3, [r7, #80]	; 0x50
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	461a      	mov	r2, r3
 8005eea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005eec:	647b      	str	r3, [r7, #68]	; 0x44
 8005eee:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005ef2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ef4:	e841 2300 	strex	r3, r2, [r1]
 8005ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005efa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d1e6      	bne.n	8005ece <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2220      	movs	r2, #32
 8005f04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f10:	2303      	movs	r3, #3
 8005f12:	e063      	b.n	8005fdc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f003 0304 	and.w	r3, r3, #4
 8005f1e:	2b04      	cmp	r3, #4
 8005f20:	d149      	bne.n	8005fb6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f22:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f26:	9300      	str	r3, [sp, #0]
 8005f28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f000 f857 	bl	8005fe4 <UART_WaitOnFlagUntilTimeout>
 8005f36:	4603      	mov	r3, r0
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d03c      	beq.n	8005fb6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f44:	e853 3f00 	ldrex	r3, [r3]
 8005f48:	623b      	str	r3, [r7, #32]
   return(result);
 8005f4a:	6a3b      	ldr	r3, [r7, #32]
 8005f4c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f50:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	461a      	mov	r2, r3
 8005f58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f5a:	633b      	str	r3, [r7, #48]	; 0x30
 8005f5c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f62:	e841 2300 	strex	r3, r2, [r1]
 8005f66:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d1e6      	bne.n	8005f3c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	3308      	adds	r3, #8
 8005f74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	e853 3f00 	ldrex	r3, [r3]
 8005f7c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	f023 0301 	bic.w	r3, r3, #1
 8005f84:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	3308      	adds	r3, #8
 8005f8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f8e:	61fa      	str	r2, [r7, #28]
 8005f90:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f92:	69b9      	ldr	r1, [r7, #24]
 8005f94:	69fa      	ldr	r2, [r7, #28]
 8005f96:	e841 2300 	strex	r3, r2, [r1]
 8005f9a:	617b      	str	r3, [r7, #20]
   return(result);
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d1e5      	bne.n	8005f6e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2220      	movs	r2, #32
 8005fa6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2200      	movs	r2, #0
 8005fae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fb2:	2303      	movs	r3, #3
 8005fb4:	e012      	b.n	8005fdc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2220      	movs	r2, #32
 8005fba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2220      	movs	r2, #32
 8005fc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005fda:	2300      	movs	r3, #0
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3758      	adds	r7, #88	; 0x58
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}

08005fe4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	60f8      	str	r0, [r7, #12]
 8005fec:	60b9      	str	r1, [r7, #8]
 8005fee:	603b      	str	r3, [r7, #0]
 8005ff0:	4613      	mov	r3, r2
 8005ff2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ff4:	e049      	b.n	800608a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ff6:	69bb      	ldr	r3, [r7, #24]
 8005ff8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ffc:	d045      	beq.n	800608a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ffe:	f7fb f941 	bl	8001284 <HAL_GetTick>
 8006002:	4602      	mov	r2, r0
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	1ad3      	subs	r3, r2, r3
 8006008:	69ba      	ldr	r2, [r7, #24]
 800600a:	429a      	cmp	r2, r3
 800600c:	d302      	bcc.n	8006014 <UART_WaitOnFlagUntilTimeout+0x30>
 800600e:	69bb      	ldr	r3, [r7, #24]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d101      	bne.n	8006018 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006014:	2303      	movs	r3, #3
 8006016:	e048      	b.n	80060aa <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f003 0304 	and.w	r3, r3, #4
 8006022:	2b00      	cmp	r3, #0
 8006024:	d031      	beq.n	800608a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	69db      	ldr	r3, [r3, #28]
 800602c:	f003 0308 	and.w	r3, r3, #8
 8006030:	2b08      	cmp	r3, #8
 8006032:	d110      	bne.n	8006056 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	2208      	movs	r2, #8
 800603a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800603c:	68f8      	ldr	r0, [r7, #12]
 800603e:	f000 f838 	bl	80060b2 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2208      	movs	r2, #8
 8006046:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2200      	movs	r2, #0
 800604e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8006052:	2301      	movs	r3, #1
 8006054:	e029      	b.n	80060aa <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	69db      	ldr	r3, [r3, #28]
 800605c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006060:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006064:	d111      	bne.n	800608a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800606e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006070:	68f8      	ldr	r0, [r7, #12]
 8006072:	f000 f81e 	bl	80060b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2220      	movs	r2, #32
 800607a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2200      	movs	r2, #0
 8006082:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006086:	2303      	movs	r3, #3
 8006088:	e00f      	b.n	80060aa <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	69da      	ldr	r2, [r3, #28]
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	4013      	ands	r3, r2
 8006094:	68ba      	ldr	r2, [r7, #8]
 8006096:	429a      	cmp	r2, r3
 8006098:	bf0c      	ite	eq
 800609a:	2301      	moveq	r3, #1
 800609c:	2300      	movne	r3, #0
 800609e:	b2db      	uxtb	r3, r3
 80060a0:	461a      	mov	r2, r3
 80060a2:	79fb      	ldrb	r3, [r7, #7]
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d0a6      	beq.n	8005ff6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80060a8:	2300      	movs	r3, #0
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3710      	adds	r7, #16
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}

080060b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80060b2:	b480      	push	{r7}
 80060b4:	b095      	sub	sp, #84	; 0x54
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060c2:	e853 3f00 	ldrex	r3, [r3]
 80060c6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80060c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80060ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	461a      	mov	r2, r3
 80060d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060d8:	643b      	str	r3, [r7, #64]	; 0x40
 80060da:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80060de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80060e0:	e841 2300 	strex	r3, r2, [r1]
 80060e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80060e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d1e6      	bne.n	80060ba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	3308      	adds	r3, #8
 80060f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f4:	6a3b      	ldr	r3, [r7, #32]
 80060f6:	e853 3f00 	ldrex	r3, [r3]
 80060fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80060fc:	69fb      	ldr	r3, [r7, #28]
 80060fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006102:	f023 0301 	bic.w	r3, r3, #1
 8006106:	64bb      	str	r3, [r7, #72]	; 0x48
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	3308      	adds	r3, #8
 800610e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006110:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006112:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006114:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006116:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006118:	e841 2300 	strex	r3, r2, [r1]
 800611c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800611e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006120:	2b00      	cmp	r3, #0
 8006122:	d1e3      	bne.n	80060ec <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006128:	2b01      	cmp	r3, #1
 800612a:	d118      	bne.n	800615e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	e853 3f00 	ldrex	r3, [r3]
 8006138:	60bb      	str	r3, [r7, #8]
   return(result);
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	f023 0310 	bic.w	r3, r3, #16
 8006140:	647b      	str	r3, [r7, #68]	; 0x44
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	461a      	mov	r2, r3
 8006148:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800614a:	61bb      	str	r3, [r7, #24]
 800614c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800614e:	6979      	ldr	r1, [r7, #20]
 8006150:	69ba      	ldr	r2, [r7, #24]
 8006152:	e841 2300 	strex	r3, r2, [r1]
 8006156:	613b      	str	r3, [r7, #16]
   return(result);
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d1e6      	bne.n	800612c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2220      	movs	r2, #32
 8006162:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2200      	movs	r2, #0
 800616a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006172:	bf00      	nop
 8006174:	3754      	adds	r7, #84	; 0x54
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr

0800617e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800617e:	b480      	push	{r7}
 8006180:	b085      	sub	sp, #20
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800618c:	2b01      	cmp	r3, #1
 800618e:	d101      	bne.n	8006194 <HAL_UARTEx_DisableFifoMode+0x16>
 8006190:	2302      	movs	r3, #2
 8006192:	e027      	b.n	80061e4 <HAL_UARTEx_DisableFifoMode+0x66>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2224      	movs	r2, #36	; 0x24
 80061a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f022 0201 	bic.w	r2, r2, #1
 80061ba:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80061c2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2200      	movs	r2, #0
 80061c8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	68fa      	ldr	r2, [r7, #12]
 80061d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2220      	movs	r2, #32
 80061d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2200      	movs	r2, #0
 80061de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80061e2:	2300      	movs	r3, #0
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3714      	adds	r7, #20
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr

080061f0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b084      	sub	sp, #16
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006200:	2b01      	cmp	r3, #1
 8006202:	d101      	bne.n	8006208 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006204:	2302      	movs	r3, #2
 8006206:	e02d      	b.n	8006264 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2201      	movs	r2, #1
 800620c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2224      	movs	r2, #36	; 0x24
 8006214:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f022 0201 	bic.w	r2, r2, #1
 800622e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	683a      	ldr	r2, [r7, #0]
 8006240:	430a      	orrs	r2, r1
 8006242:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f000 f84f 	bl	80062e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	68fa      	ldr	r2, [r7, #12]
 8006250:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2220      	movs	r2, #32
 8006256:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2200      	movs	r2, #0
 800625e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006262:	2300      	movs	r3, #0
}
 8006264:	4618      	mov	r0, r3
 8006266:	3710      	adds	r7, #16
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}

0800626c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b084      	sub	sp, #16
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800627c:	2b01      	cmp	r3, #1
 800627e:	d101      	bne.n	8006284 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006280:	2302      	movs	r3, #2
 8006282:	e02d      	b.n	80062e0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2201      	movs	r2, #1
 8006288:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2224      	movs	r2, #36	; 0x24
 8006290:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f022 0201 	bic.w	r2, r2, #1
 80062aa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	683a      	ldr	r2, [r7, #0]
 80062bc:	430a      	orrs	r2, r1
 80062be:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f000 f811 	bl	80062e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	68fa      	ldr	r2, [r7, #12]
 80062cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2220      	movs	r2, #32
 80062d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2200      	movs	r2, #0
 80062da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80062de:	2300      	movs	r3, #0
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3710      	adds	r7, #16
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}

080062e8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b085      	sub	sp, #20
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d108      	bne.n	800630a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2201      	movs	r2, #1
 80062fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2201      	movs	r2, #1
 8006304:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006308:	e031      	b.n	800636e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800630a:	2308      	movs	r3, #8
 800630c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800630e:	2308      	movs	r3, #8
 8006310:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	0e5b      	lsrs	r3, r3, #25
 800631a:	b2db      	uxtb	r3, r3
 800631c:	f003 0307 	and.w	r3, r3, #7
 8006320:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	0f5b      	lsrs	r3, r3, #29
 800632a:	b2db      	uxtb	r3, r3
 800632c:	f003 0307 	and.w	r3, r3, #7
 8006330:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006332:	7bbb      	ldrb	r3, [r7, #14]
 8006334:	7b3a      	ldrb	r2, [r7, #12]
 8006336:	4911      	ldr	r1, [pc, #68]	; (800637c <UARTEx_SetNbDataToProcess+0x94>)
 8006338:	5c8a      	ldrb	r2, [r1, r2]
 800633a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800633e:	7b3a      	ldrb	r2, [r7, #12]
 8006340:	490f      	ldr	r1, [pc, #60]	; (8006380 <UARTEx_SetNbDataToProcess+0x98>)
 8006342:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006344:	fb93 f3f2 	sdiv	r3, r3, r2
 8006348:	b29a      	uxth	r2, r3
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006350:	7bfb      	ldrb	r3, [r7, #15]
 8006352:	7b7a      	ldrb	r2, [r7, #13]
 8006354:	4909      	ldr	r1, [pc, #36]	; (800637c <UARTEx_SetNbDataToProcess+0x94>)
 8006356:	5c8a      	ldrb	r2, [r1, r2]
 8006358:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800635c:	7b7a      	ldrb	r2, [r7, #13]
 800635e:	4908      	ldr	r1, [pc, #32]	; (8006380 <UARTEx_SetNbDataToProcess+0x98>)
 8006360:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006362:	fb93 f3f2 	sdiv	r3, r3, r2
 8006366:	b29a      	uxth	r2, r3
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800636e:	bf00      	nop
 8006370:	3714      	adds	r7, #20
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr
 800637a:	bf00      	nop
 800637c:	080074f4 	.word	0x080074f4
 8006380:	080074fc 	.word	0x080074fc

08006384 <__errno>:
 8006384:	4b01      	ldr	r3, [pc, #4]	; (800638c <__errno+0x8>)
 8006386:	6818      	ldr	r0, [r3, #0]
 8006388:	4770      	bx	lr
 800638a:	bf00      	nop
 800638c:	20000014 	.word	0x20000014

08006390 <__libc_init_array>:
 8006390:	b570      	push	{r4, r5, r6, lr}
 8006392:	4d0d      	ldr	r5, [pc, #52]	; (80063c8 <__libc_init_array+0x38>)
 8006394:	4c0d      	ldr	r4, [pc, #52]	; (80063cc <__libc_init_array+0x3c>)
 8006396:	1b64      	subs	r4, r4, r5
 8006398:	10a4      	asrs	r4, r4, #2
 800639a:	2600      	movs	r6, #0
 800639c:	42a6      	cmp	r6, r4
 800639e:	d109      	bne.n	80063b4 <__libc_init_array+0x24>
 80063a0:	4d0b      	ldr	r5, [pc, #44]	; (80063d0 <__libc_init_array+0x40>)
 80063a2:	4c0c      	ldr	r4, [pc, #48]	; (80063d4 <__libc_init_array+0x44>)
 80063a4:	f001 f824 	bl	80073f0 <_init>
 80063a8:	1b64      	subs	r4, r4, r5
 80063aa:	10a4      	asrs	r4, r4, #2
 80063ac:	2600      	movs	r6, #0
 80063ae:	42a6      	cmp	r6, r4
 80063b0:	d105      	bne.n	80063be <__libc_init_array+0x2e>
 80063b2:	bd70      	pop	{r4, r5, r6, pc}
 80063b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80063b8:	4798      	blx	r3
 80063ba:	3601      	adds	r6, #1
 80063bc:	e7ee      	b.n	800639c <__libc_init_array+0xc>
 80063be:	f855 3b04 	ldr.w	r3, [r5], #4
 80063c2:	4798      	blx	r3
 80063c4:	3601      	adds	r6, #1
 80063c6:	e7f2      	b.n	80063ae <__libc_init_array+0x1e>
 80063c8:	080075a4 	.word	0x080075a4
 80063cc:	080075a4 	.word	0x080075a4
 80063d0:	080075a4 	.word	0x080075a4
 80063d4:	080075a8 	.word	0x080075a8

080063d8 <memset>:
 80063d8:	4402      	add	r2, r0
 80063da:	4603      	mov	r3, r0
 80063dc:	4293      	cmp	r3, r2
 80063de:	d100      	bne.n	80063e2 <memset+0xa>
 80063e0:	4770      	bx	lr
 80063e2:	f803 1b01 	strb.w	r1, [r3], #1
 80063e6:	e7f9      	b.n	80063dc <memset+0x4>

080063e8 <iprintf>:
 80063e8:	b40f      	push	{r0, r1, r2, r3}
 80063ea:	4b0a      	ldr	r3, [pc, #40]	; (8006414 <iprintf+0x2c>)
 80063ec:	b513      	push	{r0, r1, r4, lr}
 80063ee:	681c      	ldr	r4, [r3, #0]
 80063f0:	b124      	cbz	r4, 80063fc <iprintf+0x14>
 80063f2:	69a3      	ldr	r3, [r4, #24]
 80063f4:	b913      	cbnz	r3, 80063fc <iprintf+0x14>
 80063f6:	4620      	mov	r0, r4
 80063f8:	f000 fa5e 	bl	80068b8 <__sinit>
 80063fc:	ab05      	add	r3, sp, #20
 80063fe:	9a04      	ldr	r2, [sp, #16]
 8006400:	68a1      	ldr	r1, [r4, #8]
 8006402:	9301      	str	r3, [sp, #4]
 8006404:	4620      	mov	r0, r4
 8006406:	f000 fc67 	bl	8006cd8 <_vfiprintf_r>
 800640a:	b002      	add	sp, #8
 800640c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006410:	b004      	add	sp, #16
 8006412:	4770      	bx	lr
 8006414:	20000014 	.word	0x20000014

08006418 <_puts_r>:
 8006418:	b570      	push	{r4, r5, r6, lr}
 800641a:	460e      	mov	r6, r1
 800641c:	4605      	mov	r5, r0
 800641e:	b118      	cbz	r0, 8006428 <_puts_r+0x10>
 8006420:	6983      	ldr	r3, [r0, #24]
 8006422:	b90b      	cbnz	r3, 8006428 <_puts_r+0x10>
 8006424:	f000 fa48 	bl	80068b8 <__sinit>
 8006428:	69ab      	ldr	r3, [r5, #24]
 800642a:	68ac      	ldr	r4, [r5, #8]
 800642c:	b913      	cbnz	r3, 8006434 <_puts_r+0x1c>
 800642e:	4628      	mov	r0, r5
 8006430:	f000 fa42 	bl	80068b8 <__sinit>
 8006434:	4b2c      	ldr	r3, [pc, #176]	; (80064e8 <_puts_r+0xd0>)
 8006436:	429c      	cmp	r4, r3
 8006438:	d120      	bne.n	800647c <_puts_r+0x64>
 800643a:	686c      	ldr	r4, [r5, #4]
 800643c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800643e:	07db      	lsls	r3, r3, #31
 8006440:	d405      	bmi.n	800644e <_puts_r+0x36>
 8006442:	89a3      	ldrh	r3, [r4, #12]
 8006444:	0598      	lsls	r0, r3, #22
 8006446:	d402      	bmi.n	800644e <_puts_r+0x36>
 8006448:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800644a:	f000 fad3 	bl	80069f4 <__retarget_lock_acquire_recursive>
 800644e:	89a3      	ldrh	r3, [r4, #12]
 8006450:	0719      	lsls	r1, r3, #28
 8006452:	d51d      	bpl.n	8006490 <_puts_r+0x78>
 8006454:	6923      	ldr	r3, [r4, #16]
 8006456:	b1db      	cbz	r3, 8006490 <_puts_r+0x78>
 8006458:	3e01      	subs	r6, #1
 800645a:	68a3      	ldr	r3, [r4, #8]
 800645c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006460:	3b01      	subs	r3, #1
 8006462:	60a3      	str	r3, [r4, #8]
 8006464:	bb39      	cbnz	r1, 80064b6 <_puts_r+0x9e>
 8006466:	2b00      	cmp	r3, #0
 8006468:	da38      	bge.n	80064dc <_puts_r+0xc4>
 800646a:	4622      	mov	r2, r4
 800646c:	210a      	movs	r1, #10
 800646e:	4628      	mov	r0, r5
 8006470:	f000 f848 	bl	8006504 <__swbuf_r>
 8006474:	3001      	adds	r0, #1
 8006476:	d011      	beq.n	800649c <_puts_r+0x84>
 8006478:	250a      	movs	r5, #10
 800647a:	e011      	b.n	80064a0 <_puts_r+0x88>
 800647c:	4b1b      	ldr	r3, [pc, #108]	; (80064ec <_puts_r+0xd4>)
 800647e:	429c      	cmp	r4, r3
 8006480:	d101      	bne.n	8006486 <_puts_r+0x6e>
 8006482:	68ac      	ldr	r4, [r5, #8]
 8006484:	e7da      	b.n	800643c <_puts_r+0x24>
 8006486:	4b1a      	ldr	r3, [pc, #104]	; (80064f0 <_puts_r+0xd8>)
 8006488:	429c      	cmp	r4, r3
 800648a:	bf08      	it	eq
 800648c:	68ec      	ldreq	r4, [r5, #12]
 800648e:	e7d5      	b.n	800643c <_puts_r+0x24>
 8006490:	4621      	mov	r1, r4
 8006492:	4628      	mov	r0, r5
 8006494:	f000 f888 	bl	80065a8 <__swsetup_r>
 8006498:	2800      	cmp	r0, #0
 800649a:	d0dd      	beq.n	8006458 <_puts_r+0x40>
 800649c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80064a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80064a2:	07da      	lsls	r2, r3, #31
 80064a4:	d405      	bmi.n	80064b2 <_puts_r+0x9a>
 80064a6:	89a3      	ldrh	r3, [r4, #12]
 80064a8:	059b      	lsls	r3, r3, #22
 80064aa:	d402      	bmi.n	80064b2 <_puts_r+0x9a>
 80064ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80064ae:	f000 faa2 	bl	80069f6 <__retarget_lock_release_recursive>
 80064b2:	4628      	mov	r0, r5
 80064b4:	bd70      	pop	{r4, r5, r6, pc}
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	da04      	bge.n	80064c4 <_puts_r+0xac>
 80064ba:	69a2      	ldr	r2, [r4, #24]
 80064bc:	429a      	cmp	r2, r3
 80064be:	dc06      	bgt.n	80064ce <_puts_r+0xb6>
 80064c0:	290a      	cmp	r1, #10
 80064c2:	d004      	beq.n	80064ce <_puts_r+0xb6>
 80064c4:	6823      	ldr	r3, [r4, #0]
 80064c6:	1c5a      	adds	r2, r3, #1
 80064c8:	6022      	str	r2, [r4, #0]
 80064ca:	7019      	strb	r1, [r3, #0]
 80064cc:	e7c5      	b.n	800645a <_puts_r+0x42>
 80064ce:	4622      	mov	r2, r4
 80064d0:	4628      	mov	r0, r5
 80064d2:	f000 f817 	bl	8006504 <__swbuf_r>
 80064d6:	3001      	adds	r0, #1
 80064d8:	d1bf      	bne.n	800645a <_puts_r+0x42>
 80064da:	e7df      	b.n	800649c <_puts_r+0x84>
 80064dc:	6823      	ldr	r3, [r4, #0]
 80064de:	250a      	movs	r5, #10
 80064e0:	1c5a      	adds	r2, r3, #1
 80064e2:	6022      	str	r2, [r4, #0]
 80064e4:	701d      	strb	r5, [r3, #0]
 80064e6:	e7db      	b.n	80064a0 <_puts_r+0x88>
 80064e8:	08007528 	.word	0x08007528
 80064ec:	08007548 	.word	0x08007548
 80064f0:	08007508 	.word	0x08007508

080064f4 <puts>:
 80064f4:	4b02      	ldr	r3, [pc, #8]	; (8006500 <puts+0xc>)
 80064f6:	4601      	mov	r1, r0
 80064f8:	6818      	ldr	r0, [r3, #0]
 80064fa:	f7ff bf8d 	b.w	8006418 <_puts_r>
 80064fe:	bf00      	nop
 8006500:	20000014 	.word	0x20000014

08006504 <__swbuf_r>:
 8006504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006506:	460e      	mov	r6, r1
 8006508:	4614      	mov	r4, r2
 800650a:	4605      	mov	r5, r0
 800650c:	b118      	cbz	r0, 8006516 <__swbuf_r+0x12>
 800650e:	6983      	ldr	r3, [r0, #24]
 8006510:	b90b      	cbnz	r3, 8006516 <__swbuf_r+0x12>
 8006512:	f000 f9d1 	bl	80068b8 <__sinit>
 8006516:	4b21      	ldr	r3, [pc, #132]	; (800659c <__swbuf_r+0x98>)
 8006518:	429c      	cmp	r4, r3
 800651a:	d12b      	bne.n	8006574 <__swbuf_r+0x70>
 800651c:	686c      	ldr	r4, [r5, #4]
 800651e:	69a3      	ldr	r3, [r4, #24]
 8006520:	60a3      	str	r3, [r4, #8]
 8006522:	89a3      	ldrh	r3, [r4, #12]
 8006524:	071a      	lsls	r2, r3, #28
 8006526:	d52f      	bpl.n	8006588 <__swbuf_r+0x84>
 8006528:	6923      	ldr	r3, [r4, #16]
 800652a:	b36b      	cbz	r3, 8006588 <__swbuf_r+0x84>
 800652c:	6923      	ldr	r3, [r4, #16]
 800652e:	6820      	ldr	r0, [r4, #0]
 8006530:	1ac0      	subs	r0, r0, r3
 8006532:	6963      	ldr	r3, [r4, #20]
 8006534:	b2f6      	uxtb	r6, r6
 8006536:	4283      	cmp	r3, r0
 8006538:	4637      	mov	r7, r6
 800653a:	dc04      	bgt.n	8006546 <__swbuf_r+0x42>
 800653c:	4621      	mov	r1, r4
 800653e:	4628      	mov	r0, r5
 8006540:	f000 f926 	bl	8006790 <_fflush_r>
 8006544:	bb30      	cbnz	r0, 8006594 <__swbuf_r+0x90>
 8006546:	68a3      	ldr	r3, [r4, #8]
 8006548:	3b01      	subs	r3, #1
 800654a:	60a3      	str	r3, [r4, #8]
 800654c:	6823      	ldr	r3, [r4, #0]
 800654e:	1c5a      	adds	r2, r3, #1
 8006550:	6022      	str	r2, [r4, #0]
 8006552:	701e      	strb	r6, [r3, #0]
 8006554:	6963      	ldr	r3, [r4, #20]
 8006556:	3001      	adds	r0, #1
 8006558:	4283      	cmp	r3, r0
 800655a:	d004      	beq.n	8006566 <__swbuf_r+0x62>
 800655c:	89a3      	ldrh	r3, [r4, #12]
 800655e:	07db      	lsls	r3, r3, #31
 8006560:	d506      	bpl.n	8006570 <__swbuf_r+0x6c>
 8006562:	2e0a      	cmp	r6, #10
 8006564:	d104      	bne.n	8006570 <__swbuf_r+0x6c>
 8006566:	4621      	mov	r1, r4
 8006568:	4628      	mov	r0, r5
 800656a:	f000 f911 	bl	8006790 <_fflush_r>
 800656e:	b988      	cbnz	r0, 8006594 <__swbuf_r+0x90>
 8006570:	4638      	mov	r0, r7
 8006572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006574:	4b0a      	ldr	r3, [pc, #40]	; (80065a0 <__swbuf_r+0x9c>)
 8006576:	429c      	cmp	r4, r3
 8006578:	d101      	bne.n	800657e <__swbuf_r+0x7a>
 800657a:	68ac      	ldr	r4, [r5, #8]
 800657c:	e7cf      	b.n	800651e <__swbuf_r+0x1a>
 800657e:	4b09      	ldr	r3, [pc, #36]	; (80065a4 <__swbuf_r+0xa0>)
 8006580:	429c      	cmp	r4, r3
 8006582:	bf08      	it	eq
 8006584:	68ec      	ldreq	r4, [r5, #12]
 8006586:	e7ca      	b.n	800651e <__swbuf_r+0x1a>
 8006588:	4621      	mov	r1, r4
 800658a:	4628      	mov	r0, r5
 800658c:	f000 f80c 	bl	80065a8 <__swsetup_r>
 8006590:	2800      	cmp	r0, #0
 8006592:	d0cb      	beq.n	800652c <__swbuf_r+0x28>
 8006594:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006598:	e7ea      	b.n	8006570 <__swbuf_r+0x6c>
 800659a:	bf00      	nop
 800659c:	08007528 	.word	0x08007528
 80065a0:	08007548 	.word	0x08007548
 80065a4:	08007508 	.word	0x08007508

080065a8 <__swsetup_r>:
 80065a8:	4b32      	ldr	r3, [pc, #200]	; (8006674 <__swsetup_r+0xcc>)
 80065aa:	b570      	push	{r4, r5, r6, lr}
 80065ac:	681d      	ldr	r5, [r3, #0]
 80065ae:	4606      	mov	r6, r0
 80065b0:	460c      	mov	r4, r1
 80065b2:	b125      	cbz	r5, 80065be <__swsetup_r+0x16>
 80065b4:	69ab      	ldr	r3, [r5, #24]
 80065b6:	b913      	cbnz	r3, 80065be <__swsetup_r+0x16>
 80065b8:	4628      	mov	r0, r5
 80065ba:	f000 f97d 	bl	80068b8 <__sinit>
 80065be:	4b2e      	ldr	r3, [pc, #184]	; (8006678 <__swsetup_r+0xd0>)
 80065c0:	429c      	cmp	r4, r3
 80065c2:	d10f      	bne.n	80065e4 <__swsetup_r+0x3c>
 80065c4:	686c      	ldr	r4, [r5, #4]
 80065c6:	89a3      	ldrh	r3, [r4, #12]
 80065c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80065cc:	0719      	lsls	r1, r3, #28
 80065ce:	d42c      	bmi.n	800662a <__swsetup_r+0x82>
 80065d0:	06dd      	lsls	r5, r3, #27
 80065d2:	d411      	bmi.n	80065f8 <__swsetup_r+0x50>
 80065d4:	2309      	movs	r3, #9
 80065d6:	6033      	str	r3, [r6, #0]
 80065d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80065dc:	81a3      	strh	r3, [r4, #12]
 80065de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80065e2:	e03e      	b.n	8006662 <__swsetup_r+0xba>
 80065e4:	4b25      	ldr	r3, [pc, #148]	; (800667c <__swsetup_r+0xd4>)
 80065e6:	429c      	cmp	r4, r3
 80065e8:	d101      	bne.n	80065ee <__swsetup_r+0x46>
 80065ea:	68ac      	ldr	r4, [r5, #8]
 80065ec:	e7eb      	b.n	80065c6 <__swsetup_r+0x1e>
 80065ee:	4b24      	ldr	r3, [pc, #144]	; (8006680 <__swsetup_r+0xd8>)
 80065f0:	429c      	cmp	r4, r3
 80065f2:	bf08      	it	eq
 80065f4:	68ec      	ldreq	r4, [r5, #12]
 80065f6:	e7e6      	b.n	80065c6 <__swsetup_r+0x1e>
 80065f8:	0758      	lsls	r0, r3, #29
 80065fa:	d512      	bpl.n	8006622 <__swsetup_r+0x7a>
 80065fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80065fe:	b141      	cbz	r1, 8006612 <__swsetup_r+0x6a>
 8006600:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006604:	4299      	cmp	r1, r3
 8006606:	d002      	beq.n	800660e <__swsetup_r+0x66>
 8006608:	4630      	mov	r0, r6
 800660a:	f000 fa5b 	bl	8006ac4 <_free_r>
 800660e:	2300      	movs	r3, #0
 8006610:	6363      	str	r3, [r4, #52]	; 0x34
 8006612:	89a3      	ldrh	r3, [r4, #12]
 8006614:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006618:	81a3      	strh	r3, [r4, #12]
 800661a:	2300      	movs	r3, #0
 800661c:	6063      	str	r3, [r4, #4]
 800661e:	6923      	ldr	r3, [r4, #16]
 8006620:	6023      	str	r3, [r4, #0]
 8006622:	89a3      	ldrh	r3, [r4, #12]
 8006624:	f043 0308 	orr.w	r3, r3, #8
 8006628:	81a3      	strh	r3, [r4, #12]
 800662a:	6923      	ldr	r3, [r4, #16]
 800662c:	b94b      	cbnz	r3, 8006642 <__swsetup_r+0x9a>
 800662e:	89a3      	ldrh	r3, [r4, #12]
 8006630:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006634:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006638:	d003      	beq.n	8006642 <__swsetup_r+0x9a>
 800663a:	4621      	mov	r1, r4
 800663c:	4630      	mov	r0, r6
 800663e:	f000 fa01 	bl	8006a44 <__smakebuf_r>
 8006642:	89a0      	ldrh	r0, [r4, #12]
 8006644:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006648:	f010 0301 	ands.w	r3, r0, #1
 800664c:	d00a      	beq.n	8006664 <__swsetup_r+0xbc>
 800664e:	2300      	movs	r3, #0
 8006650:	60a3      	str	r3, [r4, #8]
 8006652:	6963      	ldr	r3, [r4, #20]
 8006654:	425b      	negs	r3, r3
 8006656:	61a3      	str	r3, [r4, #24]
 8006658:	6923      	ldr	r3, [r4, #16]
 800665a:	b943      	cbnz	r3, 800666e <__swsetup_r+0xc6>
 800665c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006660:	d1ba      	bne.n	80065d8 <__swsetup_r+0x30>
 8006662:	bd70      	pop	{r4, r5, r6, pc}
 8006664:	0781      	lsls	r1, r0, #30
 8006666:	bf58      	it	pl
 8006668:	6963      	ldrpl	r3, [r4, #20]
 800666a:	60a3      	str	r3, [r4, #8]
 800666c:	e7f4      	b.n	8006658 <__swsetup_r+0xb0>
 800666e:	2000      	movs	r0, #0
 8006670:	e7f7      	b.n	8006662 <__swsetup_r+0xba>
 8006672:	bf00      	nop
 8006674:	20000014 	.word	0x20000014
 8006678:	08007528 	.word	0x08007528
 800667c:	08007548 	.word	0x08007548
 8006680:	08007508 	.word	0x08007508

08006684 <__sflush_r>:
 8006684:	898a      	ldrh	r2, [r1, #12]
 8006686:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800668a:	4605      	mov	r5, r0
 800668c:	0710      	lsls	r0, r2, #28
 800668e:	460c      	mov	r4, r1
 8006690:	d458      	bmi.n	8006744 <__sflush_r+0xc0>
 8006692:	684b      	ldr	r3, [r1, #4]
 8006694:	2b00      	cmp	r3, #0
 8006696:	dc05      	bgt.n	80066a4 <__sflush_r+0x20>
 8006698:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800669a:	2b00      	cmp	r3, #0
 800669c:	dc02      	bgt.n	80066a4 <__sflush_r+0x20>
 800669e:	2000      	movs	r0, #0
 80066a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80066a6:	2e00      	cmp	r6, #0
 80066a8:	d0f9      	beq.n	800669e <__sflush_r+0x1a>
 80066aa:	2300      	movs	r3, #0
 80066ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80066b0:	682f      	ldr	r7, [r5, #0]
 80066b2:	602b      	str	r3, [r5, #0]
 80066b4:	d032      	beq.n	800671c <__sflush_r+0x98>
 80066b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80066b8:	89a3      	ldrh	r3, [r4, #12]
 80066ba:	075a      	lsls	r2, r3, #29
 80066bc:	d505      	bpl.n	80066ca <__sflush_r+0x46>
 80066be:	6863      	ldr	r3, [r4, #4]
 80066c0:	1ac0      	subs	r0, r0, r3
 80066c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80066c4:	b10b      	cbz	r3, 80066ca <__sflush_r+0x46>
 80066c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80066c8:	1ac0      	subs	r0, r0, r3
 80066ca:	2300      	movs	r3, #0
 80066cc:	4602      	mov	r2, r0
 80066ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80066d0:	6a21      	ldr	r1, [r4, #32]
 80066d2:	4628      	mov	r0, r5
 80066d4:	47b0      	blx	r6
 80066d6:	1c43      	adds	r3, r0, #1
 80066d8:	89a3      	ldrh	r3, [r4, #12]
 80066da:	d106      	bne.n	80066ea <__sflush_r+0x66>
 80066dc:	6829      	ldr	r1, [r5, #0]
 80066de:	291d      	cmp	r1, #29
 80066e0:	d82c      	bhi.n	800673c <__sflush_r+0xb8>
 80066e2:	4a2a      	ldr	r2, [pc, #168]	; (800678c <__sflush_r+0x108>)
 80066e4:	40ca      	lsrs	r2, r1
 80066e6:	07d6      	lsls	r6, r2, #31
 80066e8:	d528      	bpl.n	800673c <__sflush_r+0xb8>
 80066ea:	2200      	movs	r2, #0
 80066ec:	6062      	str	r2, [r4, #4]
 80066ee:	04d9      	lsls	r1, r3, #19
 80066f0:	6922      	ldr	r2, [r4, #16]
 80066f2:	6022      	str	r2, [r4, #0]
 80066f4:	d504      	bpl.n	8006700 <__sflush_r+0x7c>
 80066f6:	1c42      	adds	r2, r0, #1
 80066f8:	d101      	bne.n	80066fe <__sflush_r+0x7a>
 80066fa:	682b      	ldr	r3, [r5, #0]
 80066fc:	b903      	cbnz	r3, 8006700 <__sflush_r+0x7c>
 80066fe:	6560      	str	r0, [r4, #84]	; 0x54
 8006700:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006702:	602f      	str	r7, [r5, #0]
 8006704:	2900      	cmp	r1, #0
 8006706:	d0ca      	beq.n	800669e <__sflush_r+0x1a>
 8006708:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800670c:	4299      	cmp	r1, r3
 800670e:	d002      	beq.n	8006716 <__sflush_r+0x92>
 8006710:	4628      	mov	r0, r5
 8006712:	f000 f9d7 	bl	8006ac4 <_free_r>
 8006716:	2000      	movs	r0, #0
 8006718:	6360      	str	r0, [r4, #52]	; 0x34
 800671a:	e7c1      	b.n	80066a0 <__sflush_r+0x1c>
 800671c:	6a21      	ldr	r1, [r4, #32]
 800671e:	2301      	movs	r3, #1
 8006720:	4628      	mov	r0, r5
 8006722:	47b0      	blx	r6
 8006724:	1c41      	adds	r1, r0, #1
 8006726:	d1c7      	bne.n	80066b8 <__sflush_r+0x34>
 8006728:	682b      	ldr	r3, [r5, #0]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d0c4      	beq.n	80066b8 <__sflush_r+0x34>
 800672e:	2b1d      	cmp	r3, #29
 8006730:	d001      	beq.n	8006736 <__sflush_r+0xb2>
 8006732:	2b16      	cmp	r3, #22
 8006734:	d101      	bne.n	800673a <__sflush_r+0xb6>
 8006736:	602f      	str	r7, [r5, #0]
 8006738:	e7b1      	b.n	800669e <__sflush_r+0x1a>
 800673a:	89a3      	ldrh	r3, [r4, #12]
 800673c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006740:	81a3      	strh	r3, [r4, #12]
 8006742:	e7ad      	b.n	80066a0 <__sflush_r+0x1c>
 8006744:	690f      	ldr	r7, [r1, #16]
 8006746:	2f00      	cmp	r7, #0
 8006748:	d0a9      	beq.n	800669e <__sflush_r+0x1a>
 800674a:	0793      	lsls	r3, r2, #30
 800674c:	680e      	ldr	r6, [r1, #0]
 800674e:	bf08      	it	eq
 8006750:	694b      	ldreq	r3, [r1, #20]
 8006752:	600f      	str	r7, [r1, #0]
 8006754:	bf18      	it	ne
 8006756:	2300      	movne	r3, #0
 8006758:	eba6 0807 	sub.w	r8, r6, r7
 800675c:	608b      	str	r3, [r1, #8]
 800675e:	f1b8 0f00 	cmp.w	r8, #0
 8006762:	dd9c      	ble.n	800669e <__sflush_r+0x1a>
 8006764:	6a21      	ldr	r1, [r4, #32]
 8006766:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006768:	4643      	mov	r3, r8
 800676a:	463a      	mov	r2, r7
 800676c:	4628      	mov	r0, r5
 800676e:	47b0      	blx	r6
 8006770:	2800      	cmp	r0, #0
 8006772:	dc06      	bgt.n	8006782 <__sflush_r+0xfe>
 8006774:	89a3      	ldrh	r3, [r4, #12]
 8006776:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800677a:	81a3      	strh	r3, [r4, #12]
 800677c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006780:	e78e      	b.n	80066a0 <__sflush_r+0x1c>
 8006782:	4407      	add	r7, r0
 8006784:	eba8 0800 	sub.w	r8, r8, r0
 8006788:	e7e9      	b.n	800675e <__sflush_r+0xda>
 800678a:	bf00      	nop
 800678c:	20400001 	.word	0x20400001

08006790 <_fflush_r>:
 8006790:	b538      	push	{r3, r4, r5, lr}
 8006792:	690b      	ldr	r3, [r1, #16]
 8006794:	4605      	mov	r5, r0
 8006796:	460c      	mov	r4, r1
 8006798:	b913      	cbnz	r3, 80067a0 <_fflush_r+0x10>
 800679a:	2500      	movs	r5, #0
 800679c:	4628      	mov	r0, r5
 800679e:	bd38      	pop	{r3, r4, r5, pc}
 80067a0:	b118      	cbz	r0, 80067aa <_fflush_r+0x1a>
 80067a2:	6983      	ldr	r3, [r0, #24]
 80067a4:	b90b      	cbnz	r3, 80067aa <_fflush_r+0x1a>
 80067a6:	f000 f887 	bl	80068b8 <__sinit>
 80067aa:	4b14      	ldr	r3, [pc, #80]	; (80067fc <_fflush_r+0x6c>)
 80067ac:	429c      	cmp	r4, r3
 80067ae:	d11b      	bne.n	80067e8 <_fflush_r+0x58>
 80067b0:	686c      	ldr	r4, [r5, #4]
 80067b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d0ef      	beq.n	800679a <_fflush_r+0xa>
 80067ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80067bc:	07d0      	lsls	r0, r2, #31
 80067be:	d404      	bmi.n	80067ca <_fflush_r+0x3a>
 80067c0:	0599      	lsls	r1, r3, #22
 80067c2:	d402      	bmi.n	80067ca <_fflush_r+0x3a>
 80067c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067c6:	f000 f915 	bl	80069f4 <__retarget_lock_acquire_recursive>
 80067ca:	4628      	mov	r0, r5
 80067cc:	4621      	mov	r1, r4
 80067ce:	f7ff ff59 	bl	8006684 <__sflush_r>
 80067d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80067d4:	07da      	lsls	r2, r3, #31
 80067d6:	4605      	mov	r5, r0
 80067d8:	d4e0      	bmi.n	800679c <_fflush_r+0xc>
 80067da:	89a3      	ldrh	r3, [r4, #12]
 80067dc:	059b      	lsls	r3, r3, #22
 80067de:	d4dd      	bmi.n	800679c <_fflush_r+0xc>
 80067e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067e2:	f000 f908 	bl	80069f6 <__retarget_lock_release_recursive>
 80067e6:	e7d9      	b.n	800679c <_fflush_r+0xc>
 80067e8:	4b05      	ldr	r3, [pc, #20]	; (8006800 <_fflush_r+0x70>)
 80067ea:	429c      	cmp	r4, r3
 80067ec:	d101      	bne.n	80067f2 <_fflush_r+0x62>
 80067ee:	68ac      	ldr	r4, [r5, #8]
 80067f0:	e7df      	b.n	80067b2 <_fflush_r+0x22>
 80067f2:	4b04      	ldr	r3, [pc, #16]	; (8006804 <_fflush_r+0x74>)
 80067f4:	429c      	cmp	r4, r3
 80067f6:	bf08      	it	eq
 80067f8:	68ec      	ldreq	r4, [r5, #12]
 80067fa:	e7da      	b.n	80067b2 <_fflush_r+0x22>
 80067fc:	08007528 	.word	0x08007528
 8006800:	08007548 	.word	0x08007548
 8006804:	08007508 	.word	0x08007508

08006808 <std>:
 8006808:	2300      	movs	r3, #0
 800680a:	b510      	push	{r4, lr}
 800680c:	4604      	mov	r4, r0
 800680e:	e9c0 3300 	strd	r3, r3, [r0]
 8006812:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006816:	6083      	str	r3, [r0, #8]
 8006818:	8181      	strh	r1, [r0, #12]
 800681a:	6643      	str	r3, [r0, #100]	; 0x64
 800681c:	81c2      	strh	r2, [r0, #14]
 800681e:	6183      	str	r3, [r0, #24]
 8006820:	4619      	mov	r1, r3
 8006822:	2208      	movs	r2, #8
 8006824:	305c      	adds	r0, #92	; 0x5c
 8006826:	f7ff fdd7 	bl	80063d8 <memset>
 800682a:	4b05      	ldr	r3, [pc, #20]	; (8006840 <std+0x38>)
 800682c:	6263      	str	r3, [r4, #36]	; 0x24
 800682e:	4b05      	ldr	r3, [pc, #20]	; (8006844 <std+0x3c>)
 8006830:	62a3      	str	r3, [r4, #40]	; 0x28
 8006832:	4b05      	ldr	r3, [pc, #20]	; (8006848 <std+0x40>)
 8006834:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006836:	4b05      	ldr	r3, [pc, #20]	; (800684c <std+0x44>)
 8006838:	6224      	str	r4, [r4, #32]
 800683a:	6323      	str	r3, [r4, #48]	; 0x30
 800683c:	bd10      	pop	{r4, pc}
 800683e:	bf00      	nop
 8006840:	08007281 	.word	0x08007281
 8006844:	080072a3 	.word	0x080072a3
 8006848:	080072db 	.word	0x080072db
 800684c:	080072ff 	.word	0x080072ff

08006850 <_cleanup_r>:
 8006850:	4901      	ldr	r1, [pc, #4]	; (8006858 <_cleanup_r+0x8>)
 8006852:	f000 b8af 	b.w	80069b4 <_fwalk_reent>
 8006856:	bf00      	nop
 8006858:	08006791 	.word	0x08006791

0800685c <__sfmoreglue>:
 800685c:	b570      	push	{r4, r5, r6, lr}
 800685e:	2268      	movs	r2, #104	; 0x68
 8006860:	1e4d      	subs	r5, r1, #1
 8006862:	4355      	muls	r5, r2
 8006864:	460e      	mov	r6, r1
 8006866:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800686a:	f000 f997 	bl	8006b9c <_malloc_r>
 800686e:	4604      	mov	r4, r0
 8006870:	b140      	cbz	r0, 8006884 <__sfmoreglue+0x28>
 8006872:	2100      	movs	r1, #0
 8006874:	e9c0 1600 	strd	r1, r6, [r0]
 8006878:	300c      	adds	r0, #12
 800687a:	60a0      	str	r0, [r4, #8]
 800687c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006880:	f7ff fdaa 	bl	80063d8 <memset>
 8006884:	4620      	mov	r0, r4
 8006886:	bd70      	pop	{r4, r5, r6, pc}

08006888 <__sfp_lock_acquire>:
 8006888:	4801      	ldr	r0, [pc, #4]	; (8006890 <__sfp_lock_acquire+0x8>)
 800688a:	f000 b8b3 	b.w	80069f4 <__retarget_lock_acquire_recursive>
 800688e:	bf00      	nop
 8006890:	200002d9 	.word	0x200002d9

08006894 <__sfp_lock_release>:
 8006894:	4801      	ldr	r0, [pc, #4]	; (800689c <__sfp_lock_release+0x8>)
 8006896:	f000 b8ae 	b.w	80069f6 <__retarget_lock_release_recursive>
 800689a:	bf00      	nop
 800689c:	200002d9 	.word	0x200002d9

080068a0 <__sinit_lock_acquire>:
 80068a0:	4801      	ldr	r0, [pc, #4]	; (80068a8 <__sinit_lock_acquire+0x8>)
 80068a2:	f000 b8a7 	b.w	80069f4 <__retarget_lock_acquire_recursive>
 80068a6:	bf00      	nop
 80068a8:	200002da 	.word	0x200002da

080068ac <__sinit_lock_release>:
 80068ac:	4801      	ldr	r0, [pc, #4]	; (80068b4 <__sinit_lock_release+0x8>)
 80068ae:	f000 b8a2 	b.w	80069f6 <__retarget_lock_release_recursive>
 80068b2:	bf00      	nop
 80068b4:	200002da 	.word	0x200002da

080068b8 <__sinit>:
 80068b8:	b510      	push	{r4, lr}
 80068ba:	4604      	mov	r4, r0
 80068bc:	f7ff fff0 	bl	80068a0 <__sinit_lock_acquire>
 80068c0:	69a3      	ldr	r3, [r4, #24]
 80068c2:	b11b      	cbz	r3, 80068cc <__sinit+0x14>
 80068c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068c8:	f7ff bff0 	b.w	80068ac <__sinit_lock_release>
 80068cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80068d0:	6523      	str	r3, [r4, #80]	; 0x50
 80068d2:	4b13      	ldr	r3, [pc, #76]	; (8006920 <__sinit+0x68>)
 80068d4:	4a13      	ldr	r2, [pc, #76]	; (8006924 <__sinit+0x6c>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	62a2      	str	r2, [r4, #40]	; 0x28
 80068da:	42a3      	cmp	r3, r4
 80068dc:	bf04      	itt	eq
 80068de:	2301      	moveq	r3, #1
 80068e0:	61a3      	streq	r3, [r4, #24]
 80068e2:	4620      	mov	r0, r4
 80068e4:	f000 f820 	bl	8006928 <__sfp>
 80068e8:	6060      	str	r0, [r4, #4]
 80068ea:	4620      	mov	r0, r4
 80068ec:	f000 f81c 	bl	8006928 <__sfp>
 80068f0:	60a0      	str	r0, [r4, #8]
 80068f2:	4620      	mov	r0, r4
 80068f4:	f000 f818 	bl	8006928 <__sfp>
 80068f8:	2200      	movs	r2, #0
 80068fa:	60e0      	str	r0, [r4, #12]
 80068fc:	2104      	movs	r1, #4
 80068fe:	6860      	ldr	r0, [r4, #4]
 8006900:	f7ff ff82 	bl	8006808 <std>
 8006904:	68a0      	ldr	r0, [r4, #8]
 8006906:	2201      	movs	r2, #1
 8006908:	2109      	movs	r1, #9
 800690a:	f7ff ff7d 	bl	8006808 <std>
 800690e:	68e0      	ldr	r0, [r4, #12]
 8006910:	2202      	movs	r2, #2
 8006912:	2112      	movs	r1, #18
 8006914:	f7ff ff78 	bl	8006808 <std>
 8006918:	2301      	movs	r3, #1
 800691a:	61a3      	str	r3, [r4, #24]
 800691c:	e7d2      	b.n	80068c4 <__sinit+0xc>
 800691e:	bf00      	nop
 8006920:	08007504 	.word	0x08007504
 8006924:	08006851 	.word	0x08006851

08006928 <__sfp>:
 8006928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800692a:	4607      	mov	r7, r0
 800692c:	f7ff ffac 	bl	8006888 <__sfp_lock_acquire>
 8006930:	4b1e      	ldr	r3, [pc, #120]	; (80069ac <__sfp+0x84>)
 8006932:	681e      	ldr	r6, [r3, #0]
 8006934:	69b3      	ldr	r3, [r6, #24]
 8006936:	b913      	cbnz	r3, 800693e <__sfp+0x16>
 8006938:	4630      	mov	r0, r6
 800693a:	f7ff ffbd 	bl	80068b8 <__sinit>
 800693e:	3648      	adds	r6, #72	; 0x48
 8006940:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006944:	3b01      	subs	r3, #1
 8006946:	d503      	bpl.n	8006950 <__sfp+0x28>
 8006948:	6833      	ldr	r3, [r6, #0]
 800694a:	b30b      	cbz	r3, 8006990 <__sfp+0x68>
 800694c:	6836      	ldr	r6, [r6, #0]
 800694e:	e7f7      	b.n	8006940 <__sfp+0x18>
 8006950:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006954:	b9d5      	cbnz	r5, 800698c <__sfp+0x64>
 8006956:	4b16      	ldr	r3, [pc, #88]	; (80069b0 <__sfp+0x88>)
 8006958:	60e3      	str	r3, [r4, #12]
 800695a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800695e:	6665      	str	r5, [r4, #100]	; 0x64
 8006960:	f000 f847 	bl	80069f2 <__retarget_lock_init_recursive>
 8006964:	f7ff ff96 	bl	8006894 <__sfp_lock_release>
 8006968:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800696c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006970:	6025      	str	r5, [r4, #0]
 8006972:	61a5      	str	r5, [r4, #24]
 8006974:	2208      	movs	r2, #8
 8006976:	4629      	mov	r1, r5
 8006978:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800697c:	f7ff fd2c 	bl	80063d8 <memset>
 8006980:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006984:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006988:	4620      	mov	r0, r4
 800698a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800698c:	3468      	adds	r4, #104	; 0x68
 800698e:	e7d9      	b.n	8006944 <__sfp+0x1c>
 8006990:	2104      	movs	r1, #4
 8006992:	4638      	mov	r0, r7
 8006994:	f7ff ff62 	bl	800685c <__sfmoreglue>
 8006998:	4604      	mov	r4, r0
 800699a:	6030      	str	r0, [r6, #0]
 800699c:	2800      	cmp	r0, #0
 800699e:	d1d5      	bne.n	800694c <__sfp+0x24>
 80069a0:	f7ff ff78 	bl	8006894 <__sfp_lock_release>
 80069a4:	230c      	movs	r3, #12
 80069a6:	603b      	str	r3, [r7, #0]
 80069a8:	e7ee      	b.n	8006988 <__sfp+0x60>
 80069aa:	bf00      	nop
 80069ac:	08007504 	.word	0x08007504
 80069b0:	ffff0001 	.word	0xffff0001

080069b4 <_fwalk_reent>:
 80069b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069b8:	4606      	mov	r6, r0
 80069ba:	4688      	mov	r8, r1
 80069bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80069c0:	2700      	movs	r7, #0
 80069c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80069c6:	f1b9 0901 	subs.w	r9, r9, #1
 80069ca:	d505      	bpl.n	80069d8 <_fwalk_reent+0x24>
 80069cc:	6824      	ldr	r4, [r4, #0]
 80069ce:	2c00      	cmp	r4, #0
 80069d0:	d1f7      	bne.n	80069c2 <_fwalk_reent+0xe>
 80069d2:	4638      	mov	r0, r7
 80069d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069d8:	89ab      	ldrh	r3, [r5, #12]
 80069da:	2b01      	cmp	r3, #1
 80069dc:	d907      	bls.n	80069ee <_fwalk_reent+0x3a>
 80069de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80069e2:	3301      	adds	r3, #1
 80069e4:	d003      	beq.n	80069ee <_fwalk_reent+0x3a>
 80069e6:	4629      	mov	r1, r5
 80069e8:	4630      	mov	r0, r6
 80069ea:	47c0      	blx	r8
 80069ec:	4307      	orrs	r7, r0
 80069ee:	3568      	adds	r5, #104	; 0x68
 80069f0:	e7e9      	b.n	80069c6 <_fwalk_reent+0x12>

080069f2 <__retarget_lock_init_recursive>:
 80069f2:	4770      	bx	lr

080069f4 <__retarget_lock_acquire_recursive>:
 80069f4:	4770      	bx	lr

080069f6 <__retarget_lock_release_recursive>:
 80069f6:	4770      	bx	lr

080069f8 <__swhatbuf_r>:
 80069f8:	b570      	push	{r4, r5, r6, lr}
 80069fa:	460e      	mov	r6, r1
 80069fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a00:	2900      	cmp	r1, #0
 8006a02:	b096      	sub	sp, #88	; 0x58
 8006a04:	4614      	mov	r4, r2
 8006a06:	461d      	mov	r5, r3
 8006a08:	da08      	bge.n	8006a1c <__swhatbuf_r+0x24>
 8006a0a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	602a      	str	r2, [r5, #0]
 8006a12:	061a      	lsls	r2, r3, #24
 8006a14:	d410      	bmi.n	8006a38 <__swhatbuf_r+0x40>
 8006a16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a1a:	e00e      	b.n	8006a3a <__swhatbuf_r+0x42>
 8006a1c:	466a      	mov	r2, sp
 8006a1e:	f000 fc95 	bl	800734c <_fstat_r>
 8006a22:	2800      	cmp	r0, #0
 8006a24:	dbf1      	blt.n	8006a0a <__swhatbuf_r+0x12>
 8006a26:	9a01      	ldr	r2, [sp, #4]
 8006a28:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006a2c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006a30:	425a      	negs	r2, r3
 8006a32:	415a      	adcs	r2, r3
 8006a34:	602a      	str	r2, [r5, #0]
 8006a36:	e7ee      	b.n	8006a16 <__swhatbuf_r+0x1e>
 8006a38:	2340      	movs	r3, #64	; 0x40
 8006a3a:	2000      	movs	r0, #0
 8006a3c:	6023      	str	r3, [r4, #0]
 8006a3e:	b016      	add	sp, #88	; 0x58
 8006a40:	bd70      	pop	{r4, r5, r6, pc}
	...

08006a44 <__smakebuf_r>:
 8006a44:	898b      	ldrh	r3, [r1, #12]
 8006a46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006a48:	079d      	lsls	r5, r3, #30
 8006a4a:	4606      	mov	r6, r0
 8006a4c:	460c      	mov	r4, r1
 8006a4e:	d507      	bpl.n	8006a60 <__smakebuf_r+0x1c>
 8006a50:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006a54:	6023      	str	r3, [r4, #0]
 8006a56:	6123      	str	r3, [r4, #16]
 8006a58:	2301      	movs	r3, #1
 8006a5a:	6163      	str	r3, [r4, #20]
 8006a5c:	b002      	add	sp, #8
 8006a5e:	bd70      	pop	{r4, r5, r6, pc}
 8006a60:	ab01      	add	r3, sp, #4
 8006a62:	466a      	mov	r2, sp
 8006a64:	f7ff ffc8 	bl	80069f8 <__swhatbuf_r>
 8006a68:	9900      	ldr	r1, [sp, #0]
 8006a6a:	4605      	mov	r5, r0
 8006a6c:	4630      	mov	r0, r6
 8006a6e:	f000 f895 	bl	8006b9c <_malloc_r>
 8006a72:	b948      	cbnz	r0, 8006a88 <__smakebuf_r+0x44>
 8006a74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a78:	059a      	lsls	r2, r3, #22
 8006a7a:	d4ef      	bmi.n	8006a5c <__smakebuf_r+0x18>
 8006a7c:	f023 0303 	bic.w	r3, r3, #3
 8006a80:	f043 0302 	orr.w	r3, r3, #2
 8006a84:	81a3      	strh	r3, [r4, #12]
 8006a86:	e7e3      	b.n	8006a50 <__smakebuf_r+0xc>
 8006a88:	4b0d      	ldr	r3, [pc, #52]	; (8006ac0 <__smakebuf_r+0x7c>)
 8006a8a:	62b3      	str	r3, [r6, #40]	; 0x28
 8006a8c:	89a3      	ldrh	r3, [r4, #12]
 8006a8e:	6020      	str	r0, [r4, #0]
 8006a90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a94:	81a3      	strh	r3, [r4, #12]
 8006a96:	9b00      	ldr	r3, [sp, #0]
 8006a98:	6163      	str	r3, [r4, #20]
 8006a9a:	9b01      	ldr	r3, [sp, #4]
 8006a9c:	6120      	str	r0, [r4, #16]
 8006a9e:	b15b      	cbz	r3, 8006ab8 <__smakebuf_r+0x74>
 8006aa0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006aa4:	4630      	mov	r0, r6
 8006aa6:	f000 fc63 	bl	8007370 <_isatty_r>
 8006aaa:	b128      	cbz	r0, 8006ab8 <__smakebuf_r+0x74>
 8006aac:	89a3      	ldrh	r3, [r4, #12]
 8006aae:	f023 0303 	bic.w	r3, r3, #3
 8006ab2:	f043 0301 	orr.w	r3, r3, #1
 8006ab6:	81a3      	strh	r3, [r4, #12]
 8006ab8:	89a0      	ldrh	r0, [r4, #12]
 8006aba:	4305      	orrs	r5, r0
 8006abc:	81a5      	strh	r5, [r4, #12]
 8006abe:	e7cd      	b.n	8006a5c <__smakebuf_r+0x18>
 8006ac0:	08006851 	.word	0x08006851

08006ac4 <_free_r>:
 8006ac4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006ac6:	2900      	cmp	r1, #0
 8006ac8:	d044      	beq.n	8006b54 <_free_r+0x90>
 8006aca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ace:	9001      	str	r0, [sp, #4]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	f1a1 0404 	sub.w	r4, r1, #4
 8006ad6:	bfb8      	it	lt
 8006ad8:	18e4      	addlt	r4, r4, r3
 8006ada:	f000 fc6b 	bl	80073b4 <__malloc_lock>
 8006ade:	4a1e      	ldr	r2, [pc, #120]	; (8006b58 <_free_r+0x94>)
 8006ae0:	9801      	ldr	r0, [sp, #4]
 8006ae2:	6813      	ldr	r3, [r2, #0]
 8006ae4:	b933      	cbnz	r3, 8006af4 <_free_r+0x30>
 8006ae6:	6063      	str	r3, [r4, #4]
 8006ae8:	6014      	str	r4, [r2, #0]
 8006aea:	b003      	add	sp, #12
 8006aec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006af0:	f000 bc66 	b.w	80073c0 <__malloc_unlock>
 8006af4:	42a3      	cmp	r3, r4
 8006af6:	d908      	bls.n	8006b0a <_free_r+0x46>
 8006af8:	6825      	ldr	r5, [r4, #0]
 8006afa:	1961      	adds	r1, r4, r5
 8006afc:	428b      	cmp	r3, r1
 8006afe:	bf01      	itttt	eq
 8006b00:	6819      	ldreq	r1, [r3, #0]
 8006b02:	685b      	ldreq	r3, [r3, #4]
 8006b04:	1949      	addeq	r1, r1, r5
 8006b06:	6021      	streq	r1, [r4, #0]
 8006b08:	e7ed      	b.n	8006ae6 <_free_r+0x22>
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	b10b      	cbz	r3, 8006b14 <_free_r+0x50>
 8006b10:	42a3      	cmp	r3, r4
 8006b12:	d9fa      	bls.n	8006b0a <_free_r+0x46>
 8006b14:	6811      	ldr	r1, [r2, #0]
 8006b16:	1855      	adds	r5, r2, r1
 8006b18:	42a5      	cmp	r5, r4
 8006b1a:	d10b      	bne.n	8006b34 <_free_r+0x70>
 8006b1c:	6824      	ldr	r4, [r4, #0]
 8006b1e:	4421      	add	r1, r4
 8006b20:	1854      	adds	r4, r2, r1
 8006b22:	42a3      	cmp	r3, r4
 8006b24:	6011      	str	r1, [r2, #0]
 8006b26:	d1e0      	bne.n	8006aea <_free_r+0x26>
 8006b28:	681c      	ldr	r4, [r3, #0]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	6053      	str	r3, [r2, #4]
 8006b2e:	4421      	add	r1, r4
 8006b30:	6011      	str	r1, [r2, #0]
 8006b32:	e7da      	b.n	8006aea <_free_r+0x26>
 8006b34:	d902      	bls.n	8006b3c <_free_r+0x78>
 8006b36:	230c      	movs	r3, #12
 8006b38:	6003      	str	r3, [r0, #0]
 8006b3a:	e7d6      	b.n	8006aea <_free_r+0x26>
 8006b3c:	6825      	ldr	r5, [r4, #0]
 8006b3e:	1961      	adds	r1, r4, r5
 8006b40:	428b      	cmp	r3, r1
 8006b42:	bf04      	itt	eq
 8006b44:	6819      	ldreq	r1, [r3, #0]
 8006b46:	685b      	ldreq	r3, [r3, #4]
 8006b48:	6063      	str	r3, [r4, #4]
 8006b4a:	bf04      	itt	eq
 8006b4c:	1949      	addeq	r1, r1, r5
 8006b4e:	6021      	streq	r1, [r4, #0]
 8006b50:	6054      	str	r4, [r2, #4]
 8006b52:	e7ca      	b.n	8006aea <_free_r+0x26>
 8006b54:	b003      	add	sp, #12
 8006b56:	bd30      	pop	{r4, r5, pc}
 8006b58:	200002dc 	.word	0x200002dc

08006b5c <sbrk_aligned>:
 8006b5c:	b570      	push	{r4, r5, r6, lr}
 8006b5e:	4e0e      	ldr	r6, [pc, #56]	; (8006b98 <sbrk_aligned+0x3c>)
 8006b60:	460c      	mov	r4, r1
 8006b62:	6831      	ldr	r1, [r6, #0]
 8006b64:	4605      	mov	r5, r0
 8006b66:	b911      	cbnz	r1, 8006b6e <sbrk_aligned+0x12>
 8006b68:	f000 fb7a 	bl	8007260 <_sbrk_r>
 8006b6c:	6030      	str	r0, [r6, #0]
 8006b6e:	4621      	mov	r1, r4
 8006b70:	4628      	mov	r0, r5
 8006b72:	f000 fb75 	bl	8007260 <_sbrk_r>
 8006b76:	1c43      	adds	r3, r0, #1
 8006b78:	d00a      	beq.n	8006b90 <sbrk_aligned+0x34>
 8006b7a:	1cc4      	adds	r4, r0, #3
 8006b7c:	f024 0403 	bic.w	r4, r4, #3
 8006b80:	42a0      	cmp	r0, r4
 8006b82:	d007      	beq.n	8006b94 <sbrk_aligned+0x38>
 8006b84:	1a21      	subs	r1, r4, r0
 8006b86:	4628      	mov	r0, r5
 8006b88:	f000 fb6a 	bl	8007260 <_sbrk_r>
 8006b8c:	3001      	adds	r0, #1
 8006b8e:	d101      	bne.n	8006b94 <sbrk_aligned+0x38>
 8006b90:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006b94:	4620      	mov	r0, r4
 8006b96:	bd70      	pop	{r4, r5, r6, pc}
 8006b98:	200002e0 	.word	0x200002e0

08006b9c <_malloc_r>:
 8006b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ba0:	1ccd      	adds	r5, r1, #3
 8006ba2:	f025 0503 	bic.w	r5, r5, #3
 8006ba6:	3508      	adds	r5, #8
 8006ba8:	2d0c      	cmp	r5, #12
 8006baa:	bf38      	it	cc
 8006bac:	250c      	movcc	r5, #12
 8006bae:	2d00      	cmp	r5, #0
 8006bb0:	4607      	mov	r7, r0
 8006bb2:	db01      	blt.n	8006bb8 <_malloc_r+0x1c>
 8006bb4:	42a9      	cmp	r1, r5
 8006bb6:	d905      	bls.n	8006bc4 <_malloc_r+0x28>
 8006bb8:	230c      	movs	r3, #12
 8006bba:	603b      	str	r3, [r7, #0]
 8006bbc:	2600      	movs	r6, #0
 8006bbe:	4630      	mov	r0, r6
 8006bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bc4:	4e2e      	ldr	r6, [pc, #184]	; (8006c80 <_malloc_r+0xe4>)
 8006bc6:	f000 fbf5 	bl	80073b4 <__malloc_lock>
 8006bca:	6833      	ldr	r3, [r6, #0]
 8006bcc:	461c      	mov	r4, r3
 8006bce:	bb34      	cbnz	r4, 8006c1e <_malloc_r+0x82>
 8006bd0:	4629      	mov	r1, r5
 8006bd2:	4638      	mov	r0, r7
 8006bd4:	f7ff ffc2 	bl	8006b5c <sbrk_aligned>
 8006bd8:	1c43      	adds	r3, r0, #1
 8006bda:	4604      	mov	r4, r0
 8006bdc:	d14d      	bne.n	8006c7a <_malloc_r+0xde>
 8006bde:	6834      	ldr	r4, [r6, #0]
 8006be0:	4626      	mov	r6, r4
 8006be2:	2e00      	cmp	r6, #0
 8006be4:	d140      	bne.n	8006c68 <_malloc_r+0xcc>
 8006be6:	6823      	ldr	r3, [r4, #0]
 8006be8:	4631      	mov	r1, r6
 8006bea:	4638      	mov	r0, r7
 8006bec:	eb04 0803 	add.w	r8, r4, r3
 8006bf0:	f000 fb36 	bl	8007260 <_sbrk_r>
 8006bf4:	4580      	cmp	r8, r0
 8006bf6:	d13a      	bne.n	8006c6e <_malloc_r+0xd2>
 8006bf8:	6821      	ldr	r1, [r4, #0]
 8006bfa:	3503      	adds	r5, #3
 8006bfc:	1a6d      	subs	r5, r5, r1
 8006bfe:	f025 0503 	bic.w	r5, r5, #3
 8006c02:	3508      	adds	r5, #8
 8006c04:	2d0c      	cmp	r5, #12
 8006c06:	bf38      	it	cc
 8006c08:	250c      	movcc	r5, #12
 8006c0a:	4629      	mov	r1, r5
 8006c0c:	4638      	mov	r0, r7
 8006c0e:	f7ff ffa5 	bl	8006b5c <sbrk_aligned>
 8006c12:	3001      	adds	r0, #1
 8006c14:	d02b      	beq.n	8006c6e <_malloc_r+0xd2>
 8006c16:	6823      	ldr	r3, [r4, #0]
 8006c18:	442b      	add	r3, r5
 8006c1a:	6023      	str	r3, [r4, #0]
 8006c1c:	e00e      	b.n	8006c3c <_malloc_r+0xa0>
 8006c1e:	6822      	ldr	r2, [r4, #0]
 8006c20:	1b52      	subs	r2, r2, r5
 8006c22:	d41e      	bmi.n	8006c62 <_malloc_r+0xc6>
 8006c24:	2a0b      	cmp	r2, #11
 8006c26:	d916      	bls.n	8006c56 <_malloc_r+0xba>
 8006c28:	1961      	adds	r1, r4, r5
 8006c2a:	42a3      	cmp	r3, r4
 8006c2c:	6025      	str	r5, [r4, #0]
 8006c2e:	bf18      	it	ne
 8006c30:	6059      	strne	r1, [r3, #4]
 8006c32:	6863      	ldr	r3, [r4, #4]
 8006c34:	bf08      	it	eq
 8006c36:	6031      	streq	r1, [r6, #0]
 8006c38:	5162      	str	r2, [r4, r5]
 8006c3a:	604b      	str	r3, [r1, #4]
 8006c3c:	4638      	mov	r0, r7
 8006c3e:	f104 060b 	add.w	r6, r4, #11
 8006c42:	f000 fbbd 	bl	80073c0 <__malloc_unlock>
 8006c46:	f026 0607 	bic.w	r6, r6, #7
 8006c4a:	1d23      	adds	r3, r4, #4
 8006c4c:	1af2      	subs	r2, r6, r3
 8006c4e:	d0b6      	beq.n	8006bbe <_malloc_r+0x22>
 8006c50:	1b9b      	subs	r3, r3, r6
 8006c52:	50a3      	str	r3, [r4, r2]
 8006c54:	e7b3      	b.n	8006bbe <_malloc_r+0x22>
 8006c56:	6862      	ldr	r2, [r4, #4]
 8006c58:	42a3      	cmp	r3, r4
 8006c5a:	bf0c      	ite	eq
 8006c5c:	6032      	streq	r2, [r6, #0]
 8006c5e:	605a      	strne	r2, [r3, #4]
 8006c60:	e7ec      	b.n	8006c3c <_malloc_r+0xa0>
 8006c62:	4623      	mov	r3, r4
 8006c64:	6864      	ldr	r4, [r4, #4]
 8006c66:	e7b2      	b.n	8006bce <_malloc_r+0x32>
 8006c68:	4634      	mov	r4, r6
 8006c6a:	6876      	ldr	r6, [r6, #4]
 8006c6c:	e7b9      	b.n	8006be2 <_malloc_r+0x46>
 8006c6e:	230c      	movs	r3, #12
 8006c70:	603b      	str	r3, [r7, #0]
 8006c72:	4638      	mov	r0, r7
 8006c74:	f000 fba4 	bl	80073c0 <__malloc_unlock>
 8006c78:	e7a1      	b.n	8006bbe <_malloc_r+0x22>
 8006c7a:	6025      	str	r5, [r4, #0]
 8006c7c:	e7de      	b.n	8006c3c <_malloc_r+0xa0>
 8006c7e:	bf00      	nop
 8006c80:	200002dc 	.word	0x200002dc

08006c84 <__sfputc_r>:
 8006c84:	6893      	ldr	r3, [r2, #8]
 8006c86:	3b01      	subs	r3, #1
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	b410      	push	{r4}
 8006c8c:	6093      	str	r3, [r2, #8]
 8006c8e:	da08      	bge.n	8006ca2 <__sfputc_r+0x1e>
 8006c90:	6994      	ldr	r4, [r2, #24]
 8006c92:	42a3      	cmp	r3, r4
 8006c94:	db01      	blt.n	8006c9a <__sfputc_r+0x16>
 8006c96:	290a      	cmp	r1, #10
 8006c98:	d103      	bne.n	8006ca2 <__sfputc_r+0x1e>
 8006c9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c9e:	f7ff bc31 	b.w	8006504 <__swbuf_r>
 8006ca2:	6813      	ldr	r3, [r2, #0]
 8006ca4:	1c58      	adds	r0, r3, #1
 8006ca6:	6010      	str	r0, [r2, #0]
 8006ca8:	7019      	strb	r1, [r3, #0]
 8006caa:	4608      	mov	r0, r1
 8006cac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006cb0:	4770      	bx	lr

08006cb2 <__sfputs_r>:
 8006cb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cb4:	4606      	mov	r6, r0
 8006cb6:	460f      	mov	r7, r1
 8006cb8:	4614      	mov	r4, r2
 8006cba:	18d5      	adds	r5, r2, r3
 8006cbc:	42ac      	cmp	r4, r5
 8006cbe:	d101      	bne.n	8006cc4 <__sfputs_r+0x12>
 8006cc0:	2000      	movs	r0, #0
 8006cc2:	e007      	b.n	8006cd4 <__sfputs_r+0x22>
 8006cc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cc8:	463a      	mov	r2, r7
 8006cca:	4630      	mov	r0, r6
 8006ccc:	f7ff ffda 	bl	8006c84 <__sfputc_r>
 8006cd0:	1c43      	adds	r3, r0, #1
 8006cd2:	d1f3      	bne.n	8006cbc <__sfputs_r+0xa>
 8006cd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006cd8 <_vfiprintf_r>:
 8006cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cdc:	460d      	mov	r5, r1
 8006cde:	b09d      	sub	sp, #116	; 0x74
 8006ce0:	4614      	mov	r4, r2
 8006ce2:	4698      	mov	r8, r3
 8006ce4:	4606      	mov	r6, r0
 8006ce6:	b118      	cbz	r0, 8006cf0 <_vfiprintf_r+0x18>
 8006ce8:	6983      	ldr	r3, [r0, #24]
 8006cea:	b90b      	cbnz	r3, 8006cf0 <_vfiprintf_r+0x18>
 8006cec:	f7ff fde4 	bl	80068b8 <__sinit>
 8006cf0:	4b89      	ldr	r3, [pc, #548]	; (8006f18 <_vfiprintf_r+0x240>)
 8006cf2:	429d      	cmp	r5, r3
 8006cf4:	d11b      	bne.n	8006d2e <_vfiprintf_r+0x56>
 8006cf6:	6875      	ldr	r5, [r6, #4]
 8006cf8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006cfa:	07d9      	lsls	r1, r3, #31
 8006cfc:	d405      	bmi.n	8006d0a <_vfiprintf_r+0x32>
 8006cfe:	89ab      	ldrh	r3, [r5, #12]
 8006d00:	059a      	lsls	r2, r3, #22
 8006d02:	d402      	bmi.n	8006d0a <_vfiprintf_r+0x32>
 8006d04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d06:	f7ff fe75 	bl	80069f4 <__retarget_lock_acquire_recursive>
 8006d0a:	89ab      	ldrh	r3, [r5, #12]
 8006d0c:	071b      	lsls	r3, r3, #28
 8006d0e:	d501      	bpl.n	8006d14 <_vfiprintf_r+0x3c>
 8006d10:	692b      	ldr	r3, [r5, #16]
 8006d12:	b9eb      	cbnz	r3, 8006d50 <_vfiprintf_r+0x78>
 8006d14:	4629      	mov	r1, r5
 8006d16:	4630      	mov	r0, r6
 8006d18:	f7ff fc46 	bl	80065a8 <__swsetup_r>
 8006d1c:	b1c0      	cbz	r0, 8006d50 <_vfiprintf_r+0x78>
 8006d1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d20:	07dc      	lsls	r4, r3, #31
 8006d22:	d50e      	bpl.n	8006d42 <_vfiprintf_r+0x6a>
 8006d24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d28:	b01d      	add	sp, #116	; 0x74
 8006d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d2e:	4b7b      	ldr	r3, [pc, #492]	; (8006f1c <_vfiprintf_r+0x244>)
 8006d30:	429d      	cmp	r5, r3
 8006d32:	d101      	bne.n	8006d38 <_vfiprintf_r+0x60>
 8006d34:	68b5      	ldr	r5, [r6, #8]
 8006d36:	e7df      	b.n	8006cf8 <_vfiprintf_r+0x20>
 8006d38:	4b79      	ldr	r3, [pc, #484]	; (8006f20 <_vfiprintf_r+0x248>)
 8006d3a:	429d      	cmp	r5, r3
 8006d3c:	bf08      	it	eq
 8006d3e:	68f5      	ldreq	r5, [r6, #12]
 8006d40:	e7da      	b.n	8006cf8 <_vfiprintf_r+0x20>
 8006d42:	89ab      	ldrh	r3, [r5, #12]
 8006d44:	0598      	lsls	r0, r3, #22
 8006d46:	d4ed      	bmi.n	8006d24 <_vfiprintf_r+0x4c>
 8006d48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d4a:	f7ff fe54 	bl	80069f6 <__retarget_lock_release_recursive>
 8006d4e:	e7e9      	b.n	8006d24 <_vfiprintf_r+0x4c>
 8006d50:	2300      	movs	r3, #0
 8006d52:	9309      	str	r3, [sp, #36]	; 0x24
 8006d54:	2320      	movs	r3, #32
 8006d56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006d5a:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d5e:	2330      	movs	r3, #48	; 0x30
 8006d60:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006f24 <_vfiprintf_r+0x24c>
 8006d64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d68:	f04f 0901 	mov.w	r9, #1
 8006d6c:	4623      	mov	r3, r4
 8006d6e:	469a      	mov	sl, r3
 8006d70:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d74:	b10a      	cbz	r2, 8006d7a <_vfiprintf_r+0xa2>
 8006d76:	2a25      	cmp	r2, #37	; 0x25
 8006d78:	d1f9      	bne.n	8006d6e <_vfiprintf_r+0x96>
 8006d7a:	ebba 0b04 	subs.w	fp, sl, r4
 8006d7e:	d00b      	beq.n	8006d98 <_vfiprintf_r+0xc0>
 8006d80:	465b      	mov	r3, fp
 8006d82:	4622      	mov	r2, r4
 8006d84:	4629      	mov	r1, r5
 8006d86:	4630      	mov	r0, r6
 8006d88:	f7ff ff93 	bl	8006cb2 <__sfputs_r>
 8006d8c:	3001      	adds	r0, #1
 8006d8e:	f000 80aa 	beq.w	8006ee6 <_vfiprintf_r+0x20e>
 8006d92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d94:	445a      	add	r2, fp
 8006d96:	9209      	str	r2, [sp, #36]	; 0x24
 8006d98:	f89a 3000 	ldrb.w	r3, [sl]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	f000 80a2 	beq.w	8006ee6 <_vfiprintf_r+0x20e>
 8006da2:	2300      	movs	r3, #0
 8006da4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006da8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006dac:	f10a 0a01 	add.w	sl, sl, #1
 8006db0:	9304      	str	r3, [sp, #16]
 8006db2:	9307      	str	r3, [sp, #28]
 8006db4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006db8:	931a      	str	r3, [sp, #104]	; 0x68
 8006dba:	4654      	mov	r4, sl
 8006dbc:	2205      	movs	r2, #5
 8006dbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dc2:	4858      	ldr	r0, [pc, #352]	; (8006f24 <_vfiprintf_r+0x24c>)
 8006dc4:	f7f9 f9dc 	bl	8000180 <memchr>
 8006dc8:	9a04      	ldr	r2, [sp, #16]
 8006dca:	b9d8      	cbnz	r0, 8006e04 <_vfiprintf_r+0x12c>
 8006dcc:	06d1      	lsls	r1, r2, #27
 8006dce:	bf44      	itt	mi
 8006dd0:	2320      	movmi	r3, #32
 8006dd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006dd6:	0713      	lsls	r3, r2, #28
 8006dd8:	bf44      	itt	mi
 8006dda:	232b      	movmi	r3, #43	; 0x2b
 8006ddc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006de0:	f89a 3000 	ldrb.w	r3, [sl]
 8006de4:	2b2a      	cmp	r3, #42	; 0x2a
 8006de6:	d015      	beq.n	8006e14 <_vfiprintf_r+0x13c>
 8006de8:	9a07      	ldr	r2, [sp, #28]
 8006dea:	4654      	mov	r4, sl
 8006dec:	2000      	movs	r0, #0
 8006dee:	f04f 0c0a 	mov.w	ip, #10
 8006df2:	4621      	mov	r1, r4
 8006df4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006df8:	3b30      	subs	r3, #48	; 0x30
 8006dfa:	2b09      	cmp	r3, #9
 8006dfc:	d94e      	bls.n	8006e9c <_vfiprintf_r+0x1c4>
 8006dfe:	b1b0      	cbz	r0, 8006e2e <_vfiprintf_r+0x156>
 8006e00:	9207      	str	r2, [sp, #28]
 8006e02:	e014      	b.n	8006e2e <_vfiprintf_r+0x156>
 8006e04:	eba0 0308 	sub.w	r3, r0, r8
 8006e08:	fa09 f303 	lsl.w	r3, r9, r3
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	9304      	str	r3, [sp, #16]
 8006e10:	46a2      	mov	sl, r4
 8006e12:	e7d2      	b.n	8006dba <_vfiprintf_r+0xe2>
 8006e14:	9b03      	ldr	r3, [sp, #12]
 8006e16:	1d19      	adds	r1, r3, #4
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	9103      	str	r1, [sp, #12]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	bfbb      	ittet	lt
 8006e20:	425b      	neglt	r3, r3
 8006e22:	f042 0202 	orrlt.w	r2, r2, #2
 8006e26:	9307      	strge	r3, [sp, #28]
 8006e28:	9307      	strlt	r3, [sp, #28]
 8006e2a:	bfb8      	it	lt
 8006e2c:	9204      	strlt	r2, [sp, #16]
 8006e2e:	7823      	ldrb	r3, [r4, #0]
 8006e30:	2b2e      	cmp	r3, #46	; 0x2e
 8006e32:	d10c      	bne.n	8006e4e <_vfiprintf_r+0x176>
 8006e34:	7863      	ldrb	r3, [r4, #1]
 8006e36:	2b2a      	cmp	r3, #42	; 0x2a
 8006e38:	d135      	bne.n	8006ea6 <_vfiprintf_r+0x1ce>
 8006e3a:	9b03      	ldr	r3, [sp, #12]
 8006e3c:	1d1a      	adds	r2, r3, #4
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	9203      	str	r2, [sp, #12]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	bfb8      	it	lt
 8006e46:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006e4a:	3402      	adds	r4, #2
 8006e4c:	9305      	str	r3, [sp, #20]
 8006e4e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006f34 <_vfiprintf_r+0x25c>
 8006e52:	7821      	ldrb	r1, [r4, #0]
 8006e54:	2203      	movs	r2, #3
 8006e56:	4650      	mov	r0, sl
 8006e58:	f7f9 f992 	bl	8000180 <memchr>
 8006e5c:	b140      	cbz	r0, 8006e70 <_vfiprintf_r+0x198>
 8006e5e:	2340      	movs	r3, #64	; 0x40
 8006e60:	eba0 000a 	sub.w	r0, r0, sl
 8006e64:	fa03 f000 	lsl.w	r0, r3, r0
 8006e68:	9b04      	ldr	r3, [sp, #16]
 8006e6a:	4303      	orrs	r3, r0
 8006e6c:	3401      	adds	r4, #1
 8006e6e:	9304      	str	r3, [sp, #16]
 8006e70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e74:	482c      	ldr	r0, [pc, #176]	; (8006f28 <_vfiprintf_r+0x250>)
 8006e76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e7a:	2206      	movs	r2, #6
 8006e7c:	f7f9 f980 	bl	8000180 <memchr>
 8006e80:	2800      	cmp	r0, #0
 8006e82:	d03f      	beq.n	8006f04 <_vfiprintf_r+0x22c>
 8006e84:	4b29      	ldr	r3, [pc, #164]	; (8006f2c <_vfiprintf_r+0x254>)
 8006e86:	bb1b      	cbnz	r3, 8006ed0 <_vfiprintf_r+0x1f8>
 8006e88:	9b03      	ldr	r3, [sp, #12]
 8006e8a:	3307      	adds	r3, #7
 8006e8c:	f023 0307 	bic.w	r3, r3, #7
 8006e90:	3308      	adds	r3, #8
 8006e92:	9303      	str	r3, [sp, #12]
 8006e94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e96:	443b      	add	r3, r7
 8006e98:	9309      	str	r3, [sp, #36]	; 0x24
 8006e9a:	e767      	b.n	8006d6c <_vfiprintf_r+0x94>
 8006e9c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ea0:	460c      	mov	r4, r1
 8006ea2:	2001      	movs	r0, #1
 8006ea4:	e7a5      	b.n	8006df2 <_vfiprintf_r+0x11a>
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	3401      	adds	r4, #1
 8006eaa:	9305      	str	r3, [sp, #20]
 8006eac:	4619      	mov	r1, r3
 8006eae:	f04f 0c0a 	mov.w	ip, #10
 8006eb2:	4620      	mov	r0, r4
 8006eb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006eb8:	3a30      	subs	r2, #48	; 0x30
 8006eba:	2a09      	cmp	r2, #9
 8006ebc:	d903      	bls.n	8006ec6 <_vfiprintf_r+0x1ee>
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d0c5      	beq.n	8006e4e <_vfiprintf_r+0x176>
 8006ec2:	9105      	str	r1, [sp, #20]
 8006ec4:	e7c3      	b.n	8006e4e <_vfiprintf_r+0x176>
 8006ec6:	fb0c 2101 	mla	r1, ip, r1, r2
 8006eca:	4604      	mov	r4, r0
 8006ecc:	2301      	movs	r3, #1
 8006ece:	e7f0      	b.n	8006eb2 <_vfiprintf_r+0x1da>
 8006ed0:	ab03      	add	r3, sp, #12
 8006ed2:	9300      	str	r3, [sp, #0]
 8006ed4:	462a      	mov	r2, r5
 8006ed6:	4b16      	ldr	r3, [pc, #88]	; (8006f30 <_vfiprintf_r+0x258>)
 8006ed8:	a904      	add	r1, sp, #16
 8006eda:	4630      	mov	r0, r6
 8006edc:	f3af 8000 	nop.w
 8006ee0:	4607      	mov	r7, r0
 8006ee2:	1c78      	adds	r0, r7, #1
 8006ee4:	d1d6      	bne.n	8006e94 <_vfiprintf_r+0x1bc>
 8006ee6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ee8:	07d9      	lsls	r1, r3, #31
 8006eea:	d405      	bmi.n	8006ef8 <_vfiprintf_r+0x220>
 8006eec:	89ab      	ldrh	r3, [r5, #12]
 8006eee:	059a      	lsls	r2, r3, #22
 8006ef0:	d402      	bmi.n	8006ef8 <_vfiprintf_r+0x220>
 8006ef2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ef4:	f7ff fd7f 	bl	80069f6 <__retarget_lock_release_recursive>
 8006ef8:	89ab      	ldrh	r3, [r5, #12]
 8006efa:	065b      	lsls	r3, r3, #25
 8006efc:	f53f af12 	bmi.w	8006d24 <_vfiprintf_r+0x4c>
 8006f00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f02:	e711      	b.n	8006d28 <_vfiprintf_r+0x50>
 8006f04:	ab03      	add	r3, sp, #12
 8006f06:	9300      	str	r3, [sp, #0]
 8006f08:	462a      	mov	r2, r5
 8006f0a:	4b09      	ldr	r3, [pc, #36]	; (8006f30 <_vfiprintf_r+0x258>)
 8006f0c:	a904      	add	r1, sp, #16
 8006f0e:	4630      	mov	r0, r6
 8006f10:	f000 f880 	bl	8007014 <_printf_i>
 8006f14:	e7e4      	b.n	8006ee0 <_vfiprintf_r+0x208>
 8006f16:	bf00      	nop
 8006f18:	08007528 	.word	0x08007528
 8006f1c:	08007548 	.word	0x08007548
 8006f20:	08007508 	.word	0x08007508
 8006f24:	08007568 	.word	0x08007568
 8006f28:	08007572 	.word	0x08007572
 8006f2c:	00000000 	.word	0x00000000
 8006f30:	08006cb3 	.word	0x08006cb3
 8006f34:	0800756e 	.word	0x0800756e

08006f38 <_printf_common>:
 8006f38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f3c:	4616      	mov	r6, r2
 8006f3e:	4699      	mov	r9, r3
 8006f40:	688a      	ldr	r2, [r1, #8]
 8006f42:	690b      	ldr	r3, [r1, #16]
 8006f44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	bfb8      	it	lt
 8006f4c:	4613      	movlt	r3, r2
 8006f4e:	6033      	str	r3, [r6, #0]
 8006f50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006f54:	4607      	mov	r7, r0
 8006f56:	460c      	mov	r4, r1
 8006f58:	b10a      	cbz	r2, 8006f5e <_printf_common+0x26>
 8006f5a:	3301      	adds	r3, #1
 8006f5c:	6033      	str	r3, [r6, #0]
 8006f5e:	6823      	ldr	r3, [r4, #0]
 8006f60:	0699      	lsls	r1, r3, #26
 8006f62:	bf42      	ittt	mi
 8006f64:	6833      	ldrmi	r3, [r6, #0]
 8006f66:	3302      	addmi	r3, #2
 8006f68:	6033      	strmi	r3, [r6, #0]
 8006f6a:	6825      	ldr	r5, [r4, #0]
 8006f6c:	f015 0506 	ands.w	r5, r5, #6
 8006f70:	d106      	bne.n	8006f80 <_printf_common+0x48>
 8006f72:	f104 0a19 	add.w	sl, r4, #25
 8006f76:	68e3      	ldr	r3, [r4, #12]
 8006f78:	6832      	ldr	r2, [r6, #0]
 8006f7a:	1a9b      	subs	r3, r3, r2
 8006f7c:	42ab      	cmp	r3, r5
 8006f7e:	dc26      	bgt.n	8006fce <_printf_common+0x96>
 8006f80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006f84:	1e13      	subs	r3, r2, #0
 8006f86:	6822      	ldr	r2, [r4, #0]
 8006f88:	bf18      	it	ne
 8006f8a:	2301      	movne	r3, #1
 8006f8c:	0692      	lsls	r2, r2, #26
 8006f8e:	d42b      	bmi.n	8006fe8 <_printf_common+0xb0>
 8006f90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006f94:	4649      	mov	r1, r9
 8006f96:	4638      	mov	r0, r7
 8006f98:	47c0      	blx	r8
 8006f9a:	3001      	adds	r0, #1
 8006f9c:	d01e      	beq.n	8006fdc <_printf_common+0xa4>
 8006f9e:	6823      	ldr	r3, [r4, #0]
 8006fa0:	68e5      	ldr	r5, [r4, #12]
 8006fa2:	6832      	ldr	r2, [r6, #0]
 8006fa4:	f003 0306 	and.w	r3, r3, #6
 8006fa8:	2b04      	cmp	r3, #4
 8006faa:	bf08      	it	eq
 8006fac:	1aad      	subeq	r5, r5, r2
 8006fae:	68a3      	ldr	r3, [r4, #8]
 8006fb0:	6922      	ldr	r2, [r4, #16]
 8006fb2:	bf0c      	ite	eq
 8006fb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006fb8:	2500      	movne	r5, #0
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	bfc4      	itt	gt
 8006fbe:	1a9b      	subgt	r3, r3, r2
 8006fc0:	18ed      	addgt	r5, r5, r3
 8006fc2:	2600      	movs	r6, #0
 8006fc4:	341a      	adds	r4, #26
 8006fc6:	42b5      	cmp	r5, r6
 8006fc8:	d11a      	bne.n	8007000 <_printf_common+0xc8>
 8006fca:	2000      	movs	r0, #0
 8006fcc:	e008      	b.n	8006fe0 <_printf_common+0xa8>
 8006fce:	2301      	movs	r3, #1
 8006fd0:	4652      	mov	r2, sl
 8006fd2:	4649      	mov	r1, r9
 8006fd4:	4638      	mov	r0, r7
 8006fd6:	47c0      	blx	r8
 8006fd8:	3001      	adds	r0, #1
 8006fda:	d103      	bne.n	8006fe4 <_printf_common+0xac>
 8006fdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006fe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fe4:	3501      	adds	r5, #1
 8006fe6:	e7c6      	b.n	8006f76 <_printf_common+0x3e>
 8006fe8:	18e1      	adds	r1, r4, r3
 8006fea:	1c5a      	adds	r2, r3, #1
 8006fec:	2030      	movs	r0, #48	; 0x30
 8006fee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006ff2:	4422      	add	r2, r4
 8006ff4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006ff8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006ffc:	3302      	adds	r3, #2
 8006ffe:	e7c7      	b.n	8006f90 <_printf_common+0x58>
 8007000:	2301      	movs	r3, #1
 8007002:	4622      	mov	r2, r4
 8007004:	4649      	mov	r1, r9
 8007006:	4638      	mov	r0, r7
 8007008:	47c0      	blx	r8
 800700a:	3001      	adds	r0, #1
 800700c:	d0e6      	beq.n	8006fdc <_printf_common+0xa4>
 800700e:	3601      	adds	r6, #1
 8007010:	e7d9      	b.n	8006fc6 <_printf_common+0x8e>
	...

08007014 <_printf_i>:
 8007014:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007018:	7e0f      	ldrb	r7, [r1, #24]
 800701a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800701c:	2f78      	cmp	r7, #120	; 0x78
 800701e:	4691      	mov	r9, r2
 8007020:	4680      	mov	r8, r0
 8007022:	460c      	mov	r4, r1
 8007024:	469a      	mov	sl, r3
 8007026:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800702a:	d807      	bhi.n	800703c <_printf_i+0x28>
 800702c:	2f62      	cmp	r7, #98	; 0x62
 800702e:	d80a      	bhi.n	8007046 <_printf_i+0x32>
 8007030:	2f00      	cmp	r7, #0
 8007032:	f000 80d8 	beq.w	80071e6 <_printf_i+0x1d2>
 8007036:	2f58      	cmp	r7, #88	; 0x58
 8007038:	f000 80a3 	beq.w	8007182 <_printf_i+0x16e>
 800703c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007040:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007044:	e03a      	b.n	80070bc <_printf_i+0xa8>
 8007046:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800704a:	2b15      	cmp	r3, #21
 800704c:	d8f6      	bhi.n	800703c <_printf_i+0x28>
 800704e:	a101      	add	r1, pc, #4	; (adr r1, 8007054 <_printf_i+0x40>)
 8007050:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007054:	080070ad 	.word	0x080070ad
 8007058:	080070c1 	.word	0x080070c1
 800705c:	0800703d 	.word	0x0800703d
 8007060:	0800703d 	.word	0x0800703d
 8007064:	0800703d 	.word	0x0800703d
 8007068:	0800703d 	.word	0x0800703d
 800706c:	080070c1 	.word	0x080070c1
 8007070:	0800703d 	.word	0x0800703d
 8007074:	0800703d 	.word	0x0800703d
 8007078:	0800703d 	.word	0x0800703d
 800707c:	0800703d 	.word	0x0800703d
 8007080:	080071cd 	.word	0x080071cd
 8007084:	080070f1 	.word	0x080070f1
 8007088:	080071af 	.word	0x080071af
 800708c:	0800703d 	.word	0x0800703d
 8007090:	0800703d 	.word	0x0800703d
 8007094:	080071ef 	.word	0x080071ef
 8007098:	0800703d 	.word	0x0800703d
 800709c:	080070f1 	.word	0x080070f1
 80070a0:	0800703d 	.word	0x0800703d
 80070a4:	0800703d 	.word	0x0800703d
 80070a8:	080071b7 	.word	0x080071b7
 80070ac:	682b      	ldr	r3, [r5, #0]
 80070ae:	1d1a      	adds	r2, r3, #4
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	602a      	str	r2, [r5, #0]
 80070b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80070b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80070bc:	2301      	movs	r3, #1
 80070be:	e0a3      	b.n	8007208 <_printf_i+0x1f4>
 80070c0:	6820      	ldr	r0, [r4, #0]
 80070c2:	6829      	ldr	r1, [r5, #0]
 80070c4:	0606      	lsls	r6, r0, #24
 80070c6:	f101 0304 	add.w	r3, r1, #4
 80070ca:	d50a      	bpl.n	80070e2 <_printf_i+0xce>
 80070cc:	680e      	ldr	r6, [r1, #0]
 80070ce:	602b      	str	r3, [r5, #0]
 80070d0:	2e00      	cmp	r6, #0
 80070d2:	da03      	bge.n	80070dc <_printf_i+0xc8>
 80070d4:	232d      	movs	r3, #45	; 0x2d
 80070d6:	4276      	negs	r6, r6
 80070d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070dc:	485e      	ldr	r0, [pc, #376]	; (8007258 <_printf_i+0x244>)
 80070de:	230a      	movs	r3, #10
 80070e0:	e019      	b.n	8007116 <_printf_i+0x102>
 80070e2:	680e      	ldr	r6, [r1, #0]
 80070e4:	602b      	str	r3, [r5, #0]
 80070e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80070ea:	bf18      	it	ne
 80070ec:	b236      	sxthne	r6, r6
 80070ee:	e7ef      	b.n	80070d0 <_printf_i+0xbc>
 80070f0:	682b      	ldr	r3, [r5, #0]
 80070f2:	6820      	ldr	r0, [r4, #0]
 80070f4:	1d19      	adds	r1, r3, #4
 80070f6:	6029      	str	r1, [r5, #0]
 80070f8:	0601      	lsls	r1, r0, #24
 80070fa:	d501      	bpl.n	8007100 <_printf_i+0xec>
 80070fc:	681e      	ldr	r6, [r3, #0]
 80070fe:	e002      	b.n	8007106 <_printf_i+0xf2>
 8007100:	0646      	lsls	r6, r0, #25
 8007102:	d5fb      	bpl.n	80070fc <_printf_i+0xe8>
 8007104:	881e      	ldrh	r6, [r3, #0]
 8007106:	4854      	ldr	r0, [pc, #336]	; (8007258 <_printf_i+0x244>)
 8007108:	2f6f      	cmp	r7, #111	; 0x6f
 800710a:	bf0c      	ite	eq
 800710c:	2308      	moveq	r3, #8
 800710e:	230a      	movne	r3, #10
 8007110:	2100      	movs	r1, #0
 8007112:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007116:	6865      	ldr	r5, [r4, #4]
 8007118:	60a5      	str	r5, [r4, #8]
 800711a:	2d00      	cmp	r5, #0
 800711c:	bfa2      	ittt	ge
 800711e:	6821      	ldrge	r1, [r4, #0]
 8007120:	f021 0104 	bicge.w	r1, r1, #4
 8007124:	6021      	strge	r1, [r4, #0]
 8007126:	b90e      	cbnz	r6, 800712c <_printf_i+0x118>
 8007128:	2d00      	cmp	r5, #0
 800712a:	d04d      	beq.n	80071c8 <_printf_i+0x1b4>
 800712c:	4615      	mov	r5, r2
 800712e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007132:	fb03 6711 	mls	r7, r3, r1, r6
 8007136:	5dc7      	ldrb	r7, [r0, r7]
 8007138:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800713c:	4637      	mov	r7, r6
 800713e:	42bb      	cmp	r3, r7
 8007140:	460e      	mov	r6, r1
 8007142:	d9f4      	bls.n	800712e <_printf_i+0x11a>
 8007144:	2b08      	cmp	r3, #8
 8007146:	d10b      	bne.n	8007160 <_printf_i+0x14c>
 8007148:	6823      	ldr	r3, [r4, #0]
 800714a:	07de      	lsls	r6, r3, #31
 800714c:	d508      	bpl.n	8007160 <_printf_i+0x14c>
 800714e:	6923      	ldr	r3, [r4, #16]
 8007150:	6861      	ldr	r1, [r4, #4]
 8007152:	4299      	cmp	r1, r3
 8007154:	bfde      	ittt	le
 8007156:	2330      	movle	r3, #48	; 0x30
 8007158:	f805 3c01 	strble.w	r3, [r5, #-1]
 800715c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007160:	1b52      	subs	r2, r2, r5
 8007162:	6122      	str	r2, [r4, #16]
 8007164:	f8cd a000 	str.w	sl, [sp]
 8007168:	464b      	mov	r3, r9
 800716a:	aa03      	add	r2, sp, #12
 800716c:	4621      	mov	r1, r4
 800716e:	4640      	mov	r0, r8
 8007170:	f7ff fee2 	bl	8006f38 <_printf_common>
 8007174:	3001      	adds	r0, #1
 8007176:	d14c      	bne.n	8007212 <_printf_i+0x1fe>
 8007178:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800717c:	b004      	add	sp, #16
 800717e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007182:	4835      	ldr	r0, [pc, #212]	; (8007258 <_printf_i+0x244>)
 8007184:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007188:	6829      	ldr	r1, [r5, #0]
 800718a:	6823      	ldr	r3, [r4, #0]
 800718c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007190:	6029      	str	r1, [r5, #0]
 8007192:	061d      	lsls	r5, r3, #24
 8007194:	d514      	bpl.n	80071c0 <_printf_i+0x1ac>
 8007196:	07df      	lsls	r7, r3, #31
 8007198:	bf44      	itt	mi
 800719a:	f043 0320 	orrmi.w	r3, r3, #32
 800719e:	6023      	strmi	r3, [r4, #0]
 80071a0:	b91e      	cbnz	r6, 80071aa <_printf_i+0x196>
 80071a2:	6823      	ldr	r3, [r4, #0]
 80071a4:	f023 0320 	bic.w	r3, r3, #32
 80071a8:	6023      	str	r3, [r4, #0]
 80071aa:	2310      	movs	r3, #16
 80071ac:	e7b0      	b.n	8007110 <_printf_i+0xfc>
 80071ae:	6823      	ldr	r3, [r4, #0]
 80071b0:	f043 0320 	orr.w	r3, r3, #32
 80071b4:	6023      	str	r3, [r4, #0]
 80071b6:	2378      	movs	r3, #120	; 0x78
 80071b8:	4828      	ldr	r0, [pc, #160]	; (800725c <_printf_i+0x248>)
 80071ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80071be:	e7e3      	b.n	8007188 <_printf_i+0x174>
 80071c0:	0659      	lsls	r1, r3, #25
 80071c2:	bf48      	it	mi
 80071c4:	b2b6      	uxthmi	r6, r6
 80071c6:	e7e6      	b.n	8007196 <_printf_i+0x182>
 80071c8:	4615      	mov	r5, r2
 80071ca:	e7bb      	b.n	8007144 <_printf_i+0x130>
 80071cc:	682b      	ldr	r3, [r5, #0]
 80071ce:	6826      	ldr	r6, [r4, #0]
 80071d0:	6961      	ldr	r1, [r4, #20]
 80071d2:	1d18      	adds	r0, r3, #4
 80071d4:	6028      	str	r0, [r5, #0]
 80071d6:	0635      	lsls	r5, r6, #24
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	d501      	bpl.n	80071e0 <_printf_i+0x1cc>
 80071dc:	6019      	str	r1, [r3, #0]
 80071de:	e002      	b.n	80071e6 <_printf_i+0x1d2>
 80071e0:	0670      	lsls	r0, r6, #25
 80071e2:	d5fb      	bpl.n	80071dc <_printf_i+0x1c8>
 80071e4:	8019      	strh	r1, [r3, #0]
 80071e6:	2300      	movs	r3, #0
 80071e8:	6123      	str	r3, [r4, #16]
 80071ea:	4615      	mov	r5, r2
 80071ec:	e7ba      	b.n	8007164 <_printf_i+0x150>
 80071ee:	682b      	ldr	r3, [r5, #0]
 80071f0:	1d1a      	adds	r2, r3, #4
 80071f2:	602a      	str	r2, [r5, #0]
 80071f4:	681d      	ldr	r5, [r3, #0]
 80071f6:	6862      	ldr	r2, [r4, #4]
 80071f8:	2100      	movs	r1, #0
 80071fa:	4628      	mov	r0, r5
 80071fc:	f7f8 ffc0 	bl	8000180 <memchr>
 8007200:	b108      	cbz	r0, 8007206 <_printf_i+0x1f2>
 8007202:	1b40      	subs	r0, r0, r5
 8007204:	6060      	str	r0, [r4, #4]
 8007206:	6863      	ldr	r3, [r4, #4]
 8007208:	6123      	str	r3, [r4, #16]
 800720a:	2300      	movs	r3, #0
 800720c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007210:	e7a8      	b.n	8007164 <_printf_i+0x150>
 8007212:	6923      	ldr	r3, [r4, #16]
 8007214:	462a      	mov	r2, r5
 8007216:	4649      	mov	r1, r9
 8007218:	4640      	mov	r0, r8
 800721a:	47d0      	blx	sl
 800721c:	3001      	adds	r0, #1
 800721e:	d0ab      	beq.n	8007178 <_printf_i+0x164>
 8007220:	6823      	ldr	r3, [r4, #0]
 8007222:	079b      	lsls	r3, r3, #30
 8007224:	d413      	bmi.n	800724e <_printf_i+0x23a>
 8007226:	68e0      	ldr	r0, [r4, #12]
 8007228:	9b03      	ldr	r3, [sp, #12]
 800722a:	4298      	cmp	r0, r3
 800722c:	bfb8      	it	lt
 800722e:	4618      	movlt	r0, r3
 8007230:	e7a4      	b.n	800717c <_printf_i+0x168>
 8007232:	2301      	movs	r3, #1
 8007234:	4632      	mov	r2, r6
 8007236:	4649      	mov	r1, r9
 8007238:	4640      	mov	r0, r8
 800723a:	47d0      	blx	sl
 800723c:	3001      	adds	r0, #1
 800723e:	d09b      	beq.n	8007178 <_printf_i+0x164>
 8007240:	3501      	adds	r5, #1
 8007242:	68e3      	ldr	r3, [r4, #12]
 8007244:	9903      	ldr	r1, [sp, #12]
 8007246:	1a5b      	subs	r3, r3, r1
 8007248:	42ab      	cmp	r3, r5
 800724a:	dcf2      	bgt.n	8007232 <_printf_i+0x21e>
 800724c:	e7eb      	b.n	8007226 <_printf_i+0x212>
 800724e:	2500      	movs	r5, #0
 8007250:	f104 0619 	add.w	r6, r4, #25
 8007254:	e7f5      	b.n	8007242 <_printf_i+0x22e>
 8007256:	bf00      	nop
 8007258:	08007579 	.word	0x08007579
 800725c:	0800758a 	.word	0x0800758a

08007260 <_sbrk_r>:
 8007260:	b538      	push	{r3, r4, r5, lr}
 8007262:	4d06      	ldr	r5, [pc, #24]	; (800727c <_sbrk_r+0x1c>)
 8007264:	2300      	movs	r3, #0
 8007266:	4604      	mov	r4, r0
 8007268:	4608      	mov	r0, r1
 800726a:	602b      	str	r3, [r5, #0]
 800726c:	f7f9 fede 	bl	800102c <_sbrk>
 8007270:	1c43      	adds	r3, r0, #1
 8007272:	d102      	bne.n	800727a <_sbrk_r+0x1a>
 8007274:	682b      	ldr	r3, [r5, #0]
 8007276:	b103      	cbz	r3, 800727a <_sbrk_r+0x1a>
 8007278:	6023      	str	r3, [r4, #0]
 800727a:	bd38      	pop	{r3, r4, r5, pc}
 800727c:	200002e4 	.word	0x200002e4

08007280 <__sread>:
 8007280:	b510      	push	{r4, lr}
 8007282:	460c      	mov	r4, r1
 8007284:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007288:	f000 f8a0 	bl	80073cc <_read_r>
 800728c:	2800      	cmp	r0, #0
 800728e:	bfab      	itete	ge
 8007290:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007292:	89a3      	ldrhlt	r3, [r4, #12]
 8007294:	181b      	addge	r3, r3, r0
 8007296:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800729a:	bfac      	ite	ge
 800729c:	6563      	strge	r3, [r4, #84]	; 0x54
 800729e:	81a3      	strhlt	r3, [r4, #12]
 80072a0:	bd10      	pop	{r4, pc}

080072a2 <__swrite>:
 80072a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072a6:	461f      	mov	r7, r3
 80072a8:	898b      	ldrh	r3, [r1, #12]
 80072aa:	05db      	lsls	r3, r3, #23
 80072ac:	4605      	mov	r5, r0
 80072ae:	460c      	mov	r4, r1
 80072b0:	4616      	mov	r6, r2
 80072b2:	d505      	bpl.n	80072c0 <__swrite+0x1e>
 80072b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072b8:	2302      	movs	r3, #2
 80072ba:	2200      	movs	r2, #0
 80072bc:	f000 f868 	bl	8007390 <_lseek_r>
 80072c0:	89a3      	ldrh	r3, [r4, #12]
 80072c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80072c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80072ca:	81a3      	strh	r3, [r4, #12]
 80072cc:	4632      	mov	r2, r6
 80072ce:	463b      	mov	r3, r7
 80072d0:	4628      	mov	r0, r5
 80072d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80072d6:	f000 b817 	b.w	8007308 <_write_r>

080072da <__sseek>:
 80072da:	b510      	push	{r4, lr}
 80072dc:	460c      	mov	r4, r1
 80072de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072e2:	f000 f855 	bl	8007390 <_lseek_r>
 80072e6:	1c43      	adds	r3, r0, #1
 80072e8:	89a3      	ldrh	r3, [r4, #12]
 80072ea:	bf15      	itete	ne
 80072ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80072ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80072f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80072f6:	81a3      	strheq	r3, [r4, #12]
 80072f8:	bf18      	it	ne
 80072fa:	81a3      	strhne	r3, [r4, #12]
 80072fc:	bd10      	pop	{r4, pc}

080072fe <__sclose>:
 80072fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007302:	f000 b813 	b.w	800732c <_close_r>
	...

08007308 <_write_r>:
 8007308:	b538      	push	{r3, r4, r5, lr}
 800730a:	4d07      	ldr	r5, [pc, #28]	; (8007328 <_write_r+0x20>)
 800730c:	4604      	mov	r4, r0
 800730e:	4608      	mov	r0, r1
 8007310:	4611      	mov	r1, r2
 8007312:	2200      	movs	r2, #0
 8007314:	602a      	str	r2, [r5, #0]
 8007316:	461a      	mov	r2, r3
 8007318:	f7f9 fe37 	bl	8000f8a <_write>
 800731c:	1c43      	adds	r3, r0, #1
 800731e:	d102      	bne.n	8007326 <_write_r+0x1e>
 8007320:	682b      	ldr	r3, [r5, #0]
 8007322:	b103      	cbz	r3, 8007326 <_write_r+0x1e>
 8007324:	6023      	str	r3, [r4, #0]
 8007326:	bd38      	pop	{r3, r4, r5, pc}
 8007328:	200002e4 	.word	0x200002e4

0800732c <_close_r>:
 800732c:	b538      	push	{r3, r4, r5, lr}
 800732e:	4d06      	ldr	r5, [pc, #24]	; (8007348 <_close_r+0x1c>)
 8007330:	2300      	movs	r3, #0
 8007332:	4604      	mov	r4, r0
 8007334:	4608      	mov	r0, r1
 8007336:	602b      	str	r3, [r5, #0]
 8007338:	f7f9 fe43 	bl	8000fc2 <_close>
 800733c:	1c43      	adds	r3, r0, #1
 800733e:	d102      	bne.n	8007346 <_close_r+0x1a>
 8007340:	682b      	ldr	r3, [r5, #0]
 8007342:	b103      	cbz	r3, 8007346 <_close_r+0x1a>
 8007344:	6023      	str	r3, [r4, #0]
 8007346:	bd38      	pop	{r3, r4, r5, pc}
 8007348:	200002e4 	.word	0x200002e4

0800734c <_fstat_r>:
 800734c:	b538      	push	{r3, r4, r5, lr}
 800734e:	4d07      	ldr	r5, [pc, #28]	; (800736c <_fstat_r+0x20>)
 8007350:	2300      	movs	r3, #0
 8007352:	4604      	mov	r4, r0
 8007354:	4608      	mov	r0, r1
 8007356:	4611      	mov	r1, r2
 8007358:	602b      	str	r3, [r5, #0]
 800735a:	f7f9 fe3e 	bl	8000fda <_fstat>
 800735e:	1c43      	adds	r3, r0, #1
 8007360:	d102      	bne.n	8007368 <_fstat_r+0x1c>
 8007362:	682b      	ldr	r3, [r5, #0]
 8007364:	b103      	cbz	r3, 8007368 <_fstat_r+0x1c>
 8007366:	6023      	str	r3, [r4, #0]
 8007368:	bd38      	pop	{r3, r4, r5, pc}
 800736a:	bf00      	nop
 800736c:	200002e4 	.word	0x200002e4

08007370 <_isatty_r>:
 8007370:	b538      	push	{r3, r4, r5, lr}
 8007372:	4d06      	ldr	r5, [pc, #24]	; (800738c <_isatty_r+0x1c>)
 8007374:	2300      	movs	r3, #0
 8007376:	4604      	mov	r4, r0
 8007378:	4608      	mov	r0, r1
 800737a:	602b      	str	r3, [r5, #0]
 800737c:	f7f9 fe3d 	bl	8000ffa <_isatty>
 8007380:	1c43      	adds	r3, r0, #1
 8007382:	d102      	bne.n	800738a <_isatty_r+0x1a>
 8007384:	682b      	ldr	r3, [r5, #0]
 8007386:	b103      	cbz	r3, 800738a <_isatty_r+0x1a>
 8007388:	6023      	str	r3, [r4, #0]
 800738a:	bd38      	pop	{r3, r4, r5, pc}
 800738c:	200002e4 	.word	0x200002e4

08007390 <_lseek_r>:
 8007390:	b538      	push	{r3, r4, r5, lr}
 8007392:	4d07      	ldr	r5, [pc, #28]	; (80073b0 <_lseek_r+0x20>)
 8007394:	4604      	mov	r4, r0
 8007396:	4608      	mov	r0, r1
 8007398:	4611      	mov	r1, r2
 800739a:	2200      	movs	r2, #0
 800739c:	602a      	str	r2, [r5, #0]
 800739e:	461a      	mov	r2, r3
 80073a0:	f7f9 fe36 	bl	8001010 <_lseek>
 80073a4:	1c43      	adds	r3, r0, #1
 80073a6:	d102      	bne.n	80073ae <_lseek_r+0x1e>
 80073a8:	682b      	ldr	r3, [r5, #0]
 80073aa:	b103      	cbz	r3, 80073ae <_lseek_r+0x1e>
 80073ac:	6023      	str	r3, [r4, #0]
 80073ae:	bd38      	pop	{r3, r4, r5, pc}
 80073b0:	200002e4 	.word	0x200002e4

080073b4 <__malloc_lock>:
 80073b4:	4801      	ldr	r0, [pc, #4]	; (80073bc <__malloc_lock+0x8>)
 80073b6:	f7ff bb1d 	b.w	80069f4 <__retarget_lock_acquire_recursive>
 80073ba:	bf00      	nop
 80073bc:	200002d8 	.word	0x200002d8

080073c0 <__malloc_unlock>:
 80073c0:	4801      	ldr	r0, [pc, #4]	; (80073c8 <__malloc_unlock+0x8>)
 80073c2:	f7ff bb18 	b.w	80069f6 <__retarget_lock_release_recursive>
 80073c6:	bf00      	nop
 80073c8:	200002d8 	.word	0x200002d8

080073cc <_read_r>:
 80073cc:	b538      	push	{r3, r4, r5, lr}
 80073ce:	4d07      	ldr	r5, [pc, #28]	; (80073ec <_read_r+0x20>)
 80073d0:	4604      	mov	r4, r0
 80073d2:	4608      	mov	r0, r1
 80073d4:	4611      	mov	r1, r2
 80073d6:	2200      	movs	r2, #0
 80073d8:	602a      	str	r2, [r5, #0]
 80073da:	461a      	mov	r2, r3
 80073dc:	f7f9 fdb8 	bl	8000f50 <_read>
 80073e0:	1c43      	adds	r3, r0, #1
 80073e2:	d102      	bne.n	80073ea <_read_r+0x1e>
 80073e4:	682b      	ldr	r3, [r5, #0]
 80073e6:	b103      	cbz	r3, 80073ea <_read_r+0x1e>
 80073e8:	6023      	str	r3, [r4, #0]
 80073ea:	bd38      	pop	{r3, r4, r5, pc}
 80073ec:	200002e4 	.word	0x200002e4

080073f0 <_init>:
 80073f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073f2:	bf00      	nop
 80073f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073f6:	bc08      	pop	{r3}
 80073f8:	469e      	mov	lr, r3
 80073fa:	4770      	bx	lr

080073fc <_fini>:
 80073fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073fe:	bf00      	nop
 8007400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007402:	bc08      	pop	{r3}
 8007404:	469e      	mov	lr, r3
 8007406:	4770      	bx	lr
